import "copyright.stg"
import "primitiveLiteral.stg"

targetPath() ::= "com/gs/collections/api"

fileName(primitive) ::= "<primitive.name>Iterable"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.api;

import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.predicate.primitive.<name>Predicate;
import com.gs.collections.api.block.procedure.primitive.<name>Procedure;
import com.gs.collections.api.iterator.<name>Iterator;

/**
 * This file was automatically generated from template file primitiveIterable.stg.
 * <name>Iterable is an interface which is memory-optimized for <type> primitives.
 * It is inspired by the interface RichIterable, and contains a subset of the internal iterator methods on RichIterable like collect, sum, etc.
 * The API also includes an external iterator method, which returns an <name>Iterator. <name>Iterator helps iterate over the <name>Iterable without boxing the primitives.
 */
public interface <name>Iterable
{
    <name>Iterator <type>Iterator();

    void forEach(<name>Procedure procedure);

    int size();

    boolean isEmpty();

    boolean notEmpty();

    int count(<name>Predicate predicate);

    boolean anySatisfy(<name>Predicate predicate);

    boolean allSatisfy(<name>Predicate predicate);

    <name>Iterable select(<name>Predicate predicate);

    <name>Iterable reject(<name>Predicate predicate);

    <type> detectIfNone(<name>Predicate predicate, <type> ifNone);

    \<V\> RichIterable\<V\> collect(<name>ToObjectFunction\<? extends V\> function);

    <(arithmeticMethods.(type))(type)>

    <type>[] toArray();

    boolean contains(<type> value);

    boolean containsAll(<type>... source);

    String makeString();

    String makeString(String separator);

    String makeString(String start, String separator, String end);

    void appendString(Appendable appendable);

    void appendString(Appendable appendable, String separator);

    void appendString(Appendable appendable, String start, String separator, String end);
}

>>

arithmeticMethods ::= [
    "byte": "allMethods",
    "short": "allMethods",
    "char": "allMethods",
    "int": "allMethods",
    "long": "allMethods",
    "float": "allMethods",
    "double": "allMethods",
    "boolean": "noMethods"
    ]

allMethods(type) ::= <<
<(wideType.(type))> sum();

<type> max();

<type> min();

double average();

double median();

<type>[] toSortedArray();
>>

noMethods(type) ::= ""
