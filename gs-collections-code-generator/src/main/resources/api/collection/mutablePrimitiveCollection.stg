import "copyright.stg"
import "primitiveAPI.stg"

targetPath() ::= "com/gs/collections/api/collection/primitive"

fileName(primitive) ::= "Mutable<primitive.name>Collection"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive)>
>>

body(type, name, primitive) ::= <<
<copyright()>

package com.gs.collections.api.collection.primitive;

import com.gs.collections.api.<name>Iterable;
import com.gs.collections.api.block.predicate.primitive.<name>Predicate;

/**
 * This file was automatically generated from template file mutablePrimitiveCollection.stg.
 *
 * @since 3.0.
 */
public interface Mutable<name>Collection extends <name>Iterable
{
    boolean add(<type> element);

    boolean addAll(<type>... source);

    boolean addAll(<name>Iterable source);

    boolean remove(<type> value);

    boolean removeAll(<name>Iterable source);

    boolean removeAll(<type>... source);

    void clear();

    <sharedAPI(fileName(primitive), name)>

    <mutableAPI(fileName(primitive), type, name)>

    Mutable<name>Collection asUnmodifiable();

    Mutable<name>Collection asSynchronized();
}

>>
