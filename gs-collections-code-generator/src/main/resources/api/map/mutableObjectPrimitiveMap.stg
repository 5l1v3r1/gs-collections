import "copyright.stg"

targetPath() ::= "com/gs/collections/api/map/primitive"

fileName(primitive) ::= "MutableObject<primitive.name>Map"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.api.map.primitive;

import com.gs.collections.api.block.function.primitive.<name>Function;
import com.gs.collections.api.block.function.primitive.<name>Function0;
import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.predicate.primitive.<name>Predicate;
import com.gs.collections.api.block.predicate.primitive.Object<name>Predicate;
import com.gs.collections.api.collection.MutableCollection;
import com.gs.collections.api.collection.primitive.Mutable<name>Collection;

/**
 * This file was automatically generated from template file mutableObjectPrimitiveMap.stg.
 *
 * @since 3.0.
 */
public interface MutableObject<name>Map\<K> extends Object<name>Map\<K>
{
    void clear();

    void put(K key, <type> value);

    void removeKey(K key);

    <type> getIfAbsentPut(K key, <name>Function0 function);

    <type> getIfAbsentPutWithKey(K key, <name>Function\<? super K> function);

    \<P> <type> getIfAbsentPutWith(K key, <name>Function\<? super P> function, P parameter);

    MutableObject<name>Map\<K> select(Object<name>Predicate\<? super K> predicate);

    MutableObject<name>Map\<K> reject(Object<name>Predicate\<? super K> predicate);

    Mutable<name>Collection select(<name>Predicate predicate);

    Mutable<name>Collection reject(<name>Predicate predicate);

    \<V> MutableCollection\<V> collect(<name>ToObjectFunction\<? extends V> function);

    MutableObject<name>Map\<K> withKeyValue(K key, <type> value);

    MutableObject<name>Map\<K> withoutKey(K key);

    MutableObject<name>Map\<K> withoutAllKeys(Iterable\<? extends K> keys);

    MutableObject<name>Map\<K> asUnmodifiable();

    MutableObject<name>Map\<K> asSynchronized();

    ImmutableObject<name>Map\<K> toImmutable();
}

>>
