import "copyright.stg"

skipBooleanKeys() ::= "true"

hasTwoPrimitives() ::= "true"

targetPath() ::= "com/gs/collections/api/map/primitive"

fileName(primitive1, primitive2, sameTwoPrimitives) ::= "<primitive1.name><primitive2.name>Map"

class(primitive1, primitive2, sameTwoPrimitives) ::= <<
<body(primitive1.type, primitive2.type, primitive1.name, primitive2.name)>
>>

body(type1, type2, name1, name2) ::= <<
<copyright()>

package com.gs.collections.api.map.primitive;

import java.util.Map;

import com.gs.collections.api.<name2>Iterable;
import com.gs.collections.api.Lazy<name1>Iterable;
import com.gs.collections.api.block.predicate.primitive.<name1><name2>Predicate;
import com.gs.collections.api.block.procedure.primitive.<name1><name2>Procedure;
import com.gs.collections.api.block.procedure.primitive.<name1>Procedure;
<if(!sameTwoPrimitives)>import com.gs.collections.api.block.procedure.primitive.<name2>Procedure;<endif>

/**
 * This file was automatically generated from template file primitivePrimitiveMap.stg.
 *
 * @since 3.0.
 */
public interface <name1><name2>Map extends <name2>Iterable
{
    <type2> get(<type1> key);

    <type2> getIfAbsent(<type1> key, <type2> ifAbsent);

    <type2> getOrThrow(<type1> key);

    boolean containsKey(<type1> key);

    boolean containsValue(<type2> value);

    void forEachValue(<name2>Procedure procedure);

    void forEachKey(<name1>Procedure procedure);

    void forEachKeyValue(<name1><name2>Procedure procedure);

    Lazy<name1>Iterable keysView();

    <name1><name2>Map select(<name1><name2>Predicate predicate);

    <name1><name2>Map reject(<name1><name2>Predicate predicate);

    /**
     * Follows the same general contract as {@link Map#equals(Object)}.
     */
    @Override
    boolean equals(Object o);

    /**
     * Follows the same general contract as {@link Map#hashCode()}.
     */
    @Override
    int hashCode();
}

>>
