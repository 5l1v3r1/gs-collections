import "copyright.stg"

targetPath() ::= "com/gs/collections/api/map/primitive"

fileName(primitive) ::= "Object<primitive.name>Map"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.api.map.primitive;

import com.gs.collections.api.<name>Iterable;
import com.gs.collections.api.block.predicate.primitive.Object<name>Predicate;
import com.gs.collections.api.block.procedure.Procedure;
import com.gs.collections.api.block.procedure.primitive.Object<name>Procedure;
import com.gs.collections.api.block.procedure.primitive.<name>Procedure;

/**
 * This file was automatically generated from template file objectPrimitiveMap.stg.
 */
public interface Object<name>Map\<K> extends <name>Iterable
{
    <type> get(Object key);

    boolean containsKey(Object key);

    boolean containsValue(<type> value);

    void forEachValue(<name>Procedure procedure);

    void forEachKey(Procedure\<? super K> procedure);

    void forEachKeyValue(Object<name>Procedure\<? super K> procedure);

    Object<name>Map\<K> select(Object<name>Predicate\<? super K> predicate);

    Object<name>Map\<K> reject(Object<name>Predicate\<? super K> predicate);
}

>>
