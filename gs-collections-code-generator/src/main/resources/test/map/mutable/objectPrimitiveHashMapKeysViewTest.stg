import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "primitiveEquals.stg"

skipBoolean() ::= "true"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/map/mutable/primitive"

fileName(primitive) ::= "Object<primitive.name>HashMapKeysViewTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive.wrapperName)>
>>

body(type, name, wrapperName) ::= <<
<copyright()>

package com.gs.collections.impl.map.mutable.primitive;

import java.util.Iterator;
import java.util.NoSuchElementException;

import com.gs.collections.api.LazyIterable;
import com.gs.collections.impl.lazy.AbstractLazyIterableTestCase;
import com.gs.collections.impl.set.mutable.UnifiedSet;
import com.gs.collections.impl.test.Verify;
import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test for {@link Object<name>HashMap#keysView()}.
 * This file was automatically generated from template file objectPrimitiveHashMapKeysViewTest.stg.
 */
public class Object<name>HashMapKeysViewTest extends AbstractLazyIterableTestCase
{
    @Override
    protected \<T> LazyIterable\<T> newWith(T... elements)
    {
        Object<name>HashMap\<T> map = new Object<name>HashMap\<T>();
        for (int i = 0; i \< elements.length; i++)
        {
            map.put(elements[i], <(castIntToNarrowType.(type))("i")>);
        }
        return map.keysView();
    }

    @Override
    @Test
    public void iterator()
    {
        UnifiedSet\<String> expected = UnifiedSet.newSetWith("zero", "thirtyOne", "thirtyTwo");
        UnifiedSet\<String> actual = UnifiedSet.newSet();

        final Iterator\<String> iterator = Object<name>HashMap.newWithKeysValues("zero", <(literal.(type))("0")>, "thirtyOne", <(literal.(type))("31")>, "thirtyTwo", <(literal.(type))("32")>).keysView().iterator();
        Assert.assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        Verify.assertThrows(UnsupportedOperationException.class, new Runnable()
        {
            public void run()
            {
                iterator.remove();
            }
        });
        Assert.assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        Assert.assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        Assert.assertFalse(iterator.hasNext());

        Assert.assertEquals(expected, actual);
        Verify.assertThrows(NoSuchElementException.class, new Runnable()
        {
            public void run()
            {
                iterator.next();
            }
        });
    }
}

>>
