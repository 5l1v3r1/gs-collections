import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "primitiveEquals.stg"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/map/mutable/primitive"

fileName(primitive) ::= "Boolean<primitive.name>HashMapKeysViewTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.impl.map.mutable.primitive;

import java.util.Arrays;
import java.util.NoSuchElementException;

import com.gs.collections.api.LazyBooleanIterable;
import com.gs.collections.api.block.function.primitive.BooleanToObjectFunction;
import com.gs.collections.api.block.procedure.primitive.BooleanProcedure;
import com.gs.collections.api.iterator.BooleanIterator;
import com.gs.collections.impl.bag.mutable.primitive.BooleanHashBag;
import com.gs.collections.impl.block.factory.primitive.BooleanPredicates;
import com.gs.collections.impl.list.mutable.FastList;
import com.gs.collections.impl.list.mutable.primitive.BooleanArrayList;
import com.gs.collections.impl.set.mutable.primitive.BooleanHashSet;
import com.gs.collections.impl.test.Verify;
import org.junit.Assert;
import org.junit.Test;

/**
 * This file was automatically generated from template file booleanPrimitiveHashMapKeysViewTest.stg.
 * JUnit test for {@link Boolean<name>HashMap#keysView()}.
 */
public class Boolean<name>HashMapKeysViewTest
{
    private final LazyBooleanIterable iterable0 = Boolean<name>HashMap.newMap().keysView();
    private final LazyBooleanIterable iterable1 = Boolean<name>HashMap.newWithKeysValues(false, <zero.(type)>).keysView();
    private final LazyBooleanIterable iterable2 = Boolean<name>HashMap.newWithKeysValues(true, <zero.(type)>).keysView();
    private final LazyBooleanIterable iterable3 = Boolean<name>HashMap.newWithKeysValues(false, <zero.(type)>, true, <zero.(type)>).keysView();

    @Test
    public void isEmpty()
    {
        Verify.assertEmpty(this.iterable0);
        Assert.assertFalse(this.iterable1.isEmpty());
        Assert.assertFalse(this.iterable2.isEmpty());
        Assert.assertFalse(this.iterable3.isEmpty());
    }

    @Test
    public void notEmpty()
    {
        Assert.assertFalse(this.iterable0.notEmpty());
        Assert.assertTrue(this.iterable1.notEmpty());
        Assert.assertTrue(this.iterable2.notEmpty());
        Assert.assertTrue(this.iterable3.notEmpty());
    }

    @Test
    public void size()
    {
        Verify.assertSize(0, this.iterable0);
        Verify.assertSize(1, this.iterable1);
        Verify.assertSize(1, this.iterable2);
        Verify.assertSize(2, this.iterable3);
    }

    @Test
    public void contains()
    {
        Assert.assertFalse(this.iterable0.contains(true));
        Assert.assertFalse(this.iterable1.contains(true));
        Assert.assertTrue(this.iterable2.contains(true));
        Assert.assertTrue(this.iterable3.contains(true));

        Assert.assertFalse(this.iterable0.contains(false));
        Assert.assertTrue(this.iterable1.contains(false));
        Assert.assertFalse(this.iterable2.contains(false));
        Assert.assertTrue(this.iterable3.contains(false));
    }

    @Test
    public void containsAllArray()
    {
        Assert.assertFalse(this.iterable0.containsAll(true));
        Assert.assertFalse(this.iterable0.containsAll(true, false));
        Assert.assertTrue(this.iterable1.containsAll(false, false));
        Assert.assertFalse(this.iterable1.containsAll(true, true));
        Assert.assertFalse(this.iterable1.containsAll(true, false, true));
        Assert.assertTrue(this.iterable2.containsAll(true, true));
        Assert.assertFalse(this.iterable2.containsAll(false, false));
        Assert.assertFalse(this.iterable2.containsAll(true, false, false));
        Assert.assertTrue(this.iterable3.containsAll(true, true));
        Assert.assertTrue(this.iterable3.containsAll(false, false));
        Assert.assertTrue(this.iterable3.containsAll(false, true, true));
    }

    @Test
    public void containsAllIterable()
    {
        Assert.assertFalse(this.iterable0.containsAll(BooleanArrayList.newListWith(true)));
        Assert.assertFalse(this.iterable0.containsAll(BooleanArrayList.newListWith(true, false)));
        Assert.assertTrue(this.iterable1.containsAll(BooleanArrayList.newListWith(false, false)));
        Assert.assertFalse(this.iterable1.containsAll(BooleanArrayList.newListWith(true, true)));
        Assert.assertFalse(this.iterable1.containsAll(BooleanArrayList.newListWith(true, false, true)));
        Assert.assertTrue(this.iterable2.containsAll(BooleanArrayList.newListWith(true, true)));
        Assert.assertFalse(this.iterable2.containsAll(BooleanArrayList.newListWith(false, false)));
        Assert.assertFalse(this.iterable2.containsAll(BooleanArrayList.newListWith(true, false, false)));
        Assert.assertTrue(this.iterable3.containsAll(BooleanArrayList.newListWith(true, true)));
        Assert.assertTrue(this.iterable3.containsAll(BooleanArrayList.newListWith(false, false)));
        Assert.assertTrue(this.iterable3.containsAll(BooleanArrayList.newListWith(false, true, true)));
    }

    @Test
    public void forEach()
    {
        final String[] sum = new String[4];
        for (int i = 0; i \< sum.length; i++)
        {
            sum[i] = "";

        }
        this.iterable0.forEach(new BooleanProcedure()
        {
            public void value(boolean each)
            {
                sum[0] += each;
            }
        });

        this.iterable1.forEach(new BooleanProcedure()
        {
            public void value(boolean each)
            {
                sum[1] += each;
            }
        });

        this.iterable2.forEach(new BooleanProcedure()
        {
            public void value(boolean each)
            {
                sum[2] += each;
            }
        });

        this.iterable3.forEach(new BooleanProcedure()
        {
            public void value(boolean each)
            {
                sum[3] += each;
            }
        });

        Assert.assertEquals("", sum[0]);
        Assert.assertEquals("false", sum[1]);
        Assert.assertEquals("true", sum[2]);
        Assert.assertTrue(sum[3], "truefalse".equals(sum[3]) || "falsetrue".equals(sum[3]));
    }

    @Test
    public void makeString()
    {
        Assert.assertEquals("", this.iterable0.makeString());
        Assert.assertEquals("false", this.iterable1.makeString());
        Assert.assertEquals("true", this.iterable2.makeString());
        Assert.assertTrue("true, false".equals(this.iterable3.makeString())
                || "false, true".equals(this.iterable3.makeString()));

        Assert.assertEquals("", this.iterable0.makeString("/"));
        Assert.assertEquals("false", this.iterable1.makeString("/"));
        Assert.assertEquals("true", this.iterable2.makeString("/"));
        Assert.assertTrue(this.iterable3.makeString("/"), "true/false".equals(this.iterable3.makeString("/"))
                || "false/true".equals(this.iterable3.makeString("/")));

        Assert.assertEquals("[]", this.iterable0.makeString("[", "/", "]"));
        Assert.assertEquals("[false]", this.iterable1.makeString("[", "/", "]"));
        Assert.assertEquals("[true]", this.iterable2.makeString("[", "/", "]"));
        Assert.assertTrue(this.iterable3.makeString("[", "/", "]"), "[true/false]".equals(this.iterable3.makeString("[", "/", "]"))
                || "[false/true]".equals(this.iterable3.makeString("[", "/", "]")));
    }

    @Test
    public void appendString()
    {
        StringBuilder appendable = new StringBuilder();
        this.iterable0.appendString(appendable);
        Assert.assertEquals("", appendable.toString());

        StringBuilder appendable1 = new StringBuilder();
        this.iterable1.appendString(appendable1);
        Assert.assertEquals("false", appendable1.toString());

        StringBuilder appendable2 = new StringBuilder();
        this.iterable2.appendString(appendable2);
        Assert.assertEquals("true", appendable2.toString());

        StringBuilder appendable3 = new StringBuilder();
        this.iterable3.appendString(appendable3);
        Assert.assertTrue("true, false".equals(appendable3.toString())
                || "false, true".equals(appendable3.toString()));

        StringBuilder appendable4 = new StringBuilder();
        this.iterable3.appendString(appendable4, "[", ", ", "]");
        Assert.assertTrue("[true, false]".equals(appendable4.toString())
                || "[false, true]".equals(appendable4.toString()));
    }

    @Test
    public void count()
    {
        Assert.assertEquals(0L, this.iterable0.count(BooleanPredicates.isTrue()));
        Assert.assertEquals(0L, this.iterable1.count(BooleanPredicates.isTrue()));
        Assert.assertEquals(1L, this.iterable1.count(BooleanPredicates.isFalse()));
        Assert.assertEquals(0L, this.iterable2.count(BooleanPredicates.isFalse()));
        Assert.assertEquals(1L, this.iterable3.count(BooleanPredicates.isTrue()));
        Assert.assertEquals(0L, this.iterable3.count(BooleanPredicates.and(BooleanPredicates.isFalse(), BooleanPredicates.isTrue())));
        Assert.assertEquals(1L, this.iterable3.count(BooleanPredicates.isFalse()));
        Assert.assertEquals(1L, this.iterable3.count(BooleanPredicates.isTrue()));
        Assert.assertEquals(2L, this.iterable3.count(BooleanPredicates.or(BooleanPredicates.isFalse(), BooleanPredicates.isTrue())));
    }

    @Test
    public void anySatisfy()
    {
        Assert.assertFalse(this.iterable0.anySatisfy(BooleanPredicates.or(BooleanPredicates.isTrue(), BooleanPredicates.isFalse())));
        Assert.assertFalse(this.iterable1.anySatisfy(BooleanPredicates.isTrue()));
        Assert.assertTrue(this.iterable1.anySatisfy(BooleanPredicates.isFalse()));
        Assert.assertFalse(this.iterable2.anySatisfy(BooleanPredicates.isFalse()));
        Assert.assertTrue(this.iterable2.anySatisfy(BooleanPredicates.isTrue()));
        Assert.assertTrue(this.iterable3.anySatisfy(BooleanPredicates.isTrue()));
        Assert.assertTrue(this.iterable3.anySatisfy(BooleanPredicates.isFalse()));
        Assert.assertFalse(this.iterable3.anySatisfy(BooleanPredicates.and(BooleanPredicates.isFalse(), BooleanPredicates.isTrue())));
    }

    @Test
    public void allSatisfy()
    {
        Assert.assertTrue(this.iterable0.allSatisfy(BooleanPredicates.or(BooleanPredicates.isTrue(), BooleanPredicates.isFalse())));
        Assert.assertFalse(this.iterable1.allSatisfy(BooleanPredicates.isTrue()));
        Assert.assertTrue(this.iterable1.allSatisfy(BooleanPredicates.isFalse()));
        Assert.assertFalse(this.iterable2.allSatisfy(BooleanPredicates.isFalse()));
        Assert.assertTrue(this.iterable2.allSatisfy(BooleanPredicates.isTrue()));
        Assert.assertFalse(this.iterable3.allSatisfy(BooleanPredicates.isTrue()));
        Assert.assertFalse(this.iterable3.allSatisfy(BooleanPredicates.isFalse()));
        Assert.assertFalse(this.iterable3.allSatisfy(BooleanPredicates.and(BooleanPredicates.isFalse(), BooleanPredicates.isTrue())));
        Assert.assertTrue(this.iterable3.allSatisfy(BooleanPredicates.or(BooleanPredicates.isFalse(), BooleanPredicates.isTrue())));
    }

    @Test
    public void select()
    {
        Verify.assertEmpty(this.iterable0.select(BooleanPredicates.or(BooleanPredicates.isTrue(), BooleanPredicates.isFalse())));
        Verify.assertEmpty(this.iterable1.select(BooleanPredicates.isTrue()));
        Verify.assertSize(1, this.iterable1.select(BooleanPredicates.isFalse()));
        Verify.assertEmpty(this.iterable2.select(BooleanPredicates.isFalse()));
        Verify.assertSize(1, this.iterable2.select(BooleanPredicates.isTrue()));
        Verify.assertSize(1, this.iterable3.select(BooleanPredicates.isFalse()));
        Verify.assertSize(1, this.iterable3.select(BooleanPredicates.isTrue()));
        Verify.assertEmpty(this.iterable3.select(BooleanPredicates.and(BooleanPredicates.isFalse(), BooleanPredicates.isTrue())));
        Verify.assertSize(2, this.iterable3.select(BooleanPredicates.or(BooleanPredicates.isFalse(), BooleanPredicates.isTrue())));
    }

    @Test
    public void reject()
    {
        Verify.assertEmpty(this.iterable0.reject(BooleanPredicates.and(BooleanPredicates.isTrue(), BooleanPredicates.isFalse())));
        Verify.assertEmpty(this.iterable2.reject(BooleanPredicates.isTrue()));
        Verify.assertSize(1, this.iterable2.reject(BooleanPredicates.isFalse()));
        Verify.assertEmpty(this.iterable1.reject(BooleanPredicates.isFalse()));
        Verify.assertSize(1, this.iterable1.reject(BooleanPredicates.isTrue()));
        Verify.assertSize(1, this.iterable3.reject(BooleanPredicates.isFalse()));
        Verify.assertSize(1, this.iterable3.reject(BooleanPredicates.isTrue()));
        Verify.assertEmpty(this.iterable3.reject(BooleanPredicates.or(BooleanPredicates.isFalse(), BooleanPredicates.isTrue())));
        Verify.assertSize(2, this.iterable3.reject(BooleanPredicates.and(BooleanPredicates.isFalse(), BooleanPredicates.isTrue())));
    }

    @Test
    public void detectIfNone()
    {
        Assert.assertTrue(this.iterable0.detectIfNone(BooleanPredicates.or(BooleanPredicates.isTrue(), BooleanPredicates.isFalse()), true));
        Assert.assertFalse(this.iterable0.detectIfNone(BooleanPredicates.or(BooleanPredicates.isTrue(), BooleanPredicates.isFalse()), false));
        Assert.assertTrue(this.iterable1.detectIfNone(BooleanPredicates.isTrue(), true));
        Assert.assertFalse(this.iterable1.detectIfNone(BooleanPredicates.isTrue(), false));
        Assert.assertFalse(this.iterable1.detectIfNone(BooleanPredicates.isFalse(), true));
        Assert.assertFalse(this.iterable1.detectIfNone(BooleanPredicates.isFalse(), false));
        Assert.assertTrue(this.iterable2.detectIfNone(BooleanPredicates.isFalse(), true));
        Assert.assertFalse(this.iterable2.detectIfNone(BooleanPredicates.isFalse(), false));
        Assert.assertTrue(this.iterable2.detectIfNone(BooleanPredicates.isTrue(), true));
        Assert.assertTrue(this.iterable2.detectIfNone(BooleanPredicates.isTrue(), false));
        Assert.assertTrue(this.iterable3.detectIfNone(BooleanPredicates.and(BooleanPredicates.isFalse(), BooleanPredicates.isTrue()), true));
        Assert.assertFalse(this.iterable3.detectIfNone(BooleanPredicates.and(BooleanPredicates.isFalse(), BooleanPredicates.isTrue()), false));
        Assert.assertFalse(this.iterable3.detectIfNone(BooleanPredicates.isFalse(), true));
        Assert.assertTrue(this.iterable3.detectIfNone(BooleanPredicates.isTrue(), false));
    }

    @Test
    public void collect()
    {
        BooleanToObjectFunction\<Boolean> function = new BooleanToObjectFunction\<Boolean>()
        {
            public Boolean valueOf(boolean parameter)
            {
                return !parameter;
            }
        };
        Assert.assertTrue(FastList.newListWith(true, false).equals(this.iterable3.collect(function))
                || FastList.newListWith(false, true).equals(this.iterable3.collect(function)));
        Assert.assertEquals(FastList.newListWith(false), this.iterable2.collect(function));
        Assert.assertEquals(FastList.newListWith(true), this.iterable1.collect(function));
        Assert.assertEquals(FastList.newListWith(), this.iterable0.collect(function));
    }

    @Test
    public void toArray()
    {
        Assert.assertEquals(0L, this.iterable0.toArray().length);

        Assert.assertEquals(1L, this.iterable1.toArray().length);
        Assert.assertFalse(this.iterable1.toArray()[0]);

        Assert.assertEquals(1L, this.iterable2.toArray().length);
        Assert.assertTrue(this.iterable2.toArray()[0]);

        Assert.assertEquals(2L, this.iterable3.toArray().length);
        Assert.assertTrue(Arrays.equals(new boolean[]{false, true}, this.iterable3.toArray())
                || Arrays.equals(new boolean[]{true, false}, this.iterable3.toArray()));
    }

    @Test
    public void toList()
    {
        Assert.assertEquals(new BooleanArrayList(), this.iterable0.toList());
        Assert.assertEquals(BooleanArrayList.newListWith(false), this.iterable1.toList());
        Assert.assertEquals(BooleanArrayList.newListWith(true), this.iterable2.toList());
        Assert.assertTrue(BooleanArrayList.newListWith(false, true).equals(this.iterable3.toList())
                || BooleanArrayList.newListWith(true, false).equals(this.iterable3.toList()));
    }

    @Test
    public void toSortedList()
    {
        Assert.assertEquals(new BooleanArrayList(), this.iterable0.toSortedList());
        Assert.assertEquals(BooleanArrayList.newListWith(false), this.iterable1.toSortedList());
        Assert.assertEquals(BooleanArrayList.newListWith(true), this.iterable2.toSortedList());
        Assert.assertEquals(BooleanArrayList.newListWith(false, true), this.iterable3.toSortedList());
    }

    @Test
    public void toSet()
    {
        Assert.assertEquals(new BooleanHashSet(), this.iterable0.toSet());
        Assert.assertEquals(BooleanHashSet.newSetWith(false), this.iterable1.toSet());
        Assert.assertEquals(BooleanHashSet.newSetWith(true), this.iterable2.toSet());
        Assert.assertEquals(BooleanHashSet.newSetWith(false, true), this.iterable3.toSet());
    }

    @Test
    public void toBag()
    {
        Assert.assertEquals(new BooleanHashBag(), this.iterable0.toBag());
        Assert.assertEquals(BooleanHashBag.newBagWith(false), this.iterable1.toBag());
        Assert.assertEquals(BooleanHashBag.newBagWith(true), this.iterable2.toBag());
        Assert.assertEquals(BooleanHashBag.newBagWith(false, true), this.iterable3.toBag());
    }

    @Test
    public void booleanIterator()
    {
        final BooleanIterator booleanIterator0 = this.iterable0.booleanIterator();
        Assert.assertFalse(booleanIterator0.hasNext());
        Verify.assertThrows(NoSuchElementException.class, new Runnable()
        {
            public void run()
            {
                booleanIterator0.next();
            }
        });

        final BooleanIterator booleanIterator1 = this.iterable1.booleanIterator();
        Assert.assertTrue(booleanIterator1.hasNext());
        Assert.assertFalse(booleanIterator1.next());
        Assert.assertFalse(booleanIterator1.hasNext());
        Verify.assertThrows(NoSuchElementException.class, new Runnable()
        {
            public void run()
            {
                booleanIterator1.next();
            }
        });

        final BooleanIterator booleanIterator2 = this.iterable2.booleanIterator();
        Assert.assertTrue(booleanIterator2.hasNext());
        Assert.assertTrue(booleanIterator2.next());
        Assert.assertFalse(booleanIterator2.hasNext());
        Verify.assertThrows(NoSuchElementException.class, new Runnable()
        {
            public void run()
            {
                booleanIterator2.next();
            }
        });

        final BooleanIterator booleanIterator3 = this.iterable3.booleanIterator();
        BooleanHashSet actual = new BooleanHashSet();
        Assert.assertTrue(booleanIterator3.hasNext());
        actual.add(booleanIterator3.next());
        Assert.assertTrue(booleanIterator3.hasNext());
        actual.add(booleanIterator3.next());
        Assert.assertEquals(BooleanHashSet.newSetWith(true, false), actual);
        Assert.assertFalse(booleanIterator3.hasNext());
        Verify.assertThrows(NoSuchElementException.class, new Runnable()
        {
            public void run()
            {
                booleanIterator3.next();
            }
        });
    }

}

>>
