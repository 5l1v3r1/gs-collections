import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/map/mutable/primitive"

fileName(primitive) ::= "<primitive.name>ObjectHashMapTest"

skipBoolean() ::= "true"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive.wrapperName)>
>>

body(type, name, wrapperName) ::= <<
<copyright()>

package com.gs.collections.impl.map.mutable.primitive;

import java.lang.reflect.Field;

import com.gs.collections.api.block.function.Function;
import com.gs.collections.api.block.function.Function2;
import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.map.primitive.Mutable<name>ObjectMap;
import com.gs.collections.impl.block.factory.Functions0;
import com.gs.collections.impl.block.function.AddFunction;
import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test for {@link <name>ObjectHashMap}.
 * This file was automatically generated from template file primitiveObjectHashMapTest.stg.
 */
public class <name>ObjectHashMapTest extends AbstractMutable<name>ObjectMapTestCase
{
    @Override
    protected <name>ObjectHashMap\<String> classUnderTest()
    {
        return <name>ObjectHashMap.newWithKeysValues(<(literal.(type))("0")>, "zero", <(literal.(type))("31")>, "thirtyOne", <(literal.(type))("32")>, "thirtyTwo");
    }

    @Override
    protected \<T> <name>ObjectHashMap\<T> newWithKeysValues(<type> key1, T value1)
    {
        return <name>ObjectHashMap.newWithKeysValues(key1, value1);
    }

    @Override
    protected \<T> <name>ObjectHashMap\<T> newWithKeysValues(<type> key1, T value1, <type> key2, T value2)
    {
        return <name>ObjectHashMap.newWithKeysValues(key1, value1, key2, value2);
    }

    @Override
    protected \<T> <name>ObjectHashMap\<T> newWithKeysValues(<type> key1, T value1, <type> key2, T value2, <type> key3, T value3)
    {
        return <name>ObjectHashMap.newWithKeysValues(key1, value1, key2, value2, key3, value3);
    }

    @Override
    protected \<T> <name>ObjectHashMap\<T> getEmptyMap()
    {
        return new <name>ObjectHashMap\<T>();
    }

    @Test
    public void defaultInitialCapacity() throws NoSuchFieldException, IllegalAccessException
    {
        Field keys = <name>ObjectHashMap.class.getDeclaredField("keys");
        keys.setAccessible(true);
        Field values = <name>ObjectHashMap.class.getDeclaredField("values");
        values.setAccessible(true);

        <name>ObjectHashMap\<Object> hashMap = new <name>ObjectHashMap\<Object>();
        Assert.assertEquals(16L, ((<type>[]) keys.get(hashMap)).length);
        Assert.assertEquals(16L, ((Object[]) values.get(hashMap)).length);
    }

    @Test
    public void newWithInitialCapacity() throws NoSuchFieldException, IllegalAccessException
    {
        Field keys = <name>ObjectHashMap.class.getDeclaredField("keys");
        keys.setAccessible(true);
        Field values = <name>ObjectHashMap.class.getDeclaredField("values");
        values.setAccessible(true);

        <name>ObjectHashMap\<Object> hashMap = new <name>ObjectHashMap\<Object>(3);
        Assert.assertEquals(8L, ((<type>[]) keys.get(hashMap)).length);
        Assert.assertEquals(8L, ((Object[]) values.get(hashMap)).length);

        <name>ObjectHashMap\<?> hashMap2 = new <name>ObjectHashMap\<Object>(15);
        Assert.assertEquals(32L, ((<type>[]) keys.get(hashMap2)).length);
        Assert.assertEquals(32L, ((Object[]) values.get(hashMap2)).length);
    }

    @Test(expected = IllegalArgumentException.class)
    public void newWithInitialCapacity_negative_throws()
    {
        new <name>ObjectHashMap\<Object>(-1);
    }

    @Test
    public void newMap() throws NoSuchFieldException, IllegalAccessException
    {
        Field keys = <name>ObjectHashMap.class.getDeclaredField("keys");
        keys.setAccessible(true);
        Field values = <name>ObjectHashMap.class.getDeclaredField("values");
        values.setAccessible(true);

        <name>ObjectHashMap\<Object> hashMap = <name>ObjectHashMap.newMap();
        Assert.assertEquals(16L, ((<type>[]) keys.get(hashMap)).length);
        Assert.assertEquals(16L, ((Object[]) values.get(hashMap)).length);
        Assert.assertEquals(new <name>ObjectHashMap\<Object>(), hashMap);
    }

    @Test
    public void putWithRehash() throws NoSuchFieldException, IllegalAccessException
    {
        <name>ObjectHashMap\<String> hashMap = <name>ObjectHashMap.newMap();
        for (<type> i = <(literal.(type))("2")>; i \< <(literal.(type))("10")>; i++)
        {
            Assert.assertNull(hashMap.put(i, String.valueOf(i)));
        }

        Field keys = <name>ObjectHashMap.class.getDeclaredField("keys");
        Field values = <name>ObjectHashMap.class.getDeclaredField("values");
        keys.setAccessible(true);
        values.setAccessible(true);
        Assert.assertEquals(16L, ((<type>[]) keys.get(hashMap)).length);
        Assert.assertEquals(16L, ((Object[]) values.get(hashMap)).length);
        Assert.assertEquals(8, hashMap.size());
        for (<type> i = <(literal.(type))("2")>; i \< <(literal.(type))("10")>; i++)
        {
            Assert.assertTrue(hashMap.containsKey(i));
            Assert.assertTrue(hashMap.containsValue(String.valueOf(i)));
        }
        Assert.assertNull(hashMap.put(<(literal.(type))("10")>, "10"));
        Assert.assertEquals(32L, ((<type>[]) keys.get(hashMap)).length);
        Assert.assertEquals(32L, ((Object[]) values.get(hashMap)).length);
    }

    @Test
    public void testPutAll()
    {
        <name>ObjectHashMap\<String> hashMap = <name>ObjectHashMap.newMap();
        <name>ObjectHashMap\<String> copyMap = <name>ObjectHashMap.newMap();

        for (<type> i = <(literal.(type))("1")>; i \< <(literal.(type))("10")>; i++)
        {
            Assert.assertFalse(copyMap.containsKey(i));
            copyMap.put(i, String.valueOf(i));
        }

        Assert.assertEquals(9, copyMap.size());
        Assert.assertEquals(0, hashMap.size());

        hashMap.putAll(copyMap);
        Assert.assertEquals(9, hashMap.size());

        for (<type> i = <(literal.(type))("1")>; i \< <(literal.(type))("10")>; i++)
        {
            Assert.assertTrue(hashMap.containsKey(i));
        }

        Assert.assertEquals(hashMap, copyMap);
    }

    @Override
    @Test
    public void withKeysValues()
    {
        super.withKeysValues();
        <name>ObjectHashMap\<String> hashMap0 = new <name>ObjectHashMap\<String>();
        Assert.assertSame(hashMap0.withKeysValues(<(literal.(type))("1")>, "one", <(literal.(type))("2")>, "two"), hashMap0);
        <name>ObjectHashMap\<String> hashMap1 = new <name>ObjectHashMap\<String>().withKeysValues(<(literal.(type))("1")>, "one", <(literal.(type))("2")>, "two", <(literal.(type))("3")>, "three");
        <name>ObjectHashMap\<String> hashMap2 = new <name>ObjectHashMap\<String>().withKeysValues(<(literal.(type))("1")>, "one", <(literal.(type))("2")>, "two", <(literal.(type))("3")>, "three", <(literal.(type))("4")>, "four");
        Assert.assertEquals(<name>ObjectHashMap.newWithKeysValues(<(literal.(type))("1")>, "one", <(literal.(type))("2")>, "two"), hashMap0);
        Assert.assertEquals(<name>ObjectHashMap.newWithKeysValues(<(literal.(type))("1")>, "one", <(literal.(type))("2")>, "two", <(literal.(type))("3")>, "three"), hashMap1);
        Assert.assertEquals(<name>ObjectHashMap.newWithKeysValues(<(literal.(type))("1")>, "one", <(literal.(type))("2")>, "two", <(literal.(type))("3")>, "three").withKeyValue(<(literal.(type))("4")>, "four"), hashMap2);
    }

    @Test
    public void put_every_slot()
    {
        Mutable<name>ObjectMap\<String> hashMap = this.getEmptyMap();
        for (<type> i = <(literal.(type))("2")>; i \< <(literal.(type))("100")>; i++)
        {
            Assert.assertNull(hashMap.get(i));
            Assert.assertNull(hashMap.put(i, String.valueOf(i)));
            Assert.assertEquals(String.valueOf(i), hashMap.remove(i));
        }
    }

    @Test
    public void getIfAbsentPut_every_slot()
    {
        Mutable<name>ObjectMap\<String> hashMap = this.getEmptyMap();
        for (<type> i = <(literal.(type))("2")>; i \< <(literal.(type))("100")>; i++)
        {
            Assert.assertNull(hashMap.get(i));
            Assert.assertEquals("value", hashMap.getIfAbsentPut(i, Functions0.value("value")));
        }
    }

    @Test
    public void getIfAbsentPutWith_every_slot()
    {
        Function\<String, String> toUpperCase = new Function\<String, String>()
        {
            public String valueOf(String string)
            {
                return string.toUpperCase();
            }
        };

        Mutable<name>ObjectMap\<String> hashMap = this.getEmptyMap();
        for (<type> each = <(literal.(type))("2")>; each \< <(literal.(type))("100")>; each++)
        {
            Assert.assertNull(hashMap.get(each));
            Assert.assertEquals("VALUE", hashMap.getIfAbsentPutWith(each, toUpperCase, "value"));
        }
    }

    @Test
    public void getIfAbsentPutWithKey_every_slot()
    {
        <name>ToObjectFunction\<<wrapperName>\> toWrapper = new <name>ToObjectFunction\<<wrapperName>\>()
        {
            public <wrapperName> valueOf(<type> each)
            {
                return <wrapperName>.valueOf(each);
            }
        };

        Mutable<name>ObjectMap\<<wrapperName>\> hashMap = this.getEmptyMap();

        for (<type> each = <(literal.(type))("2")>; each \< <(literal.(type))("100")>; each++)
        {
            Assert.assertNull(hashMap.get(each));
            Assert.assertEquals(<wrapperName>.valueOf(each), hashMap.getIfAbsentPutWithKey(each, toWrapper));
        }
    }

    @Test
    public void updateValue_every_slot()
    {
        Function\<Integer, Integer> incrementFunction = new Function\<Integer, Integer>()
        {
            public Integer valueOf(Integer integer)
            {
                return integer + 1;
            }
        };

        Mutable<name>ObjectMap\<Integer> hashMap = this.getEmptyMap();

        for (<type> each = <(literal.(type))("2")>; each \< <(literal.(type))("100")>; each++)
        {
            Assert.assertNull(hashMap.get(each));
            Assert.assertEquals(1L, hashMap.updateValue(each, Functions0.value(0), incrementFunction).intValue());
        }
    }

    @Test
    public void updateValueWith_every_slot()
    {
        Function2\<Integer, Integer, Integer> incrementFunction = AddFunction.INTEGER;

        Mutable<name>ObjectMap\<Integer> hashMap = this.getEmptyMap();

        for (<type> each = <(literal.(type))("2")>; each \< <(literal.(type))("100")>; each++)
        {
            Assert.assertNull(hashMap.get(each));
            Assert.assertEquals(1L, hashMap.updateValueWith(each, Functions0.value(0), incrementFunction, 1).longValue());
        }
    }
}

>>
