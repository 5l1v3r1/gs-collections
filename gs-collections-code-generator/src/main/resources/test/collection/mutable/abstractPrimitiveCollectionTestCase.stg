import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/collection/mutable/primitive"

fileName(primitive) ::= "Abstract<primitive.name>CollectionTestCase"

class(primitive) ::= <<
<body(primitive.type, primitive.wrapperName, primitive.name)>
>>

body(type, wrapperName, name) ::= <<
<copyright()>

package com.gs.collections.impl.collection.mutable.primitive;

import java.util.Arrays;
import java.util.NoSuchElementException;

import com.gs.collections.api.Lazy<name>Iterable;
import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.predicate.primitive.<name>Predicate;
import com.gs.collections.api.block.procedure.primitive.<name>Procedure;
import com.gs.collections.api.collection.MutableCollection;
import com.gs.collections.api.collection.primitive.Mutable<name>Collection;
import com.gs.collections.api.iterator.<name>Iterator;
import com.gs.collections.impl.bag.mutable.primitive.<name>HashBag;
import com.gs.collections.impl.block.factory.primitive.<name>Predicates;
import com.gs.collections.impl.list.mutable.primitive.<name>ArrayList;
import com.gs.collections.impl.set.mutable.primitive.<name>HashSet;
import com.gs.collections.impl.test.Verify;
import org.junit.Assert;
import org.junit.Test;

/**
 * Abstract JUnit test for {@link Mutable<name>Collection}s
 * This file was automatically generated from template file abstractPrimitiveCollectionTestCase.stg.
 */
public abstract class Abstract<name>CollectionTestCase
{
    protected abstract Mutable<name>Collection classUnderTest();

    protected abstract Mutable<name>Collection getEmptyCollection();

    protected abstract Mutable<name>Collection getEmptyMutableCollection();

    protected abstract MutableCollection\<<wrapperName>\> getEmptyObjectCollection();

    protected abstract Mutable<name>Collection newWith(<type>... elements);

    protected abstract Mutable<name>Collection newMutableCollectionWith(<type>... elements);

    protected abstract MutableCollection\<<wrapperName>\> newObjectCollectionWith(<wrapperName>... elements);
    
    @Test
    public void newCollectionWith()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Verify.assertSize(3, collection);
        Verify.assertSize(4, this.newWith(<["0", "1", "31", "32"]:(literal.(type))(); separator=", ">));
        Assert.assertTrue(collection.containsAll(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
    }
     
    @Test
    public void newCollection()
    {
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.classUnderTest());
        Assert.assertEquals(this.newMutableCollectionWith(<["0", "1", "31", "32"]:(literal.(type))(); separator=", ">), this.newWith(<["0", "1", "31", "32"]:(literal.(type))(); separator=", ">));
    }
    
    @Test
    public void isEmpty()
    {
        Verify.assertEmpty(this.getEmptyCollection());
        Verify.assertNotEmpty(this.classUnderTest());
        Verify.assertNotEmpty(this.newWith(<["0", "1", "31", "32"]:(literal.(type))(); separator=", ">));
        Verify.assertNotEmpty(this.newWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">));
        Verify.assertNotEmpty(this.newWith(<["0", "31"]:(literal.(type))(); separator=", ">));
        Verify.assertNotEmpty(this.newWith(<["31", "32"]:(literal.(type))(); separator=", ">));
        Verify.assertNotEmpty(this.newWith(<["32", "33"]:(literal.(type))(); separator=", ">));
    }

    @Test
    public void notEmpty()
    {
        Assert.assertFalse(this.getEmptyCollection().notEmpty());
        Assert.assertTrue(this.classUnderTest().notEmpty());
        Assert.assertTrue(this.newWith(<["0", "1", "31", "32"]:(literal.(type))(); separator=", ">).notEmpty());
        Assert.assertTrue(this.newWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">).notEmpty());
        Assert.assertTrue(this.newWith(<["0", "31"]:(literal.(type))(); separator=", ">).notEmpty());
        Assert.assertTrue(this.newWith(<["31", "32"]:(literal.(type))(); separator=", ">).notEmpty());
        Assert.assertTrue(this.newWith(<["32", "33"]:(literal.(type))(); separator=", ">).notEmpty());
   }

    @Test
    public void clear()
    {
        Mutable<name>Collection emptyCollection = this.getEmptyCollection();
        emptyCollection.clear();
        Verify.assertSize(0, emptyCollection);

        Mutable<name>Collection collection = this.classUnderTest();
        collection.clear();
        Verify.assertEmpty(collection);
        Verify.assertSize(0, collection);
        Assert.assertFalse(collection.contains(<(literal.(type))("0")>));
        Assert.assertFalse(collection.contains(<(literal.(type))("1")>));
        Assert.assertFalse(collection.contains(<(literal.(type))("2")>));
        Assert.assertFalse(collection.contains(<(literal.(type))("3")>));

        Mutable<name>Collection collection1 = this.newWith(<["0", "1", "31", "32"]:(literal.(type))(); separator=", ">);
        collection1.clear();
        Verify.assertEmpty(collection1);
        Verify.assertSize(0, collection1);
        Assert.assertFalse(collection1.contains(<(literal.(type))("0")>));
        Assert.assertFalse(collection1.contains(<(literal.(type))("1")>));
        Assert.assertFalse(collection1.contains(<(literal.(type))("31")>));
        Assert.assertFalse(collection1.contains(<(literal.(type))("32")>));

        Mutable<name>Collection collection2 = this.newWith(<["0", "1", "1", "2", "2", "2"]:(literal.(type))(); separator=", ">);
        collection2.clear();
        Verify.assertSize(0, collection2);
        Assert.assertEquals(this.getEmptyMutableCollection(), collection2);
    }

    @Test
    public void contains()
    {
        Mutable<name>Collection collection = this.newWith(<["14", "2", "30", "31", "32", "35", "0", "1"]:(literal.(type))(); separator=", ">);
        Assert.assertFalse(collection.contains(<(literal.(type))("29")>));
        Assert.assertFalse(collection.contains(<(literal.(type))("49")>));

        <type>[] numbers = {<["14", "2", "30", "31", "32", "35", "0", "1"]:(literal.(type))(); separator=", ">};
        for (<type> number : numbers)
        {
            Assert.assertTrue(collection.contains(number));
            Assert.assertTrue(collection.remove(number));
            Assert.assertFalse(collection.contains(number));
        }

        Assert.assertFalse(collection.contains(<(literal.(type))("-1")>));
        Assert.assertFalse(collection.contains(<(literal.(type))("29")>));
        Assert.assertFalse(collection.contains(<(literal.(type))("49")>));

        Mutable<name>Collection collection1 = this.newWith(<["0", "1", "1", "2", "2", "2"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(collection1.contains(<(literal.(type))("0")>));
        Assert.assertTrue(collection1.contains(<(literal.(type))("1")>));
        Assert.assertTrue(collection1.contains(<(literal.(type))("2")>));
        Assert.assertFalse(collection1.contains(<(literal.(type))("3")>));
    }

    @Test
    public void containsAllArray()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Assert.assertTrue(collection.containsAll(<(literal.(type))("1")>));
        Assert.assertTrue(collection.containsAll(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(collection.containsAll(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(collection.containsAll(<["1", "2", "4"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(collection.containsAll(<["4", "5", "6"]:(literal.(type))(); separator=", ">));

        Mutable<name>Collection collection1 = this.newWith(<["14", "2", "30", "32", "35", "0", "1"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(collection1.containsAll(<(literal.(type))("14")>));
        Assert.assertTrue(collection1.containsAll(<(literal.(type))("35")>));
        Assert.assertFalse(collection1.containsAll(<(literal.(type))("-1")>));
        Assert.assertTrue(collection1.containsAll(<["14", "1", "30"]:(literal.(type))(); separator=", ">));
        Assert.assertTrue(collection1.containsAll(<["14", "1", "32"]:(literal.(type))(); separator=", ">));
        Assert.assertTrue(collection1.containsAll(<["14", "1", "35"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(collection1.containsAll(<["0", "2", "35", "-1"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(collection1.containsAll(<["31", "-1"]:(literal.(type))(); separator=", ">));

        Mutable<name>Collection collection2 = this.newWith(<["0", "1", "1", "2", "2", "2"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(collection2.containsAll(<(literal.(type))("0")>));
        Assert.assertTrue(collection2.containsAll(<["0", "0", "0"]:(literal.(type))(); separator=", ">));
        Assert.assertTrue(collection2.containsAll(<["0", "1", "1"]:(literal.(type))(); separator=", ">));
        Assert.assertTrue(collection2.containsAll(<["0", "1", "2"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(collection2.containsAll(<["0", "1", "2", "3", "4"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(collection2.containsAll(<["3", "4"]:(literal.(type))(); separator=", ">));
    }

    @Test
    public void containsAllIterable()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Assert.assertTrue(this.getEmptyCollection().containsAll(new <name>ArrayList()));
        Assert.assertFalse(this.getEmptyCollection().containsAll(<name>ArrayList.newListWith(<(literal.(type))("1")>)));
        Assert.assertTrue(collection.containsAll(<name>ArrayList.newListWith(<(literal.(type))("1")>)));
        Assert.assertTrue(collection.containsAll(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(collection.containsAll(<name>ArrayList.newListWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(collection.containsAll(<name>ArrayList.newListWith(<["1", "2", "4"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(collection.containsAll(<name>ArrayList.newListWith(<["4", "5", "6"]:(literal.(type))(); separator=", ">)));

        Mutable<name>Collection collection1 = this.newWith(<["14", "2", "30", "32", "35", "0", "1"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(collection1.containsAll(<name>HashSet.newSetWith(<(literal.(type))("14")>)));
        Assert.assertTrue(collection1.containsAll(<name>HashSet.newSetWith(<(literal.(type))("35")>)));
        Assert.assertFalse(collection1.containsAll(<name>HashSet.newSetWith(<(literal.(type))("-1")>)));
        Assert.assertTrue(collection1.containsAll(<name>HashSet.newSetWith(<["14", "1", "30"]:(literal.(type))(); separator=", ">)));
        Assert.assertTrue(collection1.containsAll(<name>HashSet.newSetWith(<["14", "1", "32"]:(literal.(type))(); separator=", ">)));
        Assert.assertTrue(collection1.containsAll(<name>HashSet.newSetWith(<["14", "1", "35"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(collection1.containsAll(<name>HashSet.newSetWith(<["0", "2", "35", "-1"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(collection1.containsAll(<name>HashSet.newSetWith(<["31", "-1"]:(literal.(type))(); separator=", ">)));

        Mutable<name>Collection collection2 = this.newWith(<["0", "1", "1", "2", "2", "2"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(collection2.containsAll(<name>ArrayList.newListWith(<(literal.(type))("0")>)));
        Assert.assertTrue(collection2.containsAll(<name>ArrayList.newListWith(<["0", "0", "0"]:(literal.(type))(); separator=", ">)));
        Assert.assertTrue(collection2.containsAll(<name>ArrayList.newListWith(<["0", "1", "1"]:(literal.(type))(); separator=", ">)));
        Assert.assertTrue(collection2.containsAll(<name>ArrayList.newListWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(collection2.containsAll(<name>ArrayList.newListWith(<["0", "1", "2", "3", "4"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(collection2.containsAll(<name>ArrayList.newListWith(<["3", "4"]:(literal.(type))(); separator=", ">)));
    }

    @Test
    public void add()
    {
        Mutable<name>Collection emptyCollection = this.getEmptyCollection();
        Assert.assertTrue(emptyCollection.add(<(literal.(type))("1")>));
        Assert.assertEquals(this.newMutableCollectionWith(<(literal.(type))("1")>), emptyCollection);
        Mutable<name>Collection collection = this.classUnderTest();
        Assert.assertTrue(collection.add(<(literal.(type))("4")>));
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">), collection);
    }

    @Test
    public void addAllArray()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Assert.assertFalse(collection.addAll());
        Assert.assertTrue(collection.addAll(<["4", "5", "6"]:(literal.(type))(); separator=", ">));
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3", "4", "5", "6"]:(literal.(type))(); separator=", ">), collection);
    }

    @Test
    public void addAllIterable()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Assert.assertFalse(collection.addAll(this.getEmptyMutableCollection()));
        Assert.assertTrue(collection.addAll(this.newMutableCollectionWith(<["4", "5", "6"]:(literal.(type))(); separator=", ">)));
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3", "4", "5", "6"]:(literal.(type))(); separator=", ">), collection);
    }

    @Test
    public void remove()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Assert.assertFalse(collection.remove(<(literal.(type))("-1")>));
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), collection);
        Assert.assertTrue(collection.remove(<(literal.(type))("3")>));
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2"]:(literal.(type))(); separator=", ">), collection);
    }

    @Test
    public void removeAll()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Assert.assertFalse(collection.removeAll());
        Assert.assertFalse(collection.removeAll(<(literal.(type))("-1")>));
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), collection);
        Assert.assertTrue(collection.removeAll(<["1", "5"]:(literal.(type))(); separator=", ">));
        Assert.assertEquals(this.newMutableCollectionWith(<["2", "3"]:(literal.(type))(); separator=", ">), collection);
        Assert.assertTrue(collection.removeAll(<["3", "2"]:(literal.(type))(); separator=", ">));
        Assert.assertEquals(this.getEmptyMutableCollection(), collection);
    }

    @Test
    public void removeAllIterable()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Assert.assertFalse(collection.removeAll(this.getEmptyMutableCollection()));
        Assert.assertFalse(collection.removeAll(this.newMutableCollectionWith(<(literal.(type))("-1")>)));
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), collection);
        Assert.assertTrue(collection.removeAll(this.newMutableCollectionWith(<["1", "5"]:(literal.(type))(); separator=", ">)));
        Assert.assertEquals(this.newMutableCollectionWith(<["2", "3"]:(literal.(type))(); separator=", ">), collection);
        Mutable<name>Collection collection1 = this.classUnderTest();
        Assert.assertTrue(collection1.removeAll(this.newMutableCollectionWith(<["3", "2"]:(literal.(type))(); separator=", ">)));
        Assert.assertEquals(this.newMutableCollectionWith(<["1"]:(literal.(type))(); separator=", ">), collection1);
    }

    @Test
    public void with()
    {
        Mutable<name>Collection emptyCollection = this.getEmptyCollection();
        Mutable<name>Collection collection = emptyCollection.with(<["1"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection collection0 = this.getEmptyCollection().with(<(literal.(type))("1")>).with(<(literal.(type))("2")>);
        Mutable<name>Collection collection1 = this.getEmptyCollection().with(<(literal.(type))("1")>).with(<(literal.(type))("2")>).with(<(literal.(type))("3")>);
        Mutable<name>Collection collection2 = this.getEmptyCollection().with(<(literal.(type))("1")>).with(<(literal.(type))("2")>).with(<(literal.(type))("3")>).with(<(literal.(type))("4")>);
        Mutable<name>Collection collection3 = this.getEmptyCollection().with(<(literal.(type))("1")>).with(<(literal.(type))("2")>).with(<(literal.(type))("3")>).with(<(literal.(type))("4")>).with(<(literal.(type))("5")>);
        Assert.assertSame(emptyCollection, collection);
        Assert.assertEquals(this.newMutableCollectionWith(<(literal.(type))("1")>), collection);
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2"]:(literal.(type))(); separator=", ">), collection0);
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), collection1);
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">), collection2);
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">), collection3);
    }
    
    @Test
    public void withAll()
    {
        Mutable<name>Collection emptyCollection = this.getEmptyCollection();
        Mutable<name>Collection collection = emptyCollection.withAll(this.newMutableCollectionWith(<(literal.(type))("1")>));
        Mutable<name>Collection collection0 = this.getEmptyCollection().withAll(this.newMutableCollectionWith(<["1", "2"]:(literal.(type))(); separator=", ">));
        Mutable<name>Collection collection1 = this.getEmptyCollection().withAll(this.newMutableCollectionWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
        Mutable<name>Collection collection2 = this.getEmptyCollection().withAll(this.newMutableCollectionWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">));
        Mutable<name>Collection collection3 = this.getEmptyCollection().withAll(this.newMutableCollectionWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">));
        Assert.assertSame(emptyCollection, collection);
        Assert.assertEquals(this.newMutableCollectionWith(<(literal.(type))("1")>), collection);
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2"]:(literal.(type))(); separator=", ">), collection0);
        Assert.assertEquals(this.classUnderTest(), collection1);
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">), collection2);
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">), collection3);
    }

    @Test
    public void without()
    {
        Mutable<name>Collection collection = this.newWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">);
        Assert.assertSame(collection, collection.without(<(literal.(type))("9")>));
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">), collection.without(<(literal.(type))("9")>));
        Assert.assertEquals(this.newMutableCollectionWith(<["2", "3", "4", "5"]:(literal.(type))(); separator=", ">), collection.without(<(literal.(type))("1")>));
        Assert.assertEquals(this.newMutableCollectionWith(<["3", "4", "5"]:(literal.(type))(); separator=", ">), collection.without(<(literal.(type))("2")>));
        Assert.assertEquals(this.newMutableCollectionWith(<["4", "5"]:(literal.(type))(); separator=", ">), collection.without(<(literal.(type))("3")>));
        Assert.assertEquals(this.newMutableCollectionWith(<(literal.(type))("5")>), collection.without(<(literal.(type))("4")>));
        Assert.assertEquals(this.getEmptyMutableCollection(), collection.without(<(literal.(type))("5")>));
        Assert.assertEquals(this.getEmptyMutableCollection(), collection.without(<(literal.(type))("6")>));
    }

    @Test
    public void withoutAll()
    {
        Mutable<name>Collection collection = this.newWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">);
        Assert.assertSame(collection, collection.withoutAll(this.newMutableCollectionWith(<["8", "9",]:(literal.(type))(); separator=", ">)));
        Assert.assertEquals(this.newMutableCollectionWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">), collection.withoutAll(this.newMutableCollectionWith(<["8", "9",]:(literal.(type))(); separator=", ">)));
        Assert.assertEquals(this.newMutableCollectionWith(<["2", "3", "4"]:(literal.(type))(); separator=", ">), collection.withoutAll(this.newMutableCollectionWith(<["1", "5",]:(literal.(type))(); separator=", ">)));
        Assert.assertEquals(this.newMutableCollectionWith(<["3", "4",]:(literal.(type))(); separator=", ">), collection.withoutAll(this.newMutableCollectionWith(<["2", "20",]:(literal.(type))(); separator=", ">)));
        Assert.assertEquals(this.getEmptyMutableCollection(), collection.withoutAll(this.newMutableCollectionWith(<["3", "4",]:(literal.(type))(); separator=", ">)));
        Assert.assertEquals(this.getEmptyMutableCollection(), collection.withoutAll(this.newMutableCollectionWith(<(literal.(type))("9")>)));
    }

    @Test
    public abstract void <type>Iterator();

    @Test(expected = NoSuchElementException.class)
    public void <type>Iterator_throws()
    {
        <name>Iterator iterator = this.classUnderTest().<type>Iterator();
        while (iterator.hasNext())
        {
            iterator.next();
        }

        iterator.next();
    }

    @Test(expected = NoSuchElementException.class)
    public void <type>Iterator_throws_non_empty_list()
    {
        Mutable<name>Collection collection = this.getEmptyCollection();
        collection.add(<(literal.(type))("1")>);
        collection.add(<(literal.(type))("2")>);
        collection.add(<(literal.(type))("3")>);
        <name>Iterator iterator = collection.<type>Iterator();
        while (iterator.hasNext())
        {
            iterator.next();
        }
        iterator.next();
    }

    @Test
    public void forEach()
    {
        final <wideType.(type)>[] sum = new <wideType.(type)>[1];
        this.classUnderTest().forEach(new <name>Procedure()
        {
            public void value(<type> each)
            {
                sum[0] += each;
            }
        });

        Assert.assertEquals(<(wideLiteral.(type))("6")>, sum[0]<(wideDelta.(type))>);
    }

    @Test
    public void size()
    {
        Verify.assertSize(0, this.getEmptyCollection());
        Verify.assertSize(3, this.classUnderTest());
    }

    @Test
    public void count()
    {
        Assert.assertEquals(2L, this.newWith(<["1", "0", "2"]:(literal.(type))(); separator=", ">).count(<name>Predicates.greaterThan(<zero.(type)>)));
    }

    @Test
    public void anySatisfy()
    {
        Assert.assertTrue(this.newWith(<["1", "-1", "2"]:(literal.(type))(); separator=", ">).anySatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertFalse(this.newWith(<["1", "-1", "2"]:(literal.(type))(); separator=", ">).anySatisfy(<name>Predicates.equal(<(literal.(type))("0")>)));
        Assert.assertTrue(this.newWith(<["-1", "-1", "-2", "31", "32"]:(literal.(type))(); separator=", ">).anySatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertTrue(this.newWith(<["2", "-1", "-2", "31", "32"]:(literal.(type))(); separator=", ">).anySatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertFalse(this.newWith(<["1", "-1", "31", "32"]:(literal.(type))(); separator=", ">).anySatisfy(<name>Predicates.equal(<(literal.(type))("0")>)));
        Assert.assertTrue(this.newWith(<["32"]:(literal.(type))(); separator=", ">).anySatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Mutable<name>Collection collection = this.newWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(collection.anySatisfy(new <name>Predicate()
        {
            public boolean accept(<type> value)
            {
                return <(lessThan.(type))("value", {<(literal.(type))("3")>})>;
            }
        }));
        Assert.assertFalse(collection.anySatisfy(<name>Predicates.greaterThan(<(literal.(type))("3")>)));
    }

    @Test
    public void allSatisfy()
    {
        Assert.assertFalse(this.newWith(<["1", "0", "2"]:(literal.(type))(); separator=", ">).allSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertTrue(this.newWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">).allSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertFalse(this.newWith(<["1", "0", "31", "32"]:(literal.(type))(); separator=", ">).allSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertFalse(this.newWith(<["1", "0", "31", "32"]:(literal.(type))(); separator=", ">).allSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertTrue(this.newWith(<["1", "2", "31", "32"]:(literal.(type))(); separator=", ">).allSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertFalse(this.newWith(<["32"]:(literal.(type))(); separator=", ">).allSatisfy(<name>Predicates.equal(<(literal.(type))("33")>)));
        Assert.assertFalse(this.newWith(<["-32"]:(literal.(type))(); separator=", ">).allSatisfy(<name>Predicates.equal(<(literal.(type))("33")>)));
        Mutable<name>Collection collection = this.newWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">);
        Assert.assertFalse(collection.allSatisfy(new <name>Predicate()
        {
            public boolean accept(<type> value)
            {
                return <(lessThan.(type))({<(literal.(type))("3")>}, "value")>;
            }
        }));
        Assert.assertTrue(collection.allSatisfy(<name>Predicates.lessThan(<(literal.(type))("3")>)));
    }

    @Test
    public void noneSatisfy()
    {
        Assert.assertFalse(this.newWith(<["1", "0", "2"]:(literal.(type))(); separator=", ">).noneSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertTrue(this.newWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">).noneSatisfy(<name>Predicates.greaterThan(<(literal.(type))("3")>)));
        Assert.assertFalse(this.newWith(<["1", "0", "31", "32"]:(literal.(type))(); separator=", ">).noneSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertFalse(this.newWith(<["1", "0", "31", "32"]:(literal.(type))(); separator=", ">).noneSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertTrue(this.newWith(<["1", "2", "31", "32"]:(literal.(type))(); separator=", ">).noneSatisfy(<name>Predicates.lessThan(<(literal.(type))("0")>)));
        Assert.assertFalse(this.newWith(<["32"]:(literal.(type))(); separator=", ">).noneSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Mutable<name>Collection collection = this.newWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">);
        Assert.assertFalse(collection.noneSatisfy(new <name>Predicate()
        {
            public boolean accept(<type> value)
            {
                return <(lessThan.(type))({<(literal.(type))("1")>}, "value")>;
            }
        }));
        Assert.assertTrue(collection.noneSatisfy(<name>Predicates.greaterThan(<(literal.(type))("3")>)));
    }
    
    @Test
    public void collect()
    {
        Assert.assertEquals(this.newObjectCollectionWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">), this.classUnderTest().collect(new <name>ToObjectFunction\<<wrapperName>\>()
        {
            public <wrapperName> valueOf(<type> parameter)
            {
                return <(castIntToNarrowType.(type))("parameter - 1")>;
            }
        }));
        Mutable<name>Collection collection = this.newWith(<["1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">);
        Assert.assertEquals(this.newObjectCollectionWith(<["0", "1", "1", "2", "2", "2"]:(literal.(type))(); separator=", ">), collection.collect(new <name>ToObjectFunction\<<wrapperName>\>()
        {
            public <wrapperName> valueOf(<type> parameter)
            {
                return <(castIntToNarrowType.(type))("parameter - 1")>;
            }
        }));
    }

    @Test
    public void select()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Verify.assertSize(3, collection.select(<name>Predicates.lessThan(<(literal.(type))("4")>)));
        Verify.assertSize(2, collection.select(<name>Predicates.lessThan(<(literal.(type))("3")>)));
        Mutable<name>Collection collection1 = this.newWith(<["0", "1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">);
        Assert.assertEquals(this.newMutableCollectionWith(<["0", "1"]:(literal.(type))(); separator=", ">), collection1.select(<name>Predicates.lessThan(<(literal.(type))("2")>)));
        Assert.assertEquals(this.newMutableCollectionWith(<["2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">), collection1.select(<name>Predicates.greaterThan(<(literal.(type))("1")>)));
    }

    @Test
    public void reject()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Verify.assertSize(0, collection.reject(<name>Predicates.lessThan(<(literal.(type))("4")>)));
        Verify.assertSize(1, collection.reject(<name>Predicates.lessThan(<(literal.(type))("3")>)));
        Mutable<name>Collection collection1 = this.newWith(<["0", "1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">);
        Assert.assertEquals(this.newMutableCollectionWith(<["2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">), collection1.reject(<name>Predicates.lessThan(<(literal.(type))("2")>)));
        Assert.assertEquals(this.newMutableCollectionWith(<["0", "1"]:(literal.(type))(); separator=", ">), collection1.reject(<name>Predicates.greaterThan(<(literal.(type))("1")>)));
    }

    @Test
    public void detectIfNone()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Assert.assertEquals(<(wideLiteral.(type))("1")>, collection.detectIfNone(<name>Predicates.lessThan(<(literal.(type))("4")>), <(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, collection.detectIfNone(<name>Predicates.greaterThan(<(literal.(type))("3")>), <(literal.(type))("0")>)<(wideDelta.(type))>);
        Mutable<name>Collection collection1 = this.newWith(<["0", "1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, collection1.detectIfNone(<name>Predicates.lessThan(<(literal.(type))("1")>), <(literal.(type))("4")>)<(delta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("3")>, collection1.detectIfNone(<name>Predicates.greaterThan(<(literal.(type))("2")>), <(literal.(type))("4")>)<(delta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("4")>, collection1.detectIfNone(<name>Predicates.greaterThan(<(literal.(type))("4")>), <(literal.(type))("4")>)<(delta.(type))>);
    }

    @Test
    public void max()
    {
        <(maxTests.(type))(type, name)>
    }

    @Test(expected = NoSuchElementException.class)
    public void max_throws_emptyCollection()
    {
        this.getEmptyCollection().max();
    }

    @Test
    public void min()
    {
        <(minTests.(type))(type, name)>
    }

    @Test(expected = NoSuchElementException.class)
    public void min_throws_emptyCollection()
    {
        this.getEmptyCollection().min();
    }

    @Test
    public void minIfEmpty()
    {
        Assert.assertEquals(<(wideLiteral.(type))("5")>, this.getEmptyCollection().minIfEmpty(<(literal.(type))("5")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, this.getEmptyCollection().minIfEmpty(<(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, this.newWith(<["1", "0", "9", "7"]:(literal.(type))(); separator=", ">).minIfEmpty(<(literal.(type))("5")>)<(wideDelta.(type))>);
    }

    @Test
    public void maxIfEmpty()
    {
        Assert.assertEquals(<(wideLiteral.(type))("5")>, this.getEmptyCollection().maxIfEmpty(<(literal.(type))("5")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, this.getEmptyCollection().maxIfEmpty(<(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("9")>, this.newWith(<["1", "0", "9", "7"]:(literal.(type))(); separator=", ">).maxIfEmpty(<(literal.(type))("5")>)<(wideDelta.(type))>);
    }

    @Test
    public void sum()
    {
        Assert.assertEquals(<(wideLiteral.(type))("10")>, this.newWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">).sum()<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("93")>, this.newWith(<["30", "31", "32"]:(literal.(type))(); separator=", ">).sum()<wideDelta.(type)>);
    }

    @Test
    public void average()
    {
        Assert.assertEquals(2.5, this.newWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">).average(), 0.0);
        Assert.assertEquals(31.0, this.newWith(<["30", "30", "31", "31", "32", "32"]:(literal.(type))(); separator=", ">).average(), 0.0);
    }

    @Test(expected = ArithmeticException.class)
    public void averageThrowsOnEmpty()
    {
        this.getEmptyCollection().average();
    }

    @Test
    public void median()
    {
        Assert.assertEquals(2.5, this.newWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">).median(), 0.0);
        Assert.assertEquals(3.0, this.newWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">).median(), 0.0);
        Assert.assertEquals(31.0, this.newWith(<["30", "30", "31", "31", "32"]:(literal.(type))(); separator=", ">).median(), 0.0);
        Assert.assertEquals(30.5, this.newWith(<["1", "30", "30", "31", "31", "32"]:(literal.(type))(); separator=", ">).median(), 0.0);
    }

    @Test(expected = ArithmeticException.class)
    public void medianThrowsOnEmpty()
    {
        this.getEmptyCollection().median();
    }

    @Test
    public void toArray()
    {
        Assert.assertEquals(3L, this.classUnderTest().toArray().length);
        Mutable<name>Collection collection = this.newWith(<["1", "2"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(Arrays.equals(new <type>[]{<["1", "2"]:(literal.(type))(); separator=", ">}, collection.toArray())
                || Arrays.equals(new <type>[]{<["2", "1"]:(literal.(type))(); separator=", ">}, collection.toArray()));
        Assert.assertTrue(Arrays.equals(new <type>[]{<["0", "1"]:(literal.(type))(); separator=", ">}, this.newWith(<["0", "1"]:(literal.(type))(); separator=", ">).toArray())
                || Arrays.equals(new <type>[]{<["1", "0"]:(literal.(type))(); separator=", ">}, this.newWith(<["0", "1"]:(literal.(type))(); separator=", ">).toArray()));
        Assert.assertTrue(Arrays.equals(new <type>[]{<["1", "31"]:(literal.(type))(); separator=", ">}, this.newWith(<["1", "31"]:(literal.(type))(); separator=", ">).toArray())
                || Arrays.equals(new <type>[]{<["31", "1"]:(literal.(type))(); separator=", ">}, this.newWith(<["1", "31"]:(literal.(type))(); separator=", ">).toArray()));
        Assert.assertTrue(Arrays.equals(new <type>[]{<["31", "35"]:(literal.(type))(); separator=", ">}, this.newWith(<["31", "35"]:(literal.(type))(); separator=", ">).toArray())
                || Arrays.equals(new <type>[]{<["35", "31"]:(literal.(type))(); separator=", ">}, this.newWith(<["31", "35"]:(literal.(type))(); separator=", ">).toArray()));
        Assert.assertArrayEquals(new <type>[]{}, this.getEmptyCollection().toArray()<(delta.(type))>);
    }

    @Test
    public void toSortedArray()
    {
        Assert.assertArrayEquals(new <type>[]{<["1", "3", "7", "9"]:(literal.(type))(); separator=", ">},
                this.newWith(<["3", "1", "9", "7"]:(literal.(type))(); separator=", ">).toSortedArray()<(delta.(type))>);
    }

    @Test
    public void testEquals()
    {
        Mutable<name>Collection collection1 = this.newWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection collection2 = this.newWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection collection3 = this.newWith(<["5", "6", "7", "8"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection collection4 = this.newWith(<["5", "6", "7"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection collection5 = this.newWith(<["0", "1", "1", "2", "2", "2"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection collection6 = this.newWith(<["1", "31", "32"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection collection7 = this.newWith(<["35", "31", "1"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection collection8 = this.newWith(<["32", "31", "1", "50"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection collection9 = this.newWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection collection10 = this.newWith(<["0", "1", "3"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection collection11 = this.newWith(<["3", "1", "2"]:(literal.(type))(); separator=", ">);

        Verify.assertEqualsAndHashCode(collection1, collection2);
        Verify.assertPostSerializedEqualsAndHashCode(collection1);
        Verify.assertPostSerializedEqualsAndHashCode(collection5);
        Verify.assertPostSerializedEqualsAndHashCode(collection6);
        Verify.assertPostSerializedEqualsAndHashCode(this.getEmptyCollection());
        Assert.assertNotEquals(collection1, collection3);
        Assert.assertNotEquals(collection1, collection4);
        Assert.assertNotEquals(collection6, collection7);
        Assert.assertNotEquals(collection6, collection8);
        Assert.assertNotEquals(collection9, collection10);
        Assert.assertNotEquals(collection9, collection11);
        Assert.assertNotEquals(this.getEmptyCollection(), this.newWith(<(literal.(type))("100")>));
    }

    @Test
    public void testHashCode()
    {
        Assert.assertEquals(this.newObjectCollectionWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">).hashCode(), this.newWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">).hashCode());
        Assert.assertEquals(this.newObjectCollectionWith(<["0", "1", "31"]:(literal.(type))(); separator=", ">).hashCode(), this.newWith(<["0", "1", "31"]:(literal.(type))(); separator=", ">).hashCode());
        Assert.assertNotEquals(this.newObjectCollectionWith(<["32"]:(literal.(type))(); separator=", ">).hashCode(), this.newWith(<["0"]:(literal.(type))(); separator=", ">).hashCode());
        Assert.assertEquals(this.newObjectCollectionWith(<["31", "32", "50"]:(literal.(type))(); separator=", ">).hashCode(), this.newWith(<["31", "32", "50"]:(literal.(type))(); separator=", ">).hashCode());
        Assert.assertEquals(this.newObjectCollectionWith(<["32", "50", "60"]:(literal.(type))(); separator=", ">).hashCode(), this.newWith(<["32", "50", "60"]:(literal.(type))(); separator=", ">).hashCode());
        Assert.assertEquals(this.getEmptyObjectCollection().hashCode(), this.getEmptyCollection().hashCode());
    }

    @Test
    public void testToString()
    {
        Assert.assertEquals("[]", this.getEmptyCollection().toString());
        Assert.assertEquals("[<(toStringLiteral.(type))("1")>]", this.newWith(<(literal.(type))("1")>).toString());
        Assert.assertEquals("[<(toStringLiteral.(type))("31")>]", this.newWith(<(literal.(type))("31")>).toString());
        Assert.assertEquals("[<(toStringLiteral.(type))("32")>]", this.newWith(<(literal.(type))("32")>).toString());

        Mutable<name>Collection collection = this.newWith(<["1", "2"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue("[<["1", "2"]:(toStringLiteral.(type))(); separator=", ">]".equals(collection.toString())
                || "[<["2", "1"]:(toStringLiteral.(type))(); separator=", ">]".equals(collection.toString()));

        Mutable<name>Collection collection1 = this.newWith(<["0", "31"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(
                collection1.toString(),
                collection1.toString().equals("[<["0", "31"]:(toStringLiteral.(type))(); separator=", ">]")
                        || collection1.toString().equals("[<["31", "0"]:(toStringLiteral.(type))(); separator=", ">]"));

        Mutable<name>Collection collection2 = this.newWith(<["31", "32"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(
                collection2.toString(),
                collection2.toString().equals("[<["31", "32"]:(toStringLiteral.(type))(); separator=", ">]")
                        || collection2.toString().equals("[<["32", "31"]:(toStringLiteral.(type))(); separator=", ">]"));

        Mutable<name>Collection collection3 = this.newWith(<["32", "33"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(
                collection3.toString(),
                collection3.toString().equals("[<["32", "33"]:(toStringLiteral.(type))(); separator=", ">]")
                        || collection3.toString().equals("[<["33", "32"]:(toStringLiteral.(type))(); separator=", ">]"));
 
        Mutable<name>Collection collection4 = this.newWith(<["0", "1"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(
                collection4.toString(),
                collection4.toString().equals("[<["0", "1"]:(toStringLiteral.(type))(); separator=", ">]")
                        || collection4.toString().equals("[<["1", "0"]:(toStringLiteral.(type))(); separator=", ">]"));
    }

    @Test
    public void makeString()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Assert.assertEquals("<(toStringLiteral.(type))("1")>", this.newWith(<(literal.(type))("1")>).makeString("/"));
        Assert.assertEquals("<(toStringLiteral.(type))("31")>", this.newWith(<(literal.(type))("31")>).makeString());
        Assert.assertEquals("<(toStringLiteral.(type))("32")>", this.newWith(<(literal.(type))("32")>).makeString());
        Assert.assertEquals(collection.toString(), collection.makeString("[", ", ", "]"));
        Assert.assertEquals("", this.getEmptyCollection().makeString());

        Mutable<name>Collection collection1 = this.newWith(<["0", "31"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(
                collection1.makeString(),
                collection1.makeString().equals("<["0", "31"]:(toStringLiteral.(type))(); separator=", ">")
                        || collection1.makeString().equals("<["31", "0"]:(toStringLiteral.(type))(); separator=", ">"));

        Mutable<name>Collection collection2 = this.newWith(<["31", "32"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(
                collection2.makeString("[", "/", "]"),
                collection2.makeString("[", "/", "]").equals("[<["31", "32"]:(toStringLiteral.(type))(); separator="/">]")
                        || collection2.makeString("[", "/", "]").equals("[<["32", "31"]:(toStringLiteral.(type))(); separator="/">]"));

        Mutable<name>Collection collection3 = this.newWith(<["32", "33"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(
                collection3.makeString("/"),
                collection3.makeString("/").equals("<["32", "33"]:(toStringLiteral.(type))(); separator="/">")
                        || collection3.makeString("/").equals("<["33", "32"]:(toStringLiteral.(type))(); separator="/">"));

        Mutable<name>Collection collection4 = this.newWith(<["1", "2"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue("<["1", "2"]:(toStringLiteral.(type))(); separator=", ">".equals(collection4.makeString())
                || "<["2", "1"]:(toStringLiteral.(type))(); separator=", ">".equals(collection4.makeString()));
        Assert.assertTrue("<["1", "2"]:(toStringLiteral.(type))(); separator="/">".equals(collection4.makeString("/"))
                || "<["2", "1"]:(toStringLiteral.(type))(); separator="/">".equals(collection4.makeString("/")));
        Assert.assertTrue("[<["1", "2"]:(toStringLiteral.(type))(); separator="/">]".equals(collection4.makeString("[", "/", "]"))
                || "[<["2", "1"]:(toStringLiteral.(type))(); separator="/">]".equals(collection4.makeString("[", "/", "]")));

        Mutable<name>Collection collection5 = this.newWith(<["0", "1"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(
                collection5.makeString(),
                collection5.makeString().equals("<["0", "1"]:(toStringLiteral.(type))(); separator=", ">")
                        || collection5.makeString().equals("<["1", "0"]:(toStringLiteral.(type))(); separator=", ">"));
        Assert.assertTrue(
                collection5.makeString("[", "/", "]"),
                collection5.makeString("[", "/", "]").equals("[<["0", "1"]:(toStringLiteral.(type))(); separator="/">]")
                        || collection5.makeString("[", "/", "]").equals("[<["1", "0"]:(toStringLiteral.(type))(); separator="/">]"));
        Assert.assertTrue(
                collection5.makeString("/"),
                collection5.makeString("/").equals("<["0", "1"]:(toStringLiteral.(type))(); separator="/">")
                        || collection5.makeString("/").equals("<["1", "0"]:(toStringLiteral.(type))(); separator="/">"));
    }

    @Test
    public void appendString()
    {
        StringBuilder appendable = new StringBuilder();
        this.getEmptyCollection().appendString(appendable);
        Assert.assertEquals("", appendable.toString());
        StringBuilder appendable1 = new StringBuilder();
        this.newWith(<(literal.(type))("1")>).appendString(appendable1);
        Assert.assertEquals("<(toStringLiteral.(type))("1")>", appendable1.toString());
        StringBuilder appendable2 = new StringBuilder();

        Mutable<name>Collection collection = this.newWith(<["1", "2"]:(literal.(type))(); separator=", ">);
        collection.appendString(appendable2);
        Assert.assertTrue("<["1", "2"]:(toStringLiteral.(type))(); separator=", ">".equals(appendable2.toString())
                || "<["2", "1"]:(toStringLiteral.(type))(); separator=", ">".equals(appendable2.toString()));
        StringBuilder appendable3 = new StringBuilder();
        collection.appendString(appendable3, "/");
        Assert.assertTrue("<["1", "2"]:(toStringLiteral.(type))(); separator="/">".equals(appendable3.toString())
                || "<["2", "1"]:(toStringLiteral.(type))(); separator="/">".equals(appendable3.toString()));
        StringBuilder appendable4 = new StringBuilder();
        collection.appendString(appendable4, "[", ", ", "]");
        Assert.assertEquals(collection.toString(), appendable4.toString());

        StringBuilder appendable5 = new StringBuilder();
        this.newWith(<(literal.(type))("31")>).appendString(appendable5);
        Assert.assertEquals("<(toStringLiteral.(type))("31")>", appendable5.toString());

        StringBuilder appendable6 = new StringBuilder();
        this.newWith(<(literal.(type))("32")>).appendString(appendable6);
        Assert.assertEquals("<(toStringLiteral.(type))("32")>", appendable6.toString());

        StringBuilder appendable7 = new StringBuilder();
        Mutable<name>Collection collection1 = this.newWith(<["0", "31"]:(literal.(type))(); separator=", ">);
        collection1.appendString(appendable7);
        Assert.assertTrue(appendable7.toString(), "<["0", "31"]:(toStringLiteral.(type))(); separator=", ">".equals(appendable7.toString())
                || "<["31", "0"]:(toStringLiteral.(type))(); separator=", ">".equals(appendable7.toString()));

        StringBuilder appendable8 = new StringBuilder();
        Mutable<name>Collection collection2 = this.newWith(<["31", "32"]:(literal.(type))(); separator=", ">);
        collection2.appendString(appendable8, "/");
        Assert.assertTrue(appendable8.toString(), "<["31", "32"]:(toStringLiteral.(type))(); separator="/">".equals(appendable8.toString())
                || "<["32", "31"]:(toStringLiteral.(type))(); separator="/">".equals(appendable8.toString()));

        StringBuilder appendable9 = new StringBuilder();
        Mutable<name>Collection collection4 = this.newWith(<["32", "33"]:(literal.(type))(); separator=", ">);
        collection4.appendString(appendable9, "[", "/", "]");
        Assert.assertTrue(appendable9.toString(), "[<["32", "33"]:(toStringLiteral.(type))(); separator="/">]".equals(appendable9.toString())
                || "[<["33", "32"]:(toStringLiteral.(type))(); separator="/">]".equals(appendable9.toString()));

        StringBuilder appendable10 = new StringBuilder();
        Mutable<name>Collection collection5 = this.newWith(<["0", "1"]:(literal.(type))(); separator=", ">);
        collection5.appendString(appendable10);
        Assert.assertTrue(appendable10.toString(), "<["0", "1"]:(toStringLiteral.(type))(); separator=", ">".equals(appendable10.toString())
                || "<["1", "0"]:(toStringLiteral.(type))(); separator=", ">".equals(appendable10.toString()));
        StringBuilder appendable11 = new StringBuilder();
        collection5.appendString(appendable11, "/");
        Assert.assertTrue(appendable11.toString(), "<["0", "1"]:(toStringLiteral.(type))(); separator="/">".equals(appendable11.toString())
                || "<["1", "0"]:(toStringLiteral.(type))(); separator="/">".equals(appendable11.toString()));
        StringBuilder appendable12 = new StringBuilder();
        collection5.appendString(appendable12, "[", "/", "]");
        Assert.assertTrue(appendable12.toString(), "[<["0", "1"]:(toStringLiteral.(type))(); separator="/">]".equals(appendable12.toString())
                || "[<["1", "0"]:(toStringLiteral.(type))(); separator="/">]".equals(appendable12.toString()));
    }

    @Test
    public void toList()
    {
        Mutable<name>Collection collection = this.newWith(<["31", "32"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(<name>ArrayList.newListWith(<["31", "32"]:(literal.(type))(); separator=", ">).equals(collection.toList())
                || <name>ArrayList.newListWith(<["32", "31"]:(literal.(type))(); separator=", ">).equals(collection.toList()));
        Assert.assertEquals(<name>ArrayList.newListWith(<(literal.(type))("0")>), this.newWith(<(literal.(type))("0")>).toList());
        Assert.assertEquals(<name>ArrayList.newListWith(<(literal.(type))("31")>), this.newWith(<(literal.(type))("31")>).toList());
        Assert.assertEquals(<name>ArrayList.newListWith(<(literal.(type))("32")>), this.newWith(<(literal.(type))("32")>).toList());
    }

    @Test
    public void toSortedList()
    {
        Assert.assertEquals(<name>ArrayList.newListWith(<["0", "1", "31"]:(literal.(type))(); separator=", ">), this.newWith(<["0", "31", "1"]:(literal.(type))(); separator=", ">).toSortedList());
        Assert.assertEquals(<name>ArrayList.newListWith(<["0", "1", "31", "32"]:(literal.(type))(); separator=", ">), this.newWith(<["0", "31", "32", "1"]:(literal.(type))(); separator=", ">).toSortedList());
    }

    @Test
    public void toSet()
    {
        Assert.assertEquals(<name>HashSet.newSetWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.classUnderTest().toSet());
        Assert.assertEquals(<name>HashSet.newSetWith(<["0", "1", "31"]:(literal.(type))(); separator=", ">), this.newWith(<["0", "1", "31"]:(literal.(type))(); separator=", ">).toSet());
        Assert.assertEquals(<name>HashSet.newSetWith(<["0", "1", "31", "32"]:(literal.(type))(); separator=", ">), this.newWith(<["0", "1", "31", "32"]:(literal.(type))(); separator=", ">).toSet());
        Assert.assertEquals(<name>HashSet.newSetWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.newWith(<["1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">).toSet());
    }

    @Test
    public void toBag()
    {
        Assert.assertEquals(<name>HashBag.newBagWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.classUnderTest().toBag());
        Assert.assertEquals(<name>HashBag.newBagWith(<["1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">), this.newWith(<["1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">).toBag());
        Assert.assertEquals(<name>HashBag.newBagWith(<["0", "1", "31", "32"]:(literal.(type))(); separator=", ">), this.newWith(<["0", "1", "31", "32"]:(literal.(type))(); separator=", ">).toBag());
    }

    @Test
    public void asLazy()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Assert.assertEquals(collection.toBag(), collection.asLazy().toBag());
        Verify.assertInstanceOf(Lazy<name>Iterable.class, collection.asLazy());

        Mutable<name>Collection collection1 = this.newWith(<["1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">);
        Assert.assertEquals(collection1.toBag(), collection1.asLazy().toBag());
        Verify.assertInstanceOf(Lazy<name>Iterable.class, collection1.asLazy());

        Mutable<name>Collection collection2 = this.newWith(<["1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">);
        Assert.assertEquals(collection2.toBag(), collection2.asLazy().toBag());
        Verify.assertInstanceOf(Lazy<name>Iterable.class, collection2.asLazy());
    }

    @Test
    public void asSynchronized()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Assert.assertEquals(collection, collection.asSynchronized());
        Verify.assertInstanceOf(this.newWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">).asSynchronized().getClass(), this.classUnderTest().asSynchronized());

        Mutable<name>Collection collection1 = this.newWith(<["1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection synchronizedCollection = this.newWith(<["1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">).asSynchronized();
        Verify.assertInstanceOf(synchronizedCollection.getClass(), collection1.asSynchronized());
        Assert.assertEquals(synchronizedCollection, collection1.asSynchronized());
    }

    @Test
    public void asUnmodifiable()
    {
        Verify.assertInstanceOf(this.newWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">).asUnmodifiable().getClass(), this.classUnderTest().asUnmodifiable());
        Assert.assertEquals(this.newWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">).asUnmodifiable(), this.classUnderTest().asUnmodifiable());

        Mutable<name>Collection collection = this.newWith(<["1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection unmodifiableCollection = this.newWith(<["1", "2", "2", "3", "3", "3"]:(literal.(type))(); separator=", ">).asUnmodifiable();
        Verify.assertInstanceOf(unmodifiableCollection.getClass(), collection.asUnmodifiable());
        Assert.assertEquals(unmodifiableCollection, collection.asUnmodifiable());
    }
}

>>

maxTests ::= [
    "byte": "intMaxTest",
    "short": "intMaxTest",
    "char": "charMaxTest",
    "int": "intMaxTest",
    "long": "intMaxTest",
    "float": "floatMaxTest",
    "double": "floatMaxTest"
]

intMaxTest(type, name) ::= <<
Assert.assertEquals(<(wideLiteral.(type))("9")>, this.newWith(<["-1", "-2", "9"]:(literal.(type))(); separator=", ">).max()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("-1")>, this.newWith(<["-1", "-2", "-9"]:(literal.(type))(); separator=", ">).max()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("32")>, this.newWith(<["1", "0", "9", "30", "31", "32"]:(literal.(type))(); separator=", ">).max()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("32")>, this.newWith(<["-1", "0", "9", "30", "31", "32"]:(literal.(type))(); separator=", ">).max()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("31")>, this.newWith(<["31", "0", "30"]:(literal.(type))(); separator=", ">).max()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("39")>, this.newWith(<["32", "39", "35"]:(literal.(type))(); separator=", ">).max()<(wideDelta.(type))>);
>>

charMaxTest(type, name) ::= <<
Assert.assertEquals(<(literal.(type))("-1")>, this.newWith(<["-1", "-2", "9"]:(literal.(type))(); separator=", ">).max()<(wideDelta.(type))>);
Assert.assertEquals(<(literal.(type))("32")>, this.newWith(<["1", "0", "9", "30", "31", "32"]:(literal.(type))(); separator=", ">).max()<(wideDelta.(type))>);
Assert.assertEquals(<(literal.(type))("-1")>, this.newWith(<["-1", "0", "9", "30", "31", "32"]:(literal.(type))(); separator=", ">).max()<(wideDelta.(type))>);
Assert.assertEquals(<(literal.(type))("31")>, this.newWith(<["31", "0", "30"]:(literal.(type))(); separator=", ">).max()<(wideDelta.(type))>);
Assert.assertEquals(<(literal.(type))("39")>, this.newWith(<["32", "39", "35"]:(literal.(type))(); separator=", ">).max()<(wideDelta.(type))>);
>>

floatMaxTest(type, name) ::= <<
<intMaxTest(type, name)>
Assert.assertEquals(32.5, this.newWith(<["-1.5", "31.8", "32.5"]:(decimalLiteral.(type))(); separator=", ">).max()<(wideDelta.(type))>);
Assert.assertEquals(-1.5, this.newWith(<["-1.5", "-31.8", "-32.5"]:(decimalLiteral.(type))(); separator=", ">).max()<(wideDelta.(type))>);
Assert.assertEquals(<name>.POSITIVE_INFINITY, this.newWith(<["-1.5", "31.8", "32.5"]:(decimalLiteral.(type))(); separator=", ">, <name>.POSITIVE_INFINITY).max()<(wideDelta.(type))>);
Assert.assertEquals(<name>.NaN, this.newWith(<["-1.5", "31.8", "32.5"]:(decimalLiteral.(type))(); separator=", ">, <name>.NaN, 31.5f).max()<(wideDelta.(type))>);
Assert.assertEquals(32.5, this.newWith(<["-1.5", "31.8", "32.5"]:(decimalLiteral.(type))(); separator=", ">, <name>.NEGATIVE_INFINITY, 31.5f).max()<(wideDelta.(type))>);
>>

minTests ::= [
    "byte": "intMinTest",
    "short": "intMinTest",
    "char": "charMinTest",
    "int": "intMinTest",
    "long": "intMinTest",
    "float": "floatMinTest",
    "double": "floatMinTest"
]

intMinTest(type, name) ::= <<
Assert.assertEquals(<(wideLiteral.(type))("-2")>, this.newWith(<["-1", "-2", "9"]:(literal.(type))(); separator=", ">).min()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("0")>, this.newWith(<["1", "0", "9", "30", "31", "32"]:(literal.(type))(); separator=", ">).min()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("-1")>, this.newWith(<["-1", "0", "9", "30", "31", "32"]:(literal.(type))(); separator=", ">).min()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("31")>, this.newWith(<["31", "32", "33"]:(literal.(type))(); separator=", ">).min()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("32")>, this.newWith(<["32", "39", "35"]:(literal.(type))(); separator=", ">).min()<(wideDelta.(type))>);
>>

charMinTest(type, name) ::= <<
Assert.assertEquals(<(wideLiteral.(type))("9")>, this.newWith(<["-1", "-2", "9"]:(literal.(type))(); separator=", ">).min()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("0")>, this.newWith(<["1", "0", "9", "30", "31", "32"]:(literal.(type))(); separator=", ">).min()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("0")>, this.newWith(<["-1", "0", "9", "30", "31", "32"]:(literal.(type))(); separator=", ">).min()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("31")>, this.newWith(<["31", "32", "33"]:(literal.(type))(); separator=", ">).min()<(wideDelta.(type))>);
Assert.assertEquals(<(wideLiteral.(type))("32")>, this.newWith(<["32", "39", "35"]:(literal.(type))(); separator=", ">).min()<(wideDelta.(type))>);
>>

floatMinTest(type, name) ::= <<
<intMaxTest(type, name)>
Assert.assertEquals(-1.5, this.newWith(<["-1.5", "31.5", "32.5"]:(decimalLiteral.(type))(); separator=", ">).min()<(wideDelta.(type))>);
Assert.assertEquals(1.5, this.newWith(<["1.5", "31.0", "30.0"]:(decimalLiteral.(type))(); separator=", ">, <name>.POSITIVE_INFINITY).min()<(wideDelta.(type))>);
Assert.assertEquals(31.5, this.newWith(<["31.5", "32.5"]:(decimalLiteral.(type))(); separator=", ">, <name>.NaN).min()<(wideDelta.(type))>);
Assert.assertEquals(<name>.NEGATIVE_INFINITY, this.newWith(<["-1.5", "31.5", "32.5"]:(decimalLiteral.(type))(); separator=", ">, <name>.NEGATIVE_INFINITY, 31.5f).min()<(wideDelta.(type))>);
>>
