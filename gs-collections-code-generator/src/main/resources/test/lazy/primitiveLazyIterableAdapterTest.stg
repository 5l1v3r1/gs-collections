import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/lazy/primitive"

fileName(primitive) ::= "Lazy<primitive.name>IterableAdapterTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.impl.lazy.primitive;

import java.util.NoSuchElementException;

import com.gs.collections.api.Lazy<name>Iterable;
import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.procedure.primitive.<name>Procedure;
import com.gs.collections.api.iterator.<name>Iterator;
import com.gs.collections.impl.bag.mutable.primitive.<name>HashBag;
import com.gs.collections.impl.block.factory.primitive.<name>Predicates;
import com.gs.collections.impl.list.mutable.primitive.<name>ArrayList;
import com.gs.collections.impl.set.mutable.primitive.<name>HashSet;
import com.gs.collections.impl.test.Verify;
import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test for {@link Lazy<name>IterableAdapter}.
 */
public class Lazy<name>IterableAdapterTest
{
    private final Lazy<name>IterableAdapter iterable =
        new Lazy<name>IterableAdapter(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));

    @Test
    public void <type>Iterator()
    {
        <wideType.(type)> sum = <wideZero.(type)>;
        for (<name>Iterator iterator = this.iterable.<type>Iterator(); iterator.hasNext() ;)
        {
            sum += iterator.next();
        }
        Assert.assertEquals(<(wideLiteral.(type))("6")>, sum<(wideDelta.(type))>);
    }

    @Test
    public void forEach()
    {
        final <wideType.(type)>[] sum = new <wideType.(type)>[1];
        this.iterable.forEach(new <name>Procedure()
        {
            public void value(<type> each)
            {
                sum[0] += each;
            }
        });
        Assert.assertEquals(<(wideLiteral.(type))("6")>, sum[0]<(wideDelta.(type))>);
    }

    @Test
    public void size()
    {
        Verify.assertSize(3, this.iterable);
    }

    @Test
    public void empty()
    {
        Assert.assertFalse(this.iterable.isEmpty());
        Assert.assertTrue(this.iterable.notEmpty());
        Verify.assertNotEmpty(this.iterable);
    }

    @Test
    public void count()
    {
        Assert.assertEquals(1L, this.iterable.count(<name>Predicates.lessThan(<(literal.(type))("2")>)));
        Assert.assertEquals(0L, this.iterable.count(<name>Predicates.lessThan(<(literal.(type))("0")>)));
    }

    @Test
    public void anySatisfy()
    {
        Assert.assertTrue(this.iterable.anySatisfy(<name>Predicates.lessThan(<(literal.(type))("2")>)));
        Assert.assertFalse(this.iterable.anySatisfy(<name>Predicates.greaterThan(<(literal.(type))("4")>)));
    }

    @Test
    public void allSatisfy()
    {
        Assert.assertTrue(this.iterable.allSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertFalse(this.iterable.allSatisfy(<name>Predicates.lessThan(<(literal.(type))("2")>)));
        Assert.assertFalse(this.iterable.allSatisfy(<name>Predicates.lessThan(<(literal.(type))("1")>)));
        Assert.assertTrue(this.iterable.allSatisfy(<name>Predicates.lessThan(<(literal.(type))("4")>)));
    }

    @Test
    public void noneSatisfy()
    {
        Assert.assertTrue(this.iterable.noneSatisfy(<name>Predicates.lessThan(<(literal.(type))("0")>)));
        Assert.assertFalse(this.iterable.noneSatisfy(<name>Predicates.lessThan(<(literal.(type))("2")>)));
        Assert.assertTrue(this.iterable.noneSatisfy(<name>Predicates.lessThan(<(literal.(type))("1")>)));
        Assert.assertTrue(this.iterable.noneSatisfy(<name>Predicates.greaterThan(<(literal.(type))("4")>)));
    }

    @Test
    public void select()
    {
        Verify.assertSize(2, this.iterable.select(<name>Predicates.greaterThan(<(literal.(type))("1")>)));
        Verify.assertSize(0, this.iterable.select(<name>Predicates.lessThan(<(literal.(type))("0")>)));
    }

    @Test
    public void reject()
    {
        Verify.assertSize(1, this.iterable.reject(<name>Predicates.greaterThan(<(literal.(type))("1")>)));
        Verify.assertSize(0, this.iterable.reject(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
    }

    @Test
    public void detectIfNone()
    {
        Assert.assertEquals(<(wideLiteral.(type))("1")>, this.iterable.detectIfNone(<name>Predicates.lessThan(<(literal.(type))("4")>), <(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, this.iterable.detectIfNone(<name>Predicates.greaterThan(<(literal.(type))("3")>), <(literal.(type))("0")>)<(wideDelta.(type))>);
    }

    @Test
    public void collect()
    {
        Verify.assertIterableSize(3, this.iterable.collect(new <name>ToObjectFunction\<String>()
        {
            public String valueOf(<type> <type>Parameter)
            {
                return String.valueOf(<type>Parameter);
            }
        }));
    }

    @Test
    public void sum()
    {
        Assert.assertEquals(<(wideLiteral.(type))("6")>, this.iterable.sum()<(wideDelta.(type))>);
    }

    @Test
    public void max()
    {
        Assert.assertEquals(<(literal.(type))("3")>, this.iterable.max()<(wideDelta.(type))>);
    }

    @Test
    public void min()
    {
        Assert.assertEquals(<(literal.(type))("1")>, this.iterable.min()<(wideDelta.(type))>);
    }

    @Test
    public void minIfEmpty()
    {
        Assert.assertEquals(<(literal.(type))("1")>, this.iterable.minIfEmpty(<(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(literal.(type))("0")>,
            this.iterable.select(<name>Predicates.lessThan(<(literal.(type))("0")>))
                .minIfEmpty(<(literal.(type))("0")>)<(wideDelta.(type))>);
    }

    @Test
    public void maxIfEmpty()
    {
        Assert.assertEquals(<(literal.(type))("3")>, this.iterable.maxIfEmpty(<(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(literal.(type))("0")>,
            this.iterable.select(<name>Predicates.lessThan(<(literal.(type))("0")>))
                .maxIfEmpty(<(literal.(type))("0")>)<(wideDelta.(type))>);
    }

    @Test (expected = NoSuchElementException.class)
    public void maxThrowsOnEmpty()
    {
        new Lazy<name>IterableAdapter(new <name>ArrayList()).max();
    }

    @Test (expected = NoSuchElementException.class)
    public void minThrowsOnEmpty()
    {
        new Lazy<name>IterableAdapter(new <name>ArrayList()).min();
    }

    @Test
    public void average()
    {
        Assert.assertEquals(2.0d, this.iterable.average(), 0.0);
    }

    @Test
    public void median()
    {
        Assert.assertEquals(2.0d, this.iterable.median(), 0.0);
    }

    @Test
    public void toArray()
    {
        Assert.assertArrayEquals(new <type>[]{1, 2, 3}, this.iterable.toArray()<(delta.(type))>);
    }

    @Test
    public void contains()
    {
        Assert.assertTrue(this.iterable.contains(<(literal.(type))("1")>));
        Assert.assertTrue(this.iterable.contains(<(literal.(type))("2")>));
        Assert.assertTrue(this.iterable.contains(<(literal.(type))("3")>));
        Assert.assertFalse(this.iterable.contains(<(literal.(type))("4")>));
    }

    @Test
    public void containsAllArray()
    {
        Assert.assertTrue(this.iterable.containsAll(<["1"]:(literal.(type))(); separator=", ">));
        Assert.assertTrue(this.iterable.containsAll(<["2"]:(literal.(type))(); separator=", ">));
        Assert.assertTrue(this.iterable.containsAll(<["1", "2"]:(literal.(type))(); separator=", ">));
        Assert.assertTrue(this.iterable.containsAll(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(this.iterable.containsAll(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(this.iterable.containsAll(<["4", "5", "6"]:(literal.(type))(); separator=", ">));
    }

    @Test
    public void containsAllIterable()
    {
        Assert.assertTrue(this.iterable.containsAll(<name>ArrayList.newListWith(<["1"]:(literal.(type))(); separator=", ">)));
        Assert.assertTrue(this.iterable.containsAll(<name>ArrayList.newListWith(<["2"]:(literal.(type))(); separator=", ">)));
        Assert.assertTrue(this.iterable.containsAll(<name>ArrayList.newListWith(<["1", "2"]:(literal.(type))(); separator=", ">)));
        Assert.assertTrue(this.iterable.containsAll(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(this.iterable.containsAll(<name>ArrayList.newListWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(this.iterable.containsAll(<name>ArrayList.newListWith(<["4", "5", "6"]:(literal.(type))(); separator=", ">)));
    }

    @Test
    public void toSortedArray()
    {
        Assert.assertArrayEquals(new <type>[]{1, 2, 3}, this.iterable.toSortedArray()<(delta.(type))>);
    }

    @Test
    public void toList()
    {
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.iterable.toList());
    }

    @Test
    public void toSortedList()
    {
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.iterable.toSortedList());
    }

    @Test
    public void toSet()
    {
        Assert.assertEquals(<name>HashSet.newSetWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.iterable.toSet());
    }

    @Test
    public void toBag()
    {
        Assert.assertEquals(<name>HashBag.newBagWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.iterable.toBag());
    }

    @Test
    public void asLazy()
    {
        Assert.assertEquals(this.iterable.toSet(), this.iterable.asLazy().toSet());
        Verify.assertInstanceOf(Lazy<name>Iterable.class, this.iterable.asLazy());
        Assert.assertSame(this.iterable, this.iterable.asLazy());
    }
}
>>
