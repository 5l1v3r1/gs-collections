import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/list/mutable/primitive"

fileName(primitive) ::= "Synchronized<primitive.name>ListTest"

class(primitive) ::= <<
<body(primitive.type, primitive.wrapperName, primitive.name)>
>>

body(type, wrapperName, name) ::= <<
<copyright()>

package com.gs.collections.impl.list.mutable.primitive;

import com.gs.collections.api.list.primitive.Mutable<name>List;
import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test for {@link Synchronized<name>List}.
 * This file was automatically generated from template file synchronizedPrimitiveListTest.stg.
 */
public class Synchronized<name>ListTest extends Abstract<name>ListTestCase
{
    private final Synchronized<name>List list = this.classUnderTest();

    @Override
    protected final Synchronized<name>List classUnderTest()
    {
        return new Synchronized<name>List(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
    }

    @Override
    protected Synchronized<name>List getEmptyCollection()
    {
        return new Synchronized<name>List(new <name>ArrayList());
    }

    @Override
    protected Synchronized<name>List newWith(<type>... elements)
    {
        return new Synchronized<name>List(<name>ArrayList.newListWith(elements));
    }

    @Override
    @Test
    public void asSynchronized()
    {
        super.asSynchronized();
        Mutable<name>List listWithLockObject = new Synchronized<name>List(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), new Object());
        Assert.assertEquals(this.list, listWithLockObject);
        Assert.assertSame(listWithLockObject, listWithLockObject.asSynchronized());
        Assert.assertSame(this.list, this.list.asSynchronized());
    }
}

>>
