import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/list/mutable/primitive"

fileName(primitive) ::= "Synchronized<primitive.name>ListTest"

class(primitive) ::= <<
<body(primitive.type, primitive.wrapperName, primitive.name)>
>>

body(type, wrapperName, name) ::= <<
<copyright()>

package com.gs.collections.impl.list.mutable.primitive;

import com.gs.collections.api.collection.primitive.Mutable<name>Collection;
import com.gs.collections.api.iterator.<name>Iterator;
import com.gs.collections.api.list.MutableList;
import com.gs.collections.api.list.primitive.Mutable<name>List;
import com.gs.collections.impl.collection.mutable.primitive.AbstractSynchronized<name>CollectionTestCase;
import com.gs.collections.impl.list.mutable.FastList;
import org.junit.Assert;
import org.junit.Test;

/**
 * This file was automatically generated from template file synchronizedPrimitiveListTest.stg.
 * JUnit test for {@link Synchronized<name>List}.
 */
public class Synchronized<name>ListTest extends AbstractSynchronized<name>CollectionTestCase
{
    private final Mutable<name>List list = this.classUnderTest();

    @Override
    protected final Mutable<name>List classUnderTest()
    {
        return new Synchronized<name>List(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
    }

    @Override
    protected final Mutable<name>List classUnderTestWithLock()
    {
        return new Synchronized<name>List(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), new Object());
    }

    @Override
    protected Mutable<name>List getEmptyCollection()
    {
        return new Synchronized<name>List(new <name>ArrayList());
    }

    @Override
    protected Mutable<name>List getEmptyUnSynchronizedCollection()
    {
        return new <name>ArrayList();
    }

    @Override
    protected MutableList\<<wrapperName>\> getEmptyObjectCollection()
    {
        return FastList.newList();
    }

    @Override
    protected Mutable<name>List newWith(<type>... elements)
    {
        return new Synchronized<name>List(<name>ArrayList.newListWith(elements));
    }

    @Override
    protected Mutable<name>List newUnSynchronizedCollectionWith(<type>... elements)
    {
        return <name>ArrayList.newListWith(elements);
    }

    @Override
    protected MutableList\<<wrapperName>\> newObjectCollectionWith(<wrapperName>... elements)
    {
        return FastList.newListWith(elements);
    }

    @Override
    protected Mutable<name>List newUnmodifiableCollectionWith(<type>... elements)
    {
        return new Unmodifiable<name>List(<name>ArrayList.newListWith(elements));
    }

    @Test
    public void get()
    {
        Assert.assertEquals(<(wideLiteral.(type))("1")>, this.list.get(0)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("2")>, this.list.get(1)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("3")>, this.list.get(2)<(wideDelta.(type))>);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void get_throws_index_greater_than_size()
    {
        this.list.get(3);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void get_throws_index_negative()
    {
        this.list.get(-1);
    }

    @Test
    public void getFirst()
    {
        Mutable<name>List singleItemList = new Synchronized<name>List(<name>ArrayList.newListWith(<(literal.(type))("1")>));
        Assert.assertEquals(<(wideLiteral.(type))("1")>, singleItemList.getFirst()<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("1")>, this.list.getFirst()<(wideDelta.(type))>);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFirst_emptyList_throws()
    {
        new Synchronized<name>List(new <name>ArrayList()).getFirst();
    }

    @Test
    public void getLast()
    {
        Mutable<name>List singleItemList = new Synchronized<name>List(<name>ArrayList.newListWith(<(literal.(type))("1")>));
        Assert.assertEquals(<(wideLiteral.(type))("1")>, singleItemList.getLast()<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("3")>, this.list.getLast()<(wideDelta.(type))>);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getLast_emptyList_throws()
    {
        new Synchronized<name>List(new <name>ArrayList()).getLast();
    }

    @Test
    public void indexOf()
    {
        Mutable<name>List arrayList = new Synchronized<name>List(<name>ArrayList.newListWith(<["1", "2", "1"]:(literal.(type))(); separator=", ">));
        Assert.assertEquals(0L, arrayList.indexOf(<(literal.(type))("1")>));
        Assert.assertEquals(1L, arrayList.indexOf(<(literal.(type))("2")>));
        Assert.assertEquals(-1L, arrayList.indexOf(<(literal.(type))("9")>));
    }

    @Test
    public void lastIndexOf()
    {
        Mutable<name>List arrayList = new Synchronized<name>List(<name>ArrayList.newListWith(<["1", "2", "1"]:(literal.(type))(); separator=", ">));
        Assert.assertEquals(2L, arrayList.lastIndexOf(<(literal.(type))("1")>));
        Assert.assertEquals(1L, arrayList.lastIndexOf(<(literal.(type))("2")>));
        Assert.assertEquals(-1L, arrayList.lastIndexOf(<(literal.(type))("9")>));
    }

    @Test
    public void addAtIndex()
    {
        Mutable<name>List emptyList = new Synchronized<name>List(new <name>ArrayList());
        emptyList.addAtIndex(0, <(literal.(type))("1")>);
        Assert.assertEquals(<name>ArrayList.newListWith(<(literal.(type))("1")>), emptyList);
        Mutable<name>List arrayList = this.list;
        arrayList.addAtIndex(3, <(literal.(type))("4")>);
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">), arrayList);
        arrayList.addAtIndex(2, <(literal.(type))("5")>);
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "2", "5", "3", "4"]:(literal.(type))(); separator=", ">), arrayList);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void addAtIndex_throws_index_greater_than_size()
    {
        new Synchronized<name>List(new <name>ArrayList()).addAtIndex(1, <(literal.(type))("0")>);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void addAtIndex_throws_index_negative()
    {
        this.list.addAtIndex(-1, <(literal.(type))("4")>);
    }

    @Override
    @Test
    public void addAllArray()
    {
        super.addAllArray();
        Assert.assertFalse(this.list.addAllAtIndex(1));
        Assert.assertTrue(this.list.addAll(<["4", "5", "6"]:(literal.(type))(); separator=", ">));
        Assert.assertTrue(this.list.addAllAtIndex(4, <["5", "6"]:(literal.(type))(); separator=", ">));
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "2", "3", "4", "5", "6", "5", "6"]:(literal.(type))(); separator=", ">), this.list);
    }

    @Override
    @Test
    public void addAllIterable()
    {
        super.addAllIterable();
        Assert.assertFalse(this.list.addAllAtIndex(1));
        Assert.assertTrue(this.list.addAll(<name>ArrayList.newListWith(<["4", "5", "6"]:(literal.(type))(); separator=", ">)));
        Assert.assertTrue(this.list.addAllAtIndex(4, <name>ArrayList.newListWith(<["5", "6"]:(literal.(type))(); separator=", ">)));
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "2", "3", "4", "5", "6", "5", "6"]:(literal.(type))(); separator=", ">), this.list);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void addAll_throws_index_negative()
    {
        this.list.addAllAtIndex(-1, <["5", "6"]:(literal.(type))(); separator=", ">);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void addAll_throws_index_greater_than_size()
    {
        this.list.addAllAtIndex(5, <["5", "6"]:(literal.(type))(); separator=", ">);
    }

    @Test
    public void removeAtIndex()
    {
        this.list.removeAtIndex(1);
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "3"]:(literal.(type))(); separator=", ">), this.list);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void removeAtIndex_throws_index_greater_than_size()
    {
        new Synchronized<name>List(new <name>ArrayList()).removeAtIndex(1);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void removeAtIndex_throws_index_negative()
    {
        this.list.removeAtIndex(-1);
    }

    @Test
    public void set()
    {
        this.list.set(1, <(literal.(type))("4")>);
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "4", "3"]:(literal.(type))(); separator=", ">), this.list);
    }

    @Override
    @Test
    public void iterator()
    {
        <name>Iterator iterator = this.list.<type>Iterator();
        Assert.assertTrue(iterator.hasNext());
        Assert.assertEquals(<(wideLiteral.(type))("1")>, iterator.next()<(wideDelta.(type))>);
        Assert.assertTrue(iterator.hasNext());
        Assert.assertEquals(<(wideLiteral.(type))("2")>, iterator.next()<(wideDelta.(type))>);
        Assert.assertTrue(iterator.hasNext());
        Assert.assertEquals(<(wideLiteral.(type))("3")>, iterator.next()<(wideDelta.(type))>);
        Assert.assertFalse(iterator.hasNext());
    }

    @Test
    public void reverseThis()
    {
        Assert.assertEquals(new <name>ArrayList(), new Synchronized<name>List(new <name>ArrayList()).reverseThis());
        Mutable<name>List emptyList = new Synchronized<name>List(new <name>ArrayList());
        Assert.assertSame(emptyList, emptyList.reverseThis());
        Assert.assertEquals(<name>ArrayList.newListWith(<["3"]:(literal.(type))(); separator=", ">), new Synchronized<name>List(<name>ArrayList.newListWith(<["3"]:(literal.(type))(); separator=", ">)).reverseThis());
        Assert.assertEquals(<name>ArrayList.newListWith(<["3", "1"]:(literal.(type))(); separator=", ">), new Synchronized<name>List(<name>ArrayList.newListWith(<["1", "3"]:(literal.(type))(); separator=", ">)).reverseThis());
        Assert.assertEquals(<name>ArrayList.newListWith(<["3", "1", "9", "7"]:(literal.(type))(); separator=", ">), new Synchronized<name>List(<name>ArrayList.newListWith(<["7", "9", "1", "3"]:(literal.(type))(); separator=", ">)).reverseThis());
        Mutable<name>List sameList = new Synchronized<name>List(<name>ArrayList.newListWith(<["3", "1", "9", "7"]:(literal.(type))(); separator=", ">));
        Assert.assertSame(sameList, sameList.reverseThis());
        Assert.assertEquals(<name>ArrayList.newListWith(<["3", "1", "9", "7", "8"]:(literal.(type))(); separator=", ">),
                new Synchronized<name>List(<name>ArrayList.newListWith(<["8", "7", "9", "1", "3"]:(literal.(type))(); separator=", ">)).reverseThis());
    }

    @Test
    public void sortThis()
    {
        Assert.assertEquals(new <name>ArrayList(), new Synchronized<name>List(new <name>ArrayList()).sortThis());
        Mutable<name>List emptyList = new Synchronized<name>List(new <name>ArrayList());
        Assert.assertSame(emptyList, emptyList.reverseThis());
        Assert.assertEquals(<name>ArrayList.newListWith(<["3"]:(literal.(type))(); separator=", ">), new Synchronized<name>List(<name>ArrayList.newListWith(<["3"]:(literal.(type))(); separator=", ">)).sortThis());
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "3"]:(literal.(type))(); separator=", ">), new Synchronized<name>List(<name>ArrayList.newListWith(<["3", "1"]:(literal.(type))(); separator=", ">)).sortThis());
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "3", "7", "9"]:(literal.(type))(); separator=", ">), new Synchronized<name>List(<name>ArrayList.newListWith(<["3", "1", "9", "7"]:(literal.(type))(); separator=", ">)).sortThis());
        Mutable<name>List sameList = new Synchronized<name>List(<name>ArrayList.newListWith(<["3", "1", "9", "7"]:(literal.(type))(); separator=", ">));
        Assert.assertSame(sameList, sameList.sortThis());
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "3", "7", "8", "9"]:(literal.(type))(); separator=", ">),
                new Synchronized<name>List(<name>ArrayList.newListWith(<["8", "1", "7", "3", "9"]:(literal.(type))(); separator=", ">)).sortThis());
    }

    @Test
    public void toReversed()
    {
        Assert.assertEquals(new <name>ArrayList(), new Synchronized<name>List(new <name>ArrayList()).toReversed());
        Mutable<name>List emptyList = new Synchronized<name>List(new <name>ArrayList());
        Assert.assertNotSame(emptyList, emptyList.toReversed());
        Assert.assertEquals(<name>ArrayList.newListWith(<["3", "1", "9", "7"]:(literal.(type))(); separator=", ">),
                new Synchronized<name>List(<name>ArrayList.newListWith(<["7", "9", "1", "3"]:(literal.(type))(); separator=", ">)).toReversed());
        Mutable<name>List evenList = new Synchronized<name>List(<name>ArrayList.newListWith(<["3", "1", "9", "7"]:(literal.(type))(); separator=", ">));
        Assert.assertNotSame(evenList, evenList.toReversed());
        Assert.assertEquals(<name>ArrayList.newListWith(<["3", "1", "9", "7", "8"]:(literal.(type))(); separator=", ">),
                new Synchronized<name>List(<name>ArrayList.newListWith(<["8", "7", "9", "1", "3"]:(literal.(type))(); separator=", ">)).toReversed());
        Mutable<name>List oddList = new Synchronized<name>List(<name>ArrayList.newListWith(<["3", "1", "9", "7", "8"]:(literal.(type))(); separator=", ">));
        Assert.assertNotSame(oddList, oddList.toReversed());
    }

    @Override
    @Test
    public void toArray()
    {
        super.toArray();
        Assert.assertArrayEquals(new <type>[]{<["1", "2", "4", "3"]:(literal.(type))(); separator=", ">},
                this.newWith(<["1", "2", "4", "3"]:(literal.(type))(); separator=", ">).toArray()<(delta.(type))>);
    }

    @Override
    @Test
    public void testEquals()
    {
        super.testEquals();
        Mutable<name>Collection list1 = this.newWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">);
        Mutable<name>Collection list2 = this.newWith(<["4", "3", "2", "1"]:(literal.(type))(); separator=", ">);
        Assert.assertNotEquals(list1, list2);
    }

    @Override
    @Test
    public void testToString()
    {
        super.testToString();
        Assert.assertEquals("[<["1", "2", "3"]:(toStringLiteral.(type))(); separator=", ">]", this.list.toString());
    }

    @Override
    @Test
    public void makeString()
    {
        super.makeString();
        Assert.assertEquals(this.list.toString(), this.list.makeString("[", ", ", "]"));
        Assert.assertEquals("<["1", "2", "3"]:(toStringLiteral.(type))(); separator=", ">", this.list.makeString());
        Assert.assertEquals("<["1", "2", "3"]:(toStringLiteral.(type))(); separator="/">", this.list.makeString("/"));
    }

    @Override
    @Test
    public void appendString()
    {
        super.appendString();
        StringBuilder appendable2 = new StringBuilder();
        this.list.appendString(appendable2);
        Assert.assertEquals("<["1", "2", "3"]:(toStringLiteral.(type))(); separator=", ">", appendable2.toString());
        StringBuilder appendable3 = new StringBuilder();
        this.list.appendString(appendable3, "/");
        Assert.assertEquals("<["1", "2", "3"]:(toStringLiteral.(type))(); separator="/">", appendable3.toString());
        StringBuilder appendable4 = new StringBuilder();
        this.list.appendString(appendable4, "[", ", ", "]");
        Assert.assertEquals(this.list.toString(), appendable4.toString());
    }

    @Override
    @Test
    public void toList()
    {
        super.toList();
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.classUnderTest().toList());
    }

    @Test
    public void toSortedList()
    {
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.list.toSortedList());
    }
}

>>
