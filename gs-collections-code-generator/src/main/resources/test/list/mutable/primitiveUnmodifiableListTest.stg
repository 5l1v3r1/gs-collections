import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/list/mutable/primitive"

fileName(primitive) ::= "Unmodifiable<primitive.name>ListTest"

class(primitive) ::= <<
<body(primitive.type, primitive.wrapperName, primitive.name)>
>>

body(type, wrapperName, name) ::= <<
<copyright()>

package com.gs.collections.impl.list.mutable.primitive;

import java.lang.reflect.Field;
import java.util.NoSuchElementException;

import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.procedure.primitive.<name>Procedure;
import com.gs.collections.api.iterator.<name>Iterator;
import com.gs.collections.api.list.primitive.Mutable<name>List;
import com.gs.collections.impl.bag.mutable.primitive.<name>HashBag;
import com.gs.collections.impl.block.factory.primitive.<name>Predicates;
import com.gs.collections.impl.list.mutable.FastList;
import com.gs.collections.impl.set.mutable.primitive.<name>HashSet;
import com.gs.collections.impl.test.Verify;
import org.junit.Assert;
import org.junit.Test;

/**
 * This file was automatically generated from template file primitiveUnmodifiableListTest.stg.
 * JUnit test for {@link Unmodifiable<name>List}.
 */
public class Unmodifiable<name>ListTest
{
    private final Mutable<name>List list = new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));

    @Test
    public void newListWith()
    {
        Verify.assertSize(3, this.list);
        Assert.assertTrue(this.list.containsAll(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
    }

    @Test
    public void newList()
    {
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), <name>ArrayList.newList(this.list));
    }

    @Test
    public void isEmpty()
    {
        Verify.assertEmpty(new Unmodifiable<name>List(new <name>ArrayList()));
        Verify.assertNotEmpty(this.list);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void clear()
    {
        this.list.clear();
    }

    @Test
    public void containsAllArray()
    {
        Assert.assertTrue(this.list.containsAll(<(literal.(type))("1")>));
        Assert.assertTrue(this.list.containsAll(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(this.list.containsAll(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">));
    }

    @Test
    public void containsAllIterable()
    {
        Assert.assertTrue(new Unmodifiable<name>List(new <name>ArrayList()).containsAll(new <name>ArrayList()));
        Assert.assertFalse(new Unmodifiable<name>List(new <name>ArrayList()).containsAll(<name>ArrayList.newListWith(<(literal.(type))("1")>)));
        Assert.assertTrue(this.list.containsAll(<name>ArrayList.newListWith(<(literal.(type))("1")>)));
        Assert.assertTrue(this.list.containsAll(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(this.list.containsAll(<name>ArrayList.newListWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">)));
    }

    @Test
    public void get()
    {
        Assert.assertEquals(<(wideLiteral.(type))("1")>, this.list.get(0)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("2")>, this.list.get(1)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("3")>, this.list.get(2)<(wideDelta.(type))>);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void get_throws_index_greater_than_size()
    {
        this.list.get(3);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void get_throws_index_negative()
    {
        this.list.get(-1);
    }

    @Test
    public void getFirst()
    {
        Mutable<name>List singleItemList = new Unmodifiable<name>List(<name>ArrayList.newListWith(<(literal.(type))("1")>));
        Assert.assertEquals(<(wideLiteral.(type))("1")>, singleItemList.getFirst()<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("1")>, this.list.getFirst()<(wideDelta.(type))>);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getFirst_emptyList_throws()
    {
        Mutable<name>List emptyList = new Unmodifiable<name>List(new <name>ArrayList());
        emptyList.getFirst();
    }

    @Test
    public void getLast()
    {
        Mutable<name>List singleItemList = new Unmodifiable<name>List(<name>ArrayList.newListWith(<(literal.(type))("1")>));
        Assert.assertEquals(<(wideLiteral.(type))("1")>, singleItemList.getLast()<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("3")>, this.list.getLast()<(wideDelta.(type))>);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void getLast_emptyList_throws()
    {
        Mutable<name>List emptyList = new Unmodifiable<name>List(new <name>ArrayList());
        emptyList.getLast();
    }

    @Test
    public void indexOf()
    {
        Mutable<name>List arrayList = new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "1"]:(literal.(type))(); separator=", ">));
        Assert.assertEquals(0L, arrayList.indexOf(<(literal.(type))("1")>));
        Assert.assertEquals(1L, arrayList.indexOf(<(literal.(type))("2")>));
        Assert.assertEquals(-1L, arrayList.indexOf(<(literal.(type))("9")>));
    }

    @Test
    public void lastIndexOf()
    {
        Mutable<name>List arrayList = new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "1"]:(literal.(type))(); separator=", ">));
        Assert.assertEquals(2L, arrayList.lastIndexOf(<(literal.(type))("1")>));
        Assert.assertEquals(1L, arrayList.lastIndexOf(<(literal.(type))("2")>));
        Assert.assertEquals(-1L, arrayList.lastIndexOf(<(literal.(type))("9")>));
    }

    @Test (expected = UnsupportedOperationException.class)
    public void add()
    {
        Mutable<name>List emptyList = new Unmodifiable<name>List(new <name>ArrayList());
        emptyList.add(<(literal.(type))("1")>);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void addAtIndex()
    {
        Mutable<name>List emptyList = new Unmodifiable<name>List(new <name>ArrayList());
        emptyList.addAtIndex(0, <(literal.(type))("1")>);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void addAtIndex_throws_index_greater_than_size()
    {
        Mutable<name>List emptyList = new Unmodifiable<name>List(new <name>ArrayList());
        emptyList.addAtIndex(1, <(literal.(type))("0")>);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void addAtIndex_throws_index_negative()
    {
        this.list.addAtIndex(-1, <(literal.(type))("4")>);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void addAllArray()
    {
        this.list.addAll();
    }

    @Test (expected = UnsupportedOperationException.class)
    public void addAllIterable()
    {
        this.list.addAll(new <name>ArrayList());
    }

    @Test (expected = UnsupportedOperationException.class)
    public void addAll_throws_index_negative()
    {
        this.list.addAllAtIndex(-1, <["5", "6"]:(literal.(type))(); separator=", ">);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void addAll_throws_index_greater_than_size()
    {
        this.list.addAllAtIndex(5, <["5", "6"]:(literal.(type))(); separator=", ">);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void remove()
    {
        this.list.remove(<(literal.(type))("-1")>);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void removeAll()
    {
        this.list.removeAll();
    }

    @Test (expected = UnsupportedOperationException.class)
    public void removeAllIterable()
    {
        this.list.removeAll(new <name>ArrayList());
    }

    @Test (expected = UnsupportedOperationException.class)
    public void removeAtIndex()
    {
        this.list.removeAtIndex(1);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void removeAtIndex_throws_index_greater_than_size()
    {
        Mutable<name>List emptyList = new Unmodifiable<name>List(new <name>ArrayList());
        emptyList.removeAtIndex(1);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void removeAtIndex_throws_index_negative()
    {
        this.list.removeAtIndex(-1);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void set()
    {
        this.list.set(1, <(literal.(type))("4")>);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void with()
    {
        Mutable<name>List arrayList = new Unmodifiable<name>List(new <name>ArrayList()).with(<["1"]:(literal.(type))(); separator=", ">);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void withAll()
    {
        new Unmodifiable<name>List(new <name>ArrayList()).withAll(<name>ArrayList.newListWith(<(literal.(type))("1")>));
    }

    @Test (expected = UnsupportedOperationException.class)
    public void without()
    {
        Mutable<name>List mainArrayList = new Unmodifiable<name>List(new <name>ArrayList(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">));
        mainArrayList.without(<(literal.(type))("9")>);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void withoutAll()
    {
        Mutable<name>List mainArrayList = new Unmodifiable<name>List(new <name>ArrayList(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">));
        mainArrayList.withoutAll(<name>ArrayList.newListWith(<["8", "9",]:(literal.(type))(); separator=", ">));
    }

    @Test
    public void iterator()
    {
        <name>Iterator iterator = this.list.<type>Iterator();
        Assert.assertTrue(iterator.hasNext());
        Assert.assertEquals(<(wideLiteral.(type))("1")>, iterator.next()<(wideDelta.(type))>);
        Assert.assertTrue(iterator.hasNext());
        Assert.assertEquals(<(wideLiteral.(type))("2")>, iterator.next()<(wideDelta.(type))>);
        Assert.assertTrue(iterator.hasNext());
        Assert.assertEquals(<(wideLiteral.(type))("3")>, iterator.next()<(wideDelta.(type))>);
        Assert.assertFalse(iterator.hasNext());
    }

    @Test(expected = NoSuchElementException.class)
    public void iterator_throws()
    {
        <name>Iterator iterator = this.list.<type>Iterator();
        while (iterator.hasNext())
        {
            iterator.next();
        }

        iterator.next();
    }

    @Test(expected = NoSuchElementException.class)
    public void iterator_throws_non_empty_list()
    {
        Mutable<name>List arrayList = new Unmodifiable<name>List(new <name>ArrayList().with(<(literal.(type))("1")>).with(<(literal.(type))("2")>).with(<(literal.(type))("3")>));
        <name>Iterator iterator = arrayList.<type>Iterator();
        while (iterator.hasNext())
        {
            iterator.next();
        }
        iterator.next();
    }

    @Test
    public void forEach()
    {
        final <wideType.(type)>[] sum = new <wideType.(type)>[1];
        this.list.forEach(new <name>Procedure()
        {
            public void value(<type> each)
            {
                sum[0] += each;
            }
        });

        Assert.assertEquals(<(wideLiteral.(type))("6")>, sum[0]<(wideDelta.(type))>);
    }

    @Test
    public void size()
    {
        Verify.assertSize(0, new Unmodifiable<name>List(new <name>ArrayList()));
        Verify.assertSize(3, this.list);
    }

    @Test
    public void empty()
    {
        Assert.assertTrue(this.list.notEmpty());
        Verify.assertNotEmpty(this.list);
    }

    @Test
    public void count()
    {
        Assert.assertEquals(2L, new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "0", "2"]:(literal.(type))(); separator=", ">)).count(<name>Predicates.greaterThan(<zero.(type)>)));
    }

    @Test
    public void anySatisfy()
    {
        Assert.assertTrue(new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "-1", "2"]:(literal.(type))(); separator=", ">)).anySatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertFalse(new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "-1", "2"]:(literal.(type))(); separator=", ">)).anySatisfy(<name>Predicates.equal(<(literal.(type))("0")>)));
    }

    @Test
    public void allSatisfy()
    {
        Assert.assertFalse(new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "0", "2"]:(literal.(type))(); separator=", ">)).allSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertTrue(new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">)).allSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
    }

    @Test
    public void noneSatisfy()
    {
        Assert.assertFalse(new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "0", "2"]:(literal.(type))(); separator=", ">)).noneSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertTrue(new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">)).noneSatisfy(<name>Predicates.greaterThan(<(literal.(type))("3")>)));
    }

    @Test
    public void select()
    {
        Verify.assertSize(3, this.list.select(<name>Predicates.lessThan(<(literal.(type))("4")>)));
        Verify.assertSize(2, this.list.select(<name>Predicates.lessThan(<(literal.(type))("3")>)));
    }

    @Test
    public void reject()
    {
        Verify.assertSize(0, this.list.reject(<name>Predicates.lessThan(<(literal.(type))("4")>)));
        Verify.assertSize(1, this.list.reject(<name>Predicates.lessThan(<(literal.(type))("3")>)));
    }

    @Test
    public void detectIfNone()
    {
        Assert.assertEquals(<(wideLiteral.(type))("1")>, this.list.detectIfNone(<name>Predicates.lessThan(<(literal.(type))("4")>), <(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, this.list.detectIfNone(<name>Predicates.greaterThan(<(literal.(type))("3")>), <(literal.(type))("0")>)<(wideDelta.(type))>);
    }

    @Test
    public void collect()
    {
        Assert.assertEquals(FastList.newListWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">), this.list.collect(new <name>ToObjectFunction\<<wrapperName>\>()
        {
            public <wrapperName> valueOf(<type> parameter)
            {
                return <(castIntToNarrowType.(type))("parameter - 1")>;
            }
        }));
    }

    @Test
    public void max()
    {
        Assert.assertEquals(<(wideLiteral.(type))("9")>, new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "0", "9", "7"]:(literal.(type))(); separator=", ">)).max()<(wideDelta.(type))>);
    }

    @Test(expected = NoSuchElementException.class)
    public void max_throws_emptyList()
    {
        new Unmodifiable<name>List(new <name>ArrayList()).max();
    }

    @Test
    public void min()
    {
        Assert.assertEquals(<(wideLiteral.(type))("0")>, new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "0", "9", "7"]:(literal.(type))(); separator=", ">)).min()<(wideDelta.(type))>);
    }

    @Test(expected = NoSuchElementException.class)
    public void min_throws_emptyList()
    {
        new Unmodifiable<name>List(new <name>ArrayList()).min();
    }

    @Test
    public void minIfEmpty()
    {
        Assert.assertEquals(<(wideLiteral.(type))("5")>, new Unmodifiable<name>List(new <name>ArrayList()).minIfEmpty(<(literal.(type))("5")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, new Unmodifiable<name>List(new <name>ArrayList()).minIfEmpty(<(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "0", "9", "7"]:(literal.(type))(); separator=", ">)).minIfEmpty(<(literal.(type))("5")>)<(wideDelta.(type))>);
    }

    @Test
    public void maxIfEmpty()
    {
        Assert.assertEquals(<(wideLiteral.(type))("5")>, new Unmodifiable<name>List(new <name>ArrayList()).maxIfEmpty(<(literal.(type))("5")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, new Unmodifiable<name>List(new <name>ArrayList()).maxIfEmpty(<(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("9")>, new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "0", "9", "7"]:(literal.(type))(); separator=", ">)).maxIfEmpty(<(literal.(type))("5")>)<(wideDelta.(type))>);
    }

    @Test
    public void sum()
    {
        Assert.assertEquals(<(wideLiteral.(type))("10")>, new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">)).sum()<(wideDelta.(type))>);
    }

    @Test
    public void average()
    {
        Assert.assertEquals(2.5, new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">)).average(), 0.0);
    }


    @Test(expected = ArithmeticException.class)
    public void averageThrowsOnEmpty()
    {
        new Unmodifiable<name>List(new <name>ArrayList()).average();
    }

    @Test
    public void median()
    {
        Assert.assertEquals(2.5, new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">)).median(), 0.0);
        Assert.assertEquals(3.0, new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">)).median(), 0.0);
    }

    @Test(expected = ArithmeticException.class)
    public void medianThrowsOnEmpty()
    {
        new Unmodifiable<name>List(new <name>ArrayList()).median();
    }

    @Test
    public void toArray()
    {
        Assert.assertArrayEquals(new <type>[]{<["1", "2", "4", "3"]:(literal.(type))(); separator=", ">},
            new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "4", "3"]:(literal.(type))(); separator=", ">)).toArray()<(delta.(type))>);

    }

    @Test
    public void toSortedArray()
    {
        Assert.assertArrayEquals(new <type>[]{<["1", "3", "7", "9"]:(literal.(type))(); separator=", ">},
            new Unmodifiable<name>List(<name>ArrayList.newListWith(<["3", "1", "9", "7"]:(literal.(type))(); separator=", ">)).toSortedArray()<(delta.(type))>);
    }

    @Test (expected = UnsupportedOperationException.class)
    public void reverseThis()
    {
        new Unmodifiable<name>List(new <name>ArrayList()).reverseThis();
    }

    @Test (expected = UnsupportedOperationException.class)
    public void sortThis()
    {
        new Unmodifiable<name>List(new <name>ArrayList()).sortThis();
    }

    @Test
    public void toReversed()
    {
        Assert.assertEquals(new <name>ArrayList(), new Unmodifiable<name>List(new <name>ArrayList()).toReversed());
        Mutable<name>List emptyList = new Unmodifiable<name>List(new <name>ArrayList());
        Assert.assertNotSame(emptyList, emptyList.toReversed());
        Assert.assertEquals(<name>ArrayList.newListWith(<["3", "1", "9", "7"]:(literal.(type))(); separator=", ">),
            new Unmodifiable<name>List(<name>ArrayList.newListWith(<["7", "9", "1", "3"]:(literal.(type))(); separator=", ">)).toReversed());
        Mutable<name>List evenList = new Unmodifiable<name>List(<name>ArrayList.newListWith(<["3", "1", "9", "7"]:(literal.(type))(); separator=", ">));
        Assert.assertNotSame(evenList, evenList.toReversed());
        Assert.assertEquals(<name>ArrayList.newListWith(<["3", "1", "9", "7", "8"]:(literal.(type))(); separator=", ">),
            new Unmodifiable<name>List(<name>ArrayList.newListWith(<["8", "7", "9", "1", "3"]:(literal.(type))(); separator=", ">)).toReversed());
        Mutable<name>List oddList = new Unmodifiable<name>List(<name>ArrayList.newListWith(<["3", "1", "9", "7", "8"]:(literal.(type))(); separator=", ">));
        Assert.assertNotSame(oddList, oddList.toReversed());
    }

    @Test
    public void testEquals()
    {
        Mutable<name>List list1 = new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">));
        Mutable<name>List list2 = new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">));
        Mutable<name>List list3 = new Unmodifiable<name>List(<name>ArrayList.newListWith(<["4", "3", "2", "1"]:(literal.(type))(); separator=", ">));
        Mutable<name>List list4 = new Unmodifiable<name>List(<name>ArrayList.newListWith(<["5", "6", "7", "8"]:(literal.(type))(); separator=", ">));
        Mutable<name>List list5 = new Unmodifiable<name>List(<name>ArrayList.newListWith(<["5", "6", "7"]:(literal.(type))(); separator=", ">));

        Verify.assertEqualsAndHashCode(list1, list2);
        Verify.assertPostSerializedEqualsAndHashCode(list1);
        Assert.assertNotEquals(list1, list3);
        Assert.assertNotEquals(list1, list4);
        Assert.assertNotEquals(list1, list5);
    }

    @Test
    public void testHashCode()
    {
        Assert.assertEquals(FastList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">).hashCode(),
            new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">)).hashCode());
        Assert.assertEquals(FastList.newList().hashCode(), new Unmodifiable<name>List(new <name>ArrayList()).hashCode());
    }

    @Test
    public void testToString()
    {
        Assert.assertEquals("[<["1", "2", "3"]:(toStringLiteral.(type))(); separator=", ">]", this.list.toString());
        Assert.assertEquals("[]", new Unmodifiable<name>List(new <name>ArrayList()).toString());
    }

    @Test
    public void makeString()
    {
        Assert.assertEquals("<["1", "2", "3"]:(toStringLiteral.(type))(); separator=", ">", this.list.makeString());
        Assert.assertEquals("<(toStringLiteral.(type))("1")>", new Unmodifiable<name>List(<name>ArrayList.newListWith(<(literal.(type))("1")>)).makeString("/"));
        Assert.assertEquals("<["1", "2", "3"]:(toStringLiteral.(type))(); separator="/">", this.list.makeString("/"));
        Assert.assertEquals(this.list.toString(), this.list.makeString("[", ", ", "]"));
        Assert.assertEquals("", new Unmodifiable<name>List(new <name>ArrayList()).makeString());
    }

    @Test
    public void appendString()
    {
        StringBuilder appendable = new StringBuilder();
        new <name>ArrayList().appendString(appendable);
        Assert.assertEquals("", appendable.toString());
        StringBuilder appendable2 = new StringBuilder();
        this.list.appendString(appendable2);
        Assert.assertEquals("<["1", "2", "3"]:(toStringLiteral.(type))(); separator=", ">", appendable2.toString());
        StringBuilder appendable3 = new StringBuilder();
        this.list.appendString(appendable3, "/");
        Assert.assertEquals("<["1", "2", "3"]:(toStringLiteral.(type))(); separator="/">", appendable3.toString());
        StringBuilder appendable4 = new StringBuilder();
        this.list.appendString(appendable4, "[", ", ", "]");
        Assert.assertEquals(this.list.toString(), appendable4.toString());
    }

    @Test
    public void toList()
    {
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.list.toList());
    }

    @Test
    public void toSortedList()
    {
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.list.toReversed().toSortedList());
    }

    @Test
    public void toSet()
    {
        Assert.assertEquals(<name>HashSet.newSetWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.list.toSet());
    }

    @Test
    public void toBag()
    {
        Assert.assertEquals(<name>HashBag.newBagWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.list.toBag());
    }

    @Test
    public void asLazy()
    {
        Assert.assertEquals(this.list.toList(), this.list.asLazy().toList());
    }
}

>>
