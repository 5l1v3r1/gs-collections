import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

targetPath() ::= "com/gs/collections/impl/list/mutable/primitive"

fileName(primitive) ::= "Synchronized<primitive.name>List"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.impl.list.mutable.primitive;

import java.io.Serializable;

import com.gs.collections.api.<name>Iterable;
import com.gs.collections.api.Lazy<name>Iterable;
import com.gs.collections.api.bag.primitive.Mutable<name>Bag;
import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.predicate.primitive.<name>Predicate;
import com.gs.collections.api.block.procedure.primitive.<name>Procedure;
import com.gs.collections.api.iterator.<name>Iterator;
import com.gs.collections.api.list.MutableList;
import com.gs.collections.api.list.primitive.Immutable<name>List;
import com.gs.collections.api.list.primitive.Mutable<name>List;
import com.gs.collections.api.set.primitive.Mutable<name>Set;
import com.gs.collections.impl.lazy.primitive.Lazy<name>IterableAdapter;
import net.jcip.annotations.GuardedBy;
import net.jcip.annotations.ThreadSafe;

/**
 * This file was automatically generated from template file primitiveSynchronizedList.stg.
 *
 * @since 3.1.
 */
@ThreadSafe
public final class Synchronized<name>List
        implements Mutable<name>List, Serializable
{
    private static final long serialVersionUID = 1L;

    private final Object lock;
    @GuardedBy("this.lock")
    private final Mutable<name>List list;

    public Synchronized<name>List(Mutable<name>List list)
    {
        this(list, null);
    }

    public Synchronized<name>List(Mutable<name>List list, Object newLock)
    {
        this.list = list;
        this.lock = newLock == null ? this : newLock;
    }

    public int size()
    {
        synchronized (this.lock)
        {
            return this.list.size();
        }
    }

    public boolean isEmpty()
    {
        synchronized (this.lock)
        {
            return this.list.isEmpty();
        }
    }

    public boolean notEmpty()
    {
        synchronized (this.lock)
        {
            return this.list.notEmpty();
        }
    }

    public void clear()
    {
        synchronized (this.lock)
        {
            this.list.clear();
        }
    }

    public boolean contains(<type> value)
    {
        synchronized (this.lock)
        {
            return this.list.contains(value);
        }
    }

    public boolean containsAll(<type>... source)
    {
        synchronized (this.lock)
        {
            return this.list.containsAll(source);
        }
    }

    public boolean containsAll(<name>Iterable source)
    {
        synchronized (this.lock)
        {
            return this.list.containsAll(source);
        }
    }

    public <type> get(int index)
    {
        synchronized (this.lock)
        {
            return this.list.get(index);
        }
    }

    public <type> getFirst()
    {
        synchronized (this.lock)
        {
            return this.list.getFirst();
        }
    }

    public <type> getLast()
    {
        synchronized (this.lock)
        {
            return this.list.getLast();
        }
    }

    public int indexOf(<type> value)
    {
        synchronized (this.lock)
        {
            return this.list.indexOf(value);
        }
    }

    public int lastIndexOf(<type> value)
    {
        synchronized (this.lock)
        {
            return this.list.lastIndexOf(value);
        }
    }

    public boolean add(<type> newItem)
    {
        synchronized (this.lock)
        {
            return this.list.add(newItem);
        }
    }

    public boolean addAll(<type>... source)
    {
        synchronized (this.lock)
        {
            return this.list.addAll(source);
        }
    }

    public boolean addAll(<name>Iterable source)
    {
        synchronized (this.lock)
        {
            return this.list.addAll(source);
        }
    }

    public void addAtIndex(int index, <type> element)
    {
        synchronized (this.lock)
        {
            this.list.addAtIndex(index, element);
        }
    }

    public boolean addAllAtIndex(int index, <type>... source)
    {
        synchronized (this.lock)
        {
            return this.list.addAllAtIndex(index, source);
        }
    }

    public boolean addAllAtIndex(int index, <name>Iterable source)
    {
        synchronized (this.lock)
        {
            return this.list.addAllAtIndex(index, source);
        }
    }

    public boolean remove(<type> value)
    {
        synchronized (this.lock)
        {
            return this.list.remove(value);
        }
    }

    public boolean removeAll(<name>Iterable source)
    {
        synchronized (this.lock)
        {
            return this.list.removeAll(source);
        }
    }

    public boolean removeAll(<type>... source)
    {
        synchronized (this.lock)
        {
            return this.list.removeAll(source);
        }
    }

    public <type> removeAtIndex(int index)
    {
        synchronized (this.lock)
        {
            return this.list.removeAtIndex(index);
        }
    }

    public <type> set(int index, <type> element)
    {
        synchronized (this.lock)
        {
            return this.list.set(index, element);
        }
    }

    public Synchronized<name>List with(<type> element)
    {
        synchronized (this.lock)
        {
            this.list.add(element);
        }
        return this;
    }

    public Synchronized<name>List without(<type> element)
    {
        synchronized (this.lock)
        {
            this.list.remove(element);
        }
        return this;
    }

    public Synchronized<name>List withAll(<name>Iterable elements)
    {
        synchronized (this.lock)
        {
            this.list.addAll(elements.toArray());
        }
        return this;
    }

    public Synchronized<name>List withoutAll(<name>Iterable elements)
    {
        synchronized (this.lock)
        {
            this.list.removeAll(elements);
        }
        return this;
    }

    public <name>Iterator <type>Iterator()
    {
        return this.list.<type>Iterator();  // this must be manually synchronized by the developer
    }

    public void forEach(<name>Procedure procedure)
    {
        synchronized (this.lock)
        {
            this.list.forEach(procedure);
        }
    }

    public int count(<name>Predicate predicate)
    {
        synchronized (this.lock)
        {
            return this.list.count(predicate);
        }
    }

    public boolean anySatisfy(<name>Predicate predicate)
    {
        synchronized (this.lock)
        {
            return this.list.anySatisfy(predicate);
        }
    }

    public boolean allSatisfy(<name>Predicate predicate)
    {
        synchronized (this.lock)
        {
            return this.list.allSatisfy(predicate);
        }
    }

    public boolean noneSatisfy(<name>Predicate predicate)
    {
        synchronized (this.lock)
        {
            return this.list.noneSatisfy(predicate);
        }
    }

    public Mutable<name>List select(<name>Predicate predicate)
    {
        synchronized (this.lock)
        {
            return this.list.select(predicate);
        }
    }

    public Mutable<name>List reject(<name>Predicate predicate)
    {
        synchronized (this.lock)
        {
            return this.list.reject(predicate);
        }
    }

    public <type> detectIfNone(<name>Predicate predicate, <type> ifNone)
    {
        synchronized (this.lock)
        {
            return this.list.detectIfNone(predicate, ifNone);
        }
    }

    public \<V> MutableList\<V> collect(<name>ToObjectFunction\<? extends V> function)
    {
        synchronized (this.lock)
        {
            return this.list.collect(function);
        }
    }

    <(arithmeticMethods.(type))(name, type)>
    public <type>[] toArray()
    {
        synchronized (this.lock)
        {
            return this.list.toArray();
        }
    }

    @Override
    public boolean equals(Object otherList)
    {
        synchronized (this.lock)
        {
            return this.list.equals(otherList);
        }
    }

    @Override
    public int hashCode()
    {
        synchronized (this.lock)
        {
            return this.list.hashCode();
        }
    }

    @Override
    public String toString()
    {
        synchronized (this.lock)
        {
            return this.list.toString();
        }
    }

    public String makeString()
    {
        synchronized (this.lock)
        {
            return this.list.makeString();
        }
    }

    public String makeString(String separator)
    {
        synchronized (this.lock)
        {
            return this.list.makeString(separator);
        }
    }

    public String makeString(String start, String separator, String end)
    {
        synchronized (this.lock)
        {
            return this.list.makeString(start, separator, end);
        }
    }

    public void appendString(Appendable appendable)
    {
        synchronized (this.lock)
        {
            this.list.appendString(appendable);
        }
    }

    public void appendString(Appendable appendable, String separator)
    {
        synchronized (this.lock)
        {
            this.list.appendString(appendable, separator);
        }
    }

    public void appendString(
            Appendable appendable,
            String start,
            String separator,
            String end)
    {
        synchronized (this.lock)
        {
            this.list.appendString(appendable, start, separator, end);
        }
    }

    public Mutable<name>List toList()
    {
        synchronized (this.lock)
        {
            return this.list.toList();
        }
    }

    public Mutable<name>Set toSet()
    {
        synchronized (this.lock)
        {
            return this.list.toSet();
        }
    }

    public Mutable<name>Bag toBag()
    {
        synchronized (this.lock)
        {
            return this.list.toBag();
        }
    }

    public Lazy<name>Iterable asLazy()
    {
        synchronized (this.lock)
        {
            return new Lazy<name>IterableAdapter(this);
        }
    }

    public Mutable<name>List asUnmodifiable()
    {
        throw new UnsupportedOperationException("asUnmodifiable not implemented yet");
    }

    public Mutable<name>List asSynchronized()
    {
        return this;
    }

    public Immutable<name>List toImmutable()
    {
        throw new UnsupportedOperationException("toImmutable not implemented yet");
    }

    public Mutable<name>List reverseThis()
    {
        synchronized (this.lock)
        {
            this.list.reverseThis();
        }
        return this;
    }

    public Mutable<name>List toReversed()
    {
        synchronized (this.lock)
        {
            return this.list.toReversed();
        }
    }
}

>>

arithmeticMethods ::= [
    "byte": "allMethods",
    "short": "allMethods",
    "char": "allMethods",
    "int": "allMethods",
    "long": "allMethods",
    "float": "allMethods",
    "double": "allMethods",
    "boolean": "noMethods"
    ]

allMethods(name, type) ::=<<
public <wideType.(type)> sum()
{
    synchronized (this.lock)
    {
        return this.list.sum();
    }
}

public <type> max()
{
    synchronized (this.lock)
    {
        return this.list.max();
    }
}

public <type> min()
{
    synchronized (this.lock)
    {
        return this.list.min();
    }
}

public <type> minIfEmpty(<type> defaultValue)
{
    synchronized (this.lock)
    {
        return this.list.minIfEmpty(defaultValue);
    }
}

public <type> maxIfEmpty(<type> defaultValue)
{
    synchronized (this.lock)
    {
        return this.list.maxIfEmpty(defaultValue);
    }
}

public double average()
{
    synchronized (this.lock)
    {
        return this.list.average();
    }
}

public double median()
{
    synchronized (this.lock)
    {
        return this.list.median();
    }
}

public Mutable<name>List sortThis()
{
    synchronized (this.lock)
    {
        this.list.sortThis();
    }
    return this;
}

public Mutable<name>List toSortedList()
{
    synchronized (this.lock)
    {
        return this.list.toSortedList();
    }
}

public <type>[] toSortedArray()
{
    synchronized (this.lock)
    {
        return this.list.toSortedArray();
    }
}

>>

noMethods(name, type) ::= ""
