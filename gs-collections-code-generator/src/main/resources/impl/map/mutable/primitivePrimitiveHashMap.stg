import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

hasTwoPrimitives() ::= "true"

skipBoolean() ::= "true"

targetPath() ::= "com/gs/collections/impl/map/mutable/primitive"

fileName(primitive1, primitive2, sameTwoPrimitives) ::= "<primitive1.name><primitive2.name>HashMap"

class(primitive1, primitive2, sameTwoPrimitives) ::= <<
<if(!sameTwoPrimitives)>
<body(
    type1 = primitive1.type,
    type2 = primitive2.type,
    name1 = primitive1.name,
    name2 = primitive2.name,
    keyArray = "keys",
    valueArray = "values",
    increment = "++",
    valueIndex = "")>
<else>
<body(
    type1 = primitive1.type,
    type2 = primitive2.type,
    name1 = primitive1.name,
    name2 = primitive2.name,
    keyArray = "keysValues",
    valueArray = "keysValues",
    increment = " += 2",
    valueIndex = " + 1")>
<endif>
>>

body(type1, type2, name1, name2, keyArray, valueArray, increment, valueIndex) ::= <<
<copyright()>

package com.gs.collections.impl.map.mutable.primitive;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Arrays;
import java.util.Iterator;
import java.util.NoSuchElementException;

import com.gs.collections.api.<name1>Iterable;
import com.gs.collections.api.Lazy<name1>Iterable;
<if(!sameTwoPrimitives)>import com.gs.collections.api.Lazy<name2>Iterable;<endif>
<if(!sameTwoPrimitives)>import com.gs.collections.api.<name2>Iterable;<endif>
import com.gs.collections.api.RichIterable;
import com.gs.collections.api.bag.primitive.Mutable<name1>Bag;
<if(!sameTwoPrimitives)>import com.gs.collections.api.bag.primitive.Mutable<name2>Bag;<endif>
<if(!sameTwoPrimitives)>import com.gs.collections.api.block.function.primitive.<name1>ToObjectFunction;<endif>
<if(!sameTwoPrimitives)>import com.gs.collections.api.block.function.primitive.<name1>To<name2>Function;<endif>
import com.gs.collections.api.block.function.primitive.<name2>Function;
import com.gs.collections.api.block.function.primitive.<name2>Function0;
import com.gs.collections.api.block.function.primitive.<name2>To<name2>Function;
import com.gs.collections.api.block.function.primitive.<name2>ToObjectFunction;
import com.gs.collections.api.block.function.primitive.Object<name2>ToObjectFunction;
<if(!sameTwoPrimitives)>import com.gs.collections.api.block.function.primitive.Object<name1>ToObjectFunction;<endif>
import com.gs.collections.api.block.predicate.primitive.<name1><name2>Predicate;
import com.gs.collections.api.block.predicate.primitive.<name1>Predicate;
<if(!sameTwoPrimitives)>import com.gs.collections.api.block.predicate.primitive.<name2>Predicate;<endif>
import com.gs.collections.api.block.procedure.Procedure;
import com.gs.collections.api.block.procedure.Procedure2;
import com.gs.collections.api.block.procedure.primitive.<name1>Procedure;
import com.gs.collections.api.block.procedure.primitive.<name1><name2>Procedure;
<if(!sameTwoPrimitives)>import com.gs.collections.api.block.procedure.primitive.<name2>Procedure;<endif>
import com.gs.collections.api.block.procedure.primitive.ObjectIntProcedure;
import com.gs.collections.api.collection.MutableCollection;
import com.gs.collections.api.collection.primitive.Immutable<name2>Collection;
import com.gs.collections.api.collection.primitive.Mutable<name2>Collection;
import com.gs.collections.api.iterator.<name1>Iterator;
import com.gs.collections.api.iterator.Mutable<name1>Iterator;
<if(!sameTwoPrimitives)>import com.gs.collections.api.iterator.<name2>Iterator;<endif>
<if(!sameTwoPrimitives)>import com.gs.collections.api.iterator.Mutable<name2>Iterator;<endif>
import com.gs.collections.api.list.primitive.Mutable<name1>List;
<if(!sameTwoPrimitives)>import com.gs.collections.api.list.primitive.Mutable<name2>List;<endif>
import com.gs.collections.api.map.primitive.<name1><name2>Map;
import com.gs.collections.api.map.primitive.Immutable<name1><name2>Map;
import com.gs.collections.api.map.primitive.Mutable<name1><name2>Map;
import com.gs.collections.api.set.MutableSet;
import com.gs.collections.api.set.primitive.<name1>Set;
<if(!sameTwoPrimitives)>import com.gs.collections.api.set.primitive.<name2>Set;<endif>
import com.gs.collections.api.set.primitive.Immutable<name1>Set;
import com.gs.collections.api.set.primitive.Mutable<name1>Set;
import com.gs.collections.api.tuple.primitive.<name1><name2>Pair;
<if(!sameTwoPrimitives)>import com.gs.collections.api.set.primitive.Mutable<name2>Set;<endif>
import com.gs.collections.impl.bag.mutable.primitive.<name1>HashBag;
<if(!sameTwoPrimitives)>import com.gs.collections.impl.bag.mutable.primitive.<name2>HashBag;<endif>
import com.gs.collections.impl.collection.mutable.primitive.Synchronized<name2>Collection;
import com.gs.collections.impl.collection.mutable.primitive.Unmodifiable<name2>Collection;
import com.gs.collections.impl.factory.Sets;
import com.gs.collections.impl.factory.primitive.<name2>Lists;
import com.gs.collections.impl.factory.primitive.<name1><name2>Maps;
import com.gs.collections.impl.factory.primitive.<name1>Sets;
import com.gs.collections.impl.iterator.Unmodifiable<name1>Iterator;
import com.gs.collections.impl.lazy.AbstractLazyIterable;
import com.gs.collections.impl.lazy.primitive.AbstractLazy<name1>Iterable;
import com.gs.collections.impl.lazy.primitive.Lazy<name2>IterableAdapter;
<if(!sameTwoPrimitives)>import com.gs.collections.impl.lazy.primitive.Lazy<name1>IterableAdapter;<endif>
import com.gs.collections.impl.list.mutable.FastList;
import com.gs.collections.impl.list.mutable.primitive.<name1>ArrayList;
<if(!sameTwoPrimitives)>import com.gs.collections.impl.list.mutable.primitive.<name2>ArrayList;<endif>
import com.gs.collections.impl.set.mutable.primitive.<name1>HashSet;
import com.gs.collections.impl.set.mutable.primitive.Synchronized<name1>Set;
import com.gs.collections.impl.set.mutable.primitive.Unmodifiable<name1>Set;
<if(!sameTwoPrimitives)>import com.gs.collections.impl.set.mutable.primitive.<name2>HashSet;<endif>
import com.gs.collections.impl.tuple.primitive.PrimitiveTuples;

/**
 * This file was automatically generated from template file primitivePrimitiveHashMap.stg.
 *
 * @since 3.0.
 */
public class <name1><name2>HashMap implements Mutable<name1><name2>Map, Externalizable
{
    static final <type2> EMPTY_VALUE = <(literal.(type2))("0")>;
    private static final long serialVersionUID = 1L;
    private static final <type1> EMPTY_KEY = <(literal.(type1))("0")>;
    private static final <type1> REMOVED_KEY = <(literal.(type1))("1")>;

    private static final int DEFAULT_INITIAL_CAPACITY = 8;

<if(!sameTwoPrimitives)>
    private <type1>[] keys;
    private <type2>[] values;
<else>
    private <type1>[] keysValues;
<endif>

    private int occupiedWithData;
    private int occupiedWithSentinels;

    private SentinelValues sentinelValues;

    private boolean copyKeysOnWrite = false;

    public <name1><name2>HashMap()
    {
        this.allocateTable(DEFAULT_INITIAL_CAPACITY \<\< 1);
    }

    public <name1><name2>HashMap(int initialCapacity)
    {
        if (initialCapacity \< 0)
        {
            throw new IllegalArgumentException("initial capacity cannot be less than 0");
        }
        int capacity = this.smallestPowerOfTwoGreaterThan(initialCapacity \<\< 1);
        this.allocateTable(capacity);
    }

    private int smallestPowerOfTwoGreaterThan(int n)
    {
        return n > 1 ? Integer.highestOneBit(n - 1) \<\< 1 : 1;
    }

    public <name1><name2>HashMap(<name1><name2>Map map)
    {
        this(Math.max(map.size(), DEFAULT_INITIAL_CAPACITY));
        this.putAll(map);
    }

    public static <name1><name2>HashMap newWithKeysValues(<type1> key1, <type2> value1)
    {
        return new <name1><name2>HashMap(1).withKeyValue(key1, value1);
    }

    <newWithKeysValues(["1", "2"])>

    <newWithKeysValues(["1", "2", "3"])>

    <newWithKeysValues(["1", "2", "3", "4"])>

    @Override
    public boolean equals(Object obj)
    {
        if (this == obj)
        {
            return true;
        }

        if (!(obj instanceof <name1><name2>Map))
        {
            return false;
        }

        <name1><name2>Map other = (<name1><name2>Map) obj;

        if (this.size() != other.size())
        {
            return false;
        }

        if (this.sentinelValues == null)
        {
            if (other.containsKey(EMPTY_KEY) || other.containsKey(REMOVED_KEY))
            {
                return false;
            }
        }
        else
        {
            if (this.sentinelValues.containsZeroKey && (!other.containsKey(EMPTY_KEY) || <(notEquals.(type2))("this.sentinelValues.zeroValue", "other.getOrThrow(EMPTY_KEY)")>))
            {
                return false;
            }

            if (this.sentinelValues.containsOneKey && (!other.containsKey(REMOVED_KEY) || <(notEquals.(type2))("this.sentinelValues.oneValue", "other.getOrThrow(REMOVED_KEY)")>))
            {
                return false;
            }
        }
        for (int i = 0; i \< this.<keyArray>.length; i<increment>)
        {
            <type1> key = this.<keyArray>[i];
            if (isNonSentinel(key) && (!other.containsKey(key) || <(notEquals.(type2))({this.<valueArray>[i<valueIndex>]}, "other.getOrThrow(key)")>))
            {
                return false;
            }
        }
        return true;
    }

    @Override
    public int hashCode()
    {
        int result = 0;

        <forEachKeyValue(template = {result += <(hashCode.(type1))({<key>})> ^ <(hashCode.(type2))({<value>})>})>

        return result;
    }

    @Override
    public String toString()
    {
        StringBuilder appendable = new StringBuilder();

        appendable.append("{");

        boolean first = true;

        if (this.sentinelValues != null)
        {
            if (this.sentinelValues.containsZeroKey)
            {
                appendable.append(String.valueOf(EMPTY_KEY)).append("=").append(String.valueOf(this.sentinelValues.zeroValue));
                first = false;
            }
            if (this.sentinelValues.containsOneKey)
            {
                if (!first)
                {
                    appendable.append(", ");
                }
                appendable.append(String.valueOf(REMOVED_KEY)).append("=").append(String.valueOf(this.sentinelValues.oneValue));
                first = false;
            }
        }
        for (int i = 0; i \< this.<keyArray>.length; i<increment>)
        {
            <type1> key = this.<keyArray>[i];
            if (isNonSentinel(key))
            {
                if (!first)
                {
                    appendable.append(", ");
                }
                appendable.append(String.valueOf(key)).append("=").append(String.valueOf(this.<valueArray>[i<valueIndex>]));
                first = false;
            }
        }
        appendable.append("}");

        return appendable.toString();
    }

    public int size()
    {
        return this.occupiedWithData + (this.sentinelValues == null ? 0 : this.sentinelValues.size());
    }

    public boolean isEmpty()
    {
        return this.occupiedWithData == 0 && (this.sentinelValues == null || this.sentinelValues.size() == 0);
    }

    public boolean notEmpty()
    {
        return this.occupiedWithData != 0 || (this.sentinelValues != null && this.sentinelValues.size() != 0);
    }

    public String makeString()
    {
        return this.makeString(", ");
    }

    public String makeString(String separator)
    {
        return this.makeString("", separator, "");
    }

    public String makeString(String start, String separator, String end)
    {
        Appendable stringBuilder = new StringBuilder();
        this.appendString(stringBuilder, start, separator, end);
        return stringBuilder.toString();
    }

    public void appendString(Appendable appendable)
    {
        this.appendString(appendable, ", ");
    }

    public void appendString(Appendable appendable, String separator)
    {
        this.appendString(appendable, "", separator, "");
    }

    public void appendString(Appendable appendable, String start, String separator, String end)
    {
        try
        {
            appendable.append(start);

            boolean first = true;

            if (this.sentinelValues != null)
            {
                if (this.sentinelValues.containsZeroKey)
                {
                    appendable.append(String.valueOf(this.sentinelValues.zeroValue));
                    first = false;
                }
                if (this.sentinelValues.containsOneKey)
                {
                    if (!first)
                    {
                        appendable.append(separator);
                    }
                    appendable.append(String.valueOf(this.sentinelValues.oneValue));
                    first = false;
                }
            }
            for (int i = 0; i \< this.<keyArray>.length; i<increment>)
            {
                <type1> key = this.<keyArray>[i];
                if (isNonSentinel(key))
                {
                    if (!first)
                    {
                        appendable.append(separator);
                    }
                    appendable.append(String.valueOf(this.<valueArray>[i<valueIndex>]));
                    first = false;
                }
            }
            appendable.append(end);
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }

    public Mutable<name2>Iterator <type2>Iterator()
    {
        return new Internal<name2>Iterator();
    }

    public <type2>[] toArray()
    {
        <type2>[] array = new <type2>[this.size()];
        int index = 0;

        <forEachValue(template = {array[index] = <value>;<\n>index++})>

        return array;
    }

    public boolean contains(<type2> value)
    {
        return this.containsValue(value);
    }

    public boolean containsAll(<type2>... source)
    {
        for (<type2> each : source)
        {
            if (!this.contains(each))
            {
                return false;
            }
        }
        return true;
    }

    public boolean containsAll(<name2>Iterable source)
    {
        return source.allSatisfy(new <name2>Predicate()
        {
            public boolean accept(<type2> value)
            {
                return <name1><name2>HashMap.this.contains(value);
            }
        });
    }

    public void forEach(<name2>Procedure procedure)
    {
        this.forEachValue(procedure);
    }

    public Mutable<name2>Collection select(<name2>Predicate predicate)
    {
        <name2>ArrayList result = new <name2>ArrayList();

        <forEachValueSatisfying(template = {result.add(<value>)})>

        return result;
    }

    public Mutable<name2>Collection reject(<name2>Predicate predicate)
    {
        <name2>ArrayList result = new <name2>ArrayList();
        if (this.sentinelValues != null)
        {
            if (this.sentinelValues.containsZeroKey && !predicate.accept(this.sentinelValues.zeroValue))
            {
                result.add(this.sentinelValues.zeroValue);
            }
            if (this.sentinelValues.containsOneKey && !predicate.accept(this.sentinelValues.oneValue))
            {
                result.add(this.sentinelValues.oneValue);
            }
        }
        for (int i = 0; i \< this.<keyArray>.length; i<increment>)
        {
            if (isNonSentinel(this.<keyArray>[i]) && !predicate.accept(this.<valueArray>[i<valueIndex>]))
            {
                result.add(this.<valueArray>[i<valueIndex>]);
            }
        }
        return result;
    }

    public \<V> MutableCollection\<V> collect(<name2>ToObjectFunction\<? extends V> function)
    {
        FastList\<V> target = FastList.newList(this.size());
        if (this.sentinelValues != null)
        {
            if (this.sentinelValues.containsZeroKey)
            {
                target.add(function.valueOf(this.sentinelValues.zeroValue));
            }
            if (this.sentinelValues.containsOneKey)
            {
                target.add(function.valueOf(this.sentinelValues.oneValue));
            }
        }
        for (int i = 0; i \< this.<keyArray>.length; i<increment>)
        {
            if (isNonSentinel(this.<keyArray>[i]))
            {
                target.add(function.valueOf(this.<valueArray>[i<valueIndex>]));
            }
        }
        return target;
    }

    public <type2> detectIfNone(<name2>Predicate predicate, <type2> value)
    {
        <forEachValueSatisfying(template = {return <value>})>
        return value;
    }

    public int count(<name2>Predicate predicate)
    {
        int count = 0;
        <forEachValueSatisfying(template = {count++})>
        return count;
    }

    public boolean anySatisfy(<name2>Predicate predicate)
    {
        <forEachValueSatisfying(template = {return true})>
        return false;
    }

    public boolean allSatisfy(<name2>Predicate predicate)
    {
        if (this.sentinelValues != null)
        {
            if (this.sentinelValues.containsZeroKey && !predicate.accept(this.sentinelValues.zeroValue))
            {
                return false;
            }
            if (this.sentinelValues.containsOneKey && !predicate.accept(this.sentinelValues.oneValue))
            {
                return false;
            }
        }
        for (int i = 0; i \< this.<keyArray>.length; i<increment>)
        {
            if (isNonSentinel(this.<keyArray>[i]) && !predicate.accept(this.<valueArray>[i<valueIndex>]))
            {
                return false;
            }
        }
        return true;
    }

    public boolean noneSatisfy(<name2>Predicate predicate)
    {
        if (this.sentinelValues != null)
        {
            if (this.sentinelValues.containsZeroKey && predicate.accept(this.sentinelValues.zeroValue))
            {
                return false;
            }
            if (this.sentinelValues.containsOneKey && predicate.accept(this.sentinelValues.oneValue))
            {
                return false;
            }
        }
        for (int i = 0; i \< this.<keyArray>.length; i<increment>)
        {
            if (isNonSentinel(this.<keyArray>[i]) && predicate.accept(this.<valueArray>[i<valueIndex>]))
            {
                return false;
            }
        }
        return true;
    }

    public \<V> V injectInto(V injectedValue, Object<name2>ToObjectFunction\<? super V, ? extends V> function)
    {
        V result = injectedValue;

        <forEachKeyValue(template = {result = function.valueOf(result, <value>)})>

        return result;
    }

    public Mutable<name2>List toList()
    {
        return <name2>ArrayList.newList(this);
    }

    public Mutable<name2>Set toSet()
    {
        return <name2>HashSet.newSet(this);
    }

    public Mutable<name2>Bag toBag()
    {
        return <name2>HashBag.newBag(this);
    }

    public Lazy<name2>Iterable asLazy()
    {
        return new Lazy<name2>IterableAdapter(this);
    }

    public void clear()
    {
        this.sentinelValues = null;
        this.occupiedWithData = 0;
        this.occupiedWithSentinels = 0;
        if (this.copyKeysOnWrite)
        {
            this.copyKeys();
        }
        <if(!sameTwoPrimitives)>
        Arrays.fill(this.<keyArray>, EMPTY_KEY);
        Arrays.fill(this.<valueArray>, EMPTY_VALUE);
        <else>
        Arrays.fill(this.keysValues, <(literal.(type1))("0")>);
        <endif>
    }

    public void put(<type1> key, <type2> value)
    {
        if (isEmptyKey(key))
        {
            this.putForEmptySentinel(value);
            return;
        }

        if (isRemovedKey(key))
        {
            this.putForRemovedSentinel(value);
            return;
        }

        int index = this.probe(key);
        <type1> keyAtindex = this.<keyArray>[index];
        if (keyAtindex != key)
        {
            this.addKeyValueAtIndex(key, value, index);
        }
        else
        {
            this.<valueArray>[index<valueIndex>] = value;
        }
    }

    private void putForRemovedSentinel(<type2> value)
    {
        if (this.sentinelValues == null)
        {
            this.sentinelValues = new SentinelValues();
        }
        this.addRemovedKeyValue(value);
        return;
    }

    private void putForEmptySentinel(<type2> value)
    {
        if (this.sentinelValues == null)
        {
            this.sentinelValues = new SentinelValues();
        }
        this.addEmptyKeyValue(value);
        return;
    }

    public void putAll(<name1><name2>Map map)
    {
        map.forEachKeyValue(new <name1><name2>Procedure()
        {
            public void value(<type1> key, <type2> value)
            {
                <name1><name2>HashMap.this.put(key, value);
            }
        });
    }

    public void removeKey(<type1> key)
    {
        if (isEmptyKey(key))
        {
            if (this.sentinelValues == null || !this.sentinelValues.containsZeroKey)
            {
                return;
            }
            this.removeEmptyKey();
            return;
        }
        if (isRemovedKey(key))
        {
            if (this.sentinelValues == null || !this.sentinelValues.containsOneKey)
            {
                return;
            }
            this.removeRemovedKey();
            return;
        }
        int index = this.probe(key);
        if (<(equals.(type1))({this.<keyArray>[index]}, "key")>)
        {
            this.removeKeyAtIndex(index);
        }
    }

    public void remove(<type1> key)
    {
        this.removeKey(key);
    }

    public <type2> removeKeyIfAbsent(<type1> key, <type2> value)
    {
        if (isEmptyKey(key))
        {
            if (this.sentinelValues == null || !this.sentinelValues.containsZeroKey)
            {
                return value;
            }
            <type2> oldValue = this.sentinelValues.zeroValue;
            this.removeEmptyKey();
            return oldValue;
        }
        if (isRemovedKey(key))
        {
            if (this.sentinelValues == null || !this.sentinelValues.containsOneKey)
            {
                return value;
            }
            <type2> oldValue = this.sentinelValues.oneValue;
            this.removeRemovedKey();
            return oldValue;
        }
        int index = this.probe(key);
        if (<(equals.(type1))({this.<keyArray>[index]}, "key")>)
        {
            <type2> oldValue = this.<valueArray>[index<valueIndex>];
            this.removeKeyAtIndex(index);
            return oldValue;
        }
        return value;
    }

    public <type2> getIfAbsentPut(<type1> key, <type2> value)
    {
        <getIfAbsentPut("")>
    }

    public <type2> getIfAbsentPut(<type1> key, <name2>Function0 function)
    {
        <getIfAbsentPut({<type2> value = function.value();})>
    }

    public \<P> <type2> getIfAbsentPutWith(<type1> key, <name2>Function\<? super P> function, P parameter)
    {
        <getIfAbsentPut({<type2> value = function.<type2>ValueOf(parameter);})>
    }

    public <type2> getIfAbsentPutWithKey(<type1> key, <name1>To<name2>Function function)
    {
        <getIfAbsentPut({<type2> value = function.valueOf(key);})>
    }

    public <type2> addToValue(<type1> key, <type2> toBeAdded)
    {
        if (isEmptyKey(key))
        {
            if (this.sentinelValues == null)
            {
                this.sentinelValues = new SentinelValues();
                this.addEmptyKeyValue(toBeAdded);
            }
            else if (this.sentinelValues.containsZeroKey)
            {
                this.sentinelValues.zeroValue += toBeAdded;
            }
            else
            {
                this.addEmptyKeyValue(toBeAdded);
            }
            return this.sentinelValues.zeroValue;
        }
        if (isRemovedKey(key))
        {
            if (this.sentinelValues == null)
            {
                this.sentinelValues = new SentinelValues();
                this.addRemovedKeyValue(toBeAdded);
            }
            else if (this.sentinelValues.containsOneKey)
            {
                this.sentinelValues.oneValue += toBeAdded;
            }
            else
            {
                this.addRemovedKeyValue(toBeAdded);
            }
            return this.sentinelValues.oneValue;
        }
        int index = this.probe(key);
        if (<(equals.(type1))({this.<keyArray>[index]}, "key")>)
        {
            this.<valueArray>[index<valueIndex>] += toBeAdded;
            return this.<valueArray>[index<valueIndex>];
        }
        this.addKeyValueAtIndex(key, toBeAdded, index);
        return this.<valueArray>[index<valueIndex>];
    }

    private void addKeyValueAtIndex(<type1> key, <type2> value, int index)
    {
        if (<(equals.(type1))({this.<keyArray>[index]}, "REMOVED_KEY")>)
        {
            this.occupiedWithSentinels--;
        }
        if (this.copyKeysOnWrite)
        {
            this.copyKeys();
        }
        this.<keyArray>[index] = key;
        this.<valueArray>[index<valueIndex>] = value;
        this.occupiedWithData++;
        if (this.occupiedWithData > this.maxOccupiedWithData())
        {
            this.rehashAndGrow();
        }
    }

    private void removeKeyAtIndex(int index)
    {
        if (this.copyKeysOnWrite)
        {
            this.copyKeys();
        }
        this.<keyArray>[index] = REMOVED_KEY;
        this.<valueArray>[index<valueIndex>] = EMPTY_VALUE;
        this.occupiedWithData--;
        this.occupiedWithSentinels++;
        if (this.occupiedWithSentinels > this.maxOccupiedWithSentinels())
        {
            this.rehash();
        }
    }

    private void copyKeys()
    {
        <type1>[] copy = new <type1>[this.<keyArray>.length];
        System.arraycopy(this.<keyArray>, 0, copy, 0, this.<keyArray>.length);
        this.<keyArray> = copy;
        this.copyKeysOnWrite = false;
    }

    private void addEmptyKeyValue(<type2> value)
    {
        this.sentinelValues.containsZeroKey = true;
        this.sentinelValues.zeroValue = value;
    }

    private void removeEmptyKey()
    {
        if (this.sentinelValues.containsOneKey)
        {
            this.sentinelValues.containsZeroKey = false;
            this.sentinelValues.zeroValue = EMPTY_VALUE;
        }
        else
        {
            this.sentinelValues = null;
        }
    }

    private void addRemovedKeyValue(<type2> value)
    {
        this.sentinelValues.containsOneKey = true;
        this.sentinelValues.oneValue = value;
    }

    private void removeRemovedKey()
    {
        if (this.sentinelValues.containsZeroKey)
        {
            this.sentinelValues.containsOneKey = false;
            this.sentinelValues.oneValue = EMPTY_VALUE;
        }
        else
        {
            this.sentinelValues = null;
        }
    }

    public <type2> updateValue(<type1> key, <type2> initialValueIfAbsent, <name2>To<name2>Function function)
    {
        if (isEmptyKey(key))
        {
            if (this.sentinelValues == null)
            {
                this.sentinelValues = new SentinelValues();
                this.addEmptyKeyValue(function.valueOf(initialValueIfAbsent));
            }
            else if (this.sentinelValues.containsZeroKey)
            {
                this.sentinelValues.zeroValue = function.valueOf(this.sentinelValues.zeroValue);
            }
            else
            {
                this.addEmptyKeyValue(function.valueOf(initialValueIfAbsent));
            }
            return this.sentinelValues.zeroValue;
        }
        if (isRemovedKey(key))
        {
            if (this.sentinelValues == null)
            {
                this.sentinelValues = new SentinelValues();
                this.addRemovedKeyValue(function.valueOf(initialValueIfAbsent));
            }
            else if (this.sentinelValues.containsOneKey)
            {
                this.sentinelValues.oneValue = function.valueOf(this.sentinelValues.oneValue);
            }
            else
            {
                this.addRemovedKeyValue(function.valueOf(initialValueIfAbsent));
            }
            return this.sentinelValues.oneValue;
        }
        int index = this.probe(key);
        if (<(equals.(type1))({this.<keyArray>[index]}, "key")>)
        {
            this.<valueArray>[index<valueIndex>] = function.valueOf(this.<valueArray>[index<valueIndex>]);
            return this.<valueArray>[index<valueIndex>];
        }
        <type2> value = function.valueOf(initialValueIfAbsent);
        this.addKeyValueAtIndex(key, value, index);
        return value;
    }

    public <name1><name2>HashMap withKeyValue(<type1> key1, <type2> value1)
    {
        this.put(key1, value1);
        return this;
    }

    <withKeysValues(["1", "2"])>

    <withKeysValues(["1", "2", "3"])>

    <withKeysValues(["1", "2", "3", "4"])>

    public <name1><name2>HashMap withoutKey(<type1> key)
    {
        this.removeKey(key);
        return this;
    }

    public <name1><name2>HashMap withoutAllKeys(<name1>Iterable keys)
    {
        keys.forEach(new <name1>Procedure()
        {
            public void value(<type1> key)
            {
                <name1><name2>HashMap.this.removeKey(key);
            }
        });
        return this;
    }

    public Mutable<name1><name2>Map asUnmodifiable()
    {
        return new Unmodifiable<name1><name2>Map(this);
    }

    public Mutable<name1><name2>Map asSynchronized()
    {
        return new Synchronized<name1><name2>Map(this);
    }

    public Immutable<name1><name2>Map toImmutable()
    {
        return <name1><name2>Maps.immutable.ofAll(this);
    }

    public <type2> get(<type1> key)
    {
        return this.getIfAbsent(key, EMPTY_VALUE);
    }

    public <type2> getIfAbsent(<type1> key, <type2> ifAbsent)
    {
        if (isEmptyKey(key))
        {
            if (this.sentinelValues == null || !this.sentinelValues.containsZeroKey)
            {
                return ifAbsent;
            }
            return this.sentinelValues.zeroValue;
        }
        if (isRemovedKey(key))
        {
            if (this.sentinelValues == null || !this.sentinelValues.containsOneKey)
            {
                return ifAbsent;
            }
            return this.sentinelValues.oneValue;
        }
        int index = this.probe(key);
        if (<(equals.(type1))({this.<keyArray>[index]}, "key")>)
        {
            return this.<valueArray>[index<valueIndex>];
        }
        return ifAbsent;
    }

    public <type2> getOrThrow(<type1> key)
    {
        if (isEmptyKey(key))
        {
            if (this.sentinelValues == null || !this.sentinelValues.containsZeroKey)
            {
                throw new IllegalStateException("Key " + key + " not present.");
            }
            return this.sentinelValues.zeroValue;
        }
        if (isRemovedKey(key))
        {
            if (this.sentinelValues == null || !this.sentinelValues.containsOneKey)
            {
                throw new IllegalStateException("Key " + key + " not present.");
            }
            return this.sentinelValues.oneValue;
        }
        int index = this.probe(key);
        if (isNonSentinel(this.<keyArray>[index]))
        {
            return this.<valueArray>[index<valueIndex>];
        }
        throw new IllegalStateException("Key " + key + " not present.");
    }

    public boolean containsKey(<type1> key)
    {
        if (isEmptyKey(key))
        {
            return this.sentinelValues != null && this.sentinelValues.containsZeroKey;
        }
        if (isRemovedKey(key))
        {
            return this.sentinelValues != null && this.sentinelValues.containsOneKey;
        }
        return <(equals.(type1))({this.<keyArray>[this.probe(key)]}, "key")>;
    }

    public boolean containsValue(<type2> value)
    {
        if (this.sentinelValues != null && this.sentinelValues.containsValue(value))
        {
            return true;
        }
        for (int i = 0; i \< this.<valueArray>.length; i<increment>)
        {
            if (isNonSentinel(this.<keyArray>[i]) && <(equals.(type2))({this.<valueArray>[i<valueIndex>]}, "value")>)
            {
                return true;
            }
        }
        return false;
    }

    public void forEachValue(<name2>Procedure procedure)
    {
        <forEachValue(template = {procedure.value(<value>)})>
    }

    public void forEachKey(<name1>Procedure procedure)
    {
        <forEachKey(template = {procedure.value(<key>)})>
    }

    public void forEachKeyValue(<name1><name2>Procedure procedure)
    {
        <forEachKeyValue(template = {procedure.value(<key>, <value>)})>
    }

    public Lazy<name1>Iterable keysView()
    {
        return new KeysView();
    }

    public RichIterable\<<name1><name2>Pair> keyValuesView()
    {
        return new KeyValuesView();
    }

    public <name1><name2>HashMap select(<name1><name2>Predicate predicate)
    {
        <name1><name2>HashMap result = new <name1><name2>HashMap();

        <forEachKeyValueSatisfying(template = {result.put(<key>, <value>)})>

        return result;
    }

    public <name1><name2>HashMap reject(<name1><name2>Predicate predicate)
    {
        <name1><name2>HashMap result = new <name1><name2>HashMap();

        if (this.sentinelValues != null)
        {
            if (this.sentinelValues.containsZeroKey && !predicate.accept(EMPTY_KEY, this.sentinelValues.zeroValue))
            {
                result.put(EMPTY_KEY, this.sentinelValues.zeroValue);
            }
            if (this.sentinelValues.containsOneKey && !predicate.accept(REMOVED_KEY, this.sentinelValues.oneValue))
            {
                result.put(REMOVED_KEY, this.sentinelValues.oneValue);
            }
        }
        for (int i = 0; i \< this.<keyArray>.length; i<increment>)
        {
            if (isNonSentinel(this.<keyArray>[i]) && !predicate.accept(this.<keyArray>[i], this.<valueArray>[i<valueIndex>]))
            {
                result.put(this.<keyArray>[i], this.<valueArray>[i<valueIndex>]);
            }
        }
        return result;
    }

    public <wideType.(type2)> sum()
    {
        <wideType.(type2)> result = <wideZero.(type2)>;

        <forEachValue(template = {result += <value>})>

        return result;
    }

    public <type2> max()
    {
        if (this.isEmpty())
        {
            throw new NoSuchElementException();
        }
        <name2>Iterator iterator = this.<type2>Iterator();
        <type2> max = iterator.next();
        while (iterator.hasNext())
        {
            <type2> value = iterator.next();
            if (<(lessThan.(type2))("max", "value")>)
            {
                max = value;
            }
        }
        return max;
    }

    public <type2> maxIfEmpty(<type2> defaultValue)
    {
        if (this.isEmpty())
        {
            return defaultValue;
        }
        return this.max();
    }

    public <type2> min()
    {
        if (this.isEmpty())
        {
            throw new NoSuchElementException();
        }
        <name2>Iterator iterator = this.<type2>Iterator();
        <type2> min = iterator.next();
        while (iterator.hasNext())
        {
            <type2> value = iterator.next();
            if (<(lessThan.(type2))("value", "min")>)
            {
                min = value;
            }
        }
        return min;
    }

    public <type2> minIfEmpty(<type2> defaultValue)
    {
        if (this.isEmpty())
        {
            return defaultValue;
        }
        return this.min();
    }

    public double average()
    {
        if (this.isEmpty())
        {
            throw new ArithmeticException();
        }
        return <castSum.(type2)>this.sum() / (double) this.size();
    }

    public double median()
    {
        if (this.isEmpty())
        {
            throw new ArithmeticException();
        }
        <type2>[] sortedArray = this.toSortedArray();
        int middleIndex = sortedArray.length >\> 1;
        if (sortedArray.length > 1 && (sortedArray.length & 1) == 0)
        {
            <type2> first = sortedArray[middleIndex];
            <type2> second = sortedArray[middleIndex - 1];
            return (<castDouble.(type2)>first + <castDouble.(type2)>second) / 2.0;
        }
        return <castDouble.(type2)>sortedArray[middleIndex];
    }

    public <type2>[] toSortedArray()
    {
        <type2>[] array = this.toArray();
        Arrays.sort(array);
        return array;
    }

    public Mutable<name2>List toSortedList()
    {
        return <name2>ArrayList.newList(this).sortThis();
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        out.writeInt(this.size());
        if (this.sentinelValues != null)
        {
            if (this.sentinelValues.containsZeroKey)
            {
                out.write<name1>(EMPTY_KEY);
                out.write<name2>(this.sentinelValues.zeroValue);
            }
            if (this.sentinelValues.containsOneKey)
            {
                out.write<name1>(REMOVED_KEY);
                out.write<name2>(this.sentinelValues.oneValue);
            }
        }
        for (int i = 0; i \< this.<keyArray>.length; i<increment>)
        {
            if (isNonSentinel(this.<keyArray>[i]))
            {
                out.write<name1>(this.<keyArray>[i]);
                out.write<name2>(this.<valueArray>[i<valueIndex>]);
            }
        }
    }

    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
    {
        int size = in.readInt();
        for (int i = 0; i \< size; i++)
        {
            this.put(in.read<name1>(), in.read<name2>());
        }
    }

    /**
     * Rehashes every element in the set into a new backing table of the smallest possible size and eliminating removed sentinels.
     */
    public void compact()
    {
        this.rehash(this.smallestPowerOfTwoGreaterThan(this.size()));
    }

    private void rehash()
    {
        this.rehash(this.<keyArray>.length<if(sameTwoPrimitives)> >\> 1<endif>);
    }

    private void rehashAndGrow()
    {
        this.rehash(this.<keyArray>.length<if(!sameTwoPrimitives)> \<\< 1<endif>);
    }

    private void rehash(int newCapacity)
    {
        int oldLength = this.<keyArray>.length;
        <type1>[] old = this.<keyArray>;
        <if(!sameTwoPrimitives)>
        <type2>[] oldValues = this.values;
        <endif>
        this.allocateTable(newCapacity);
        this.occupiedWithData = 0;
        this.occupiedWithSentinels = 0;

        for (int i = 0; i \< oldLength; i<increment>)
        {
            if (isNonSentinel(old[i]))
            {
                this.put(old[i], old<if(!sameTwoPrimitives)>Values<endif>[i<valueIndex>]);
            }
        }
    }

    // exposed for testing
    int probe(<type1> element)
    {
        int index = this.spread(element)<if(sameTwoPrimitives)> \<\< 1<endif>;
        <type1> keyAtIndex = this.<keyArray>[index];

        if (<(equals.(type1))("keyAtIndex", "element")> || <(equals.(type1))("keyAtIndex", "EMPTY_KEY")>)
        {
            return index;
        }

        int removedIndex = <(equals.(type1))("keyAtIndex", "REMOVED_KEY")> ? index : -1;
        int nextIndex = index;
        int probe = <if(sameTwoPrimitives)>34<else>17<endif>;

        // loop until an empty slot is reached
        while (true)
        {
            // Probe algorithm: 17*n*(n+1)/2 where n = number of collisions
            nextIndex += probe;
            probe += <if(sameTwoPrimitives)>34<else>17<endif>;
            nextIndex &= this.<keyArray>.length - 1;

            if (<(equals.(type1))({this.<keyArray>[nextIndex]}, "element")>)
            {
                return nextIndex;
            }
            if (<(equals.(type1))({this.<keyArray>[nextIndex]}, "REMOVED_KEY")>)
            {
                if (removedIndex == -1)
                {
                    removedIndex = nextIndex;
                }
            }
            else if (<(equals.(type1))({this.<keyArray>[nextIndex]}, "EMPTY_KEY")>)
            {
                return removedIndex == -1 ? nextIndex : removedIndex;
            }
        }
    }

    // exposed for testing
    <(spread.(type1))(type1, (keyArray))>

    private int mask(int spread)
    {
        return spread & (<if(sameTwoPrimitives)>(<endif>this.<keyArray>.length <if(sameTwoPrimitives)>\>> 1)<endif> - 1);
    }

    private void allocateTable(int sizeToAllocate)
    {
        this.<keyArray> = new <type1>[sizeToAllocate<if(sameTwoPrimitives)> \<\< 1<endif>];
        <if(!sameTwoPrimitives)>
        this.values = new <type2>[sizeToAllocate];
        <endif>
    }

    private static boolean isEmptyKey(<type1> key)
    {
        return <(equals.(type1))("key", "EMPTY_KEY")>;
    }

    private static boolean isRemovedKey(<type1> key)
    {
        return <(equals.(type1))("key", "REMOVED_KEY")>;
    }

    private static boolean isNonSentinel(<type1> key)
    {
        return !isEmptyKey(key) && !isRemovedKey(key);
    }

    private int maxOccupiedWithData()
    {
        return this.<keyArray>.length >\> <if(!sameTwoPrimitives)>1<else>2<endif>;
    }

    private int maxOccupiedWithSentinels()
    {
        return this.<keyArray>.length >\> <if(!sameTwoPrimitives)>2<else>3<endif>;
    }

    private static final class SentinelValues
    {
        private boolean containsZeroKey;
        private boolean containsOneKey;
        private <type2> zeroValue;
        private <type2> oneValue;

        public int size()
        {
            return (this.containsZeroKey ? 1 : 0) + (this.containsOneKey ? 1 : 0);
        }

        public boolean containsValue(<type2> value)
        {
            boolean valueEqualsZeroValue = this.containsZeroKey && <(equals.(type2))("this.zeroValue", "value")>;
            boolean valueEqualsOneValue = this.containsOneKey && <(equals.(type2))("this.oneValue", "value")>;
            return valueEqualsZeroValue || valueEqualsOneValue;
        }
    }

    private class Internal<name2>Iterator implements Mutable<name2>Iterator
    {
        private int count;
        private int position;
        private <type1> lastKey;
        private boolean handledZero;
        private boolean handledOne;
        private boolean canRemove;

        public boolean hasNext()
        {
            return this.count \< <name1><name2>HashMap.this.size();
        }

        public <type2> next()
        {
            if (!this.hasNext())
            {
                throw new NoSuchElementException("next() called, but the iterator is exhausted");
            }
            this.count++;
            this.canRemove = true;

            if (!this.handledZero)
            {
                this.handledZero = true;
                if (<name1><name2>HashMap.this.containsKey(EMPTY_KEY))
                {
                    this.lastKey = EMPTY_KEY;
                    return <name1><name2>HashMap.this.get(EMPTY_KEY);
                }
            }
            if (!this.handledOne)
            {
                this.handledOne = true;
                if (<name1><name2>HashMap.this.containsKey(REMOVED_KEY))
                {
                    this.lastKey = REMOVED_KEY;
                    return <name1><name2>HashMap.this.get(REMOVED_KEY);
                }
            }
            <type1>[] keys = <name1><name2>HashMap.this.<keyArray>;
            while (!isNonSentinel(keys[this.position]))
            {
                this.position<increment>;
            }
            this.lastKey = keys[this.position];
            <type2> result = <name1><name2>HashMap.this.<valueArray>[this.position<valueIndex>];
            this.position<increment>;

            return result;
        }

        public void remove()
        {
            if (!this.canRemove)
            {
                throw new IllegalStateException();
            }
            <name1><name2>HashMap.this.removeKey(this.lastKey);
            this.count--;
            this.canRemove = false;
        }
    }

    private class KeysView extends AbstractLazy<name1>Iterable
    {
        public <name1>Iterator <type1>Iterator()
        {
            return new Unmodifiable<name1>Iterator(new KeySetIterator());
        }

        public void forEach(<name1>Procedure procedure)
        {
            <name1><name2>HashMap.this.forEachKey(procedure);
        }
    }

    private class KeySetIterator implements Mutable<name1>Iterator
    {
        private int count;
        private int position;
        private <type1> lastKey;
        private boolean handledZero;
        private boolean handledOne;
        private boolean canRemove;

        public boolean hasNext()
        {
            return this.count \< <name1><name2>HashMap.this.size();
        }

        public <type1> next()
        {
            if (!this.hasNext())
            {
                throw new NoSuchElementException("next() called, but the iterator is exhausted");
            }
            this.count++;
            this.canRemove = true;

            if (!this.handledZero)
            {
                this.handledZero = true;
                if (<name1><name2>HashMap.this.containsKey(EMPTY_KEY))
                {
                    this.lastKey = EMPTY_KEY;
                    return this.lastKey;
                }
            }
            if (!this.handledOne)
            {
                this.handledOne = true;
                if (<name1><name2>HashMap.this.containsKey(REMOVED_KEY))
                {
                    this.lastKey = REMOVED_KEY;
                    return this.lastKey;
                }
            }

            <type1>[] keys = <name1><name2>HashMap.this.<keyArray>;
            while (!isNonSentinel(keys[this.position]))
            {
                this.position<increment>;
            }
            this.lastKey = keys[this.position];
            this.position<increment>;

            return this.lastKey;
        }

        public void remove()
        {
            if (!this.canRemove)
            {
                throw new IllegalStateException();
            }
            <name1><name2>HashMap.this.removeKey(this.lastKey);
            this.count--;
            this.canRemove = false;
        }
    }

    public Mutable<name1>Set keySet()
    {
        return new KeySet();
    }

    private class KeySet implements Mutable<name1>Set
    {
        public Mutable<name1>Iterator <type1>Iterator()
        {
            return new KeySetIterator();
        }

        public void forEach(<name1>Procedure procedure)
        {
            <name1><name2>HashMap.this.forEachKey(procedure);
        }

        public int count(<name1>Predicate predicate)
        {
            int count = 0;
            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey && predicate.accept(EMPTY_KEY))
                {
                    count++;
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey && predicate.accept(REMOVED_KEY))
                {
                    count++;
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]) && predicate.accept(<name1><name2>HashMap.this.<keyArray>[i]))
                {
                    count++;
                }
            }
            return count;
        }

        public boolean anySatisfy(<name1>Predicate predicate)
        {
            <forEachKeySatisfying(template = {return true})>
            return false;
        }

        public boolean allSatisfy(<name1>Predicate predicate)
        {
            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey && !predicate.accept(EMPTY_KEY))
                {
                    return false;
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey && !predicate.accept(REMOVED_KEY))
                {
                    return false;
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]) && !predicate.accept(<name1><name2>HashMap.this.<keyArray>[i]))
                {
                    return false;
                }
            }
            return true;
        }

        public boolean noneSatisfy(<name1>Predicate predicate)
        {
            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey && predicate.accept(EMPTY_KEY))
                {
                    return false;
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey && predicate.accept(REMOVED_KEY))
                {
                    return false;
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]) && predicate.accept(<name1><name2>HashMap.this.<keyArray>[i]))
                {
                    return false;
                }
            }
            return true;
        }

        public boolean add(<type1> element)
        {
            throw new UnsupportedOperationException("Cannot call add() on " + this.getClass().getSimpleName());
        }

        public boolean addAll(<type1>... source)
        {
            throw new UnsupportedOperationException("Cannot call addAll() on " + this.getClass().getSimpleName());
        }

        public boolean addAll(<name1>Iterable source)
        {
            throw new UnsupportedOperationException("Cannot call addAll() on " + this.getClass().getSimpleName());
        }

        public boolean remove(<type1> key)
        {
            int oldSize = <name1><name2>HashMap.this.size();
            <name1><name2>HashMap.this.removeKey(key);
            return oldSize != <name1><name2>HashMap.this.size();
        }

        public boolean removeAll(<name1>Iterable source)
        {
            int oldSize = <name1><name2>HashMap.this.size();
            <name1>Iterator iterator = source.<type1>Iterator();
            while (iterator.hasNext())
            {
                <name1><name2>HashMap.this.removeKey(iterator.next());
            }
            return oldSize != <name1><name2>HashMap.this.size();
        }

        public boolean removeAll(<type1>... source)
        {
            int oldSize = <name1><name2>HashMap.this.size();
            for (<type1> item : source)
            {
                <name1><name2>HashMap.this.removeKey(item);
            }
            return oldSize != <name1><name2>HashMap.this.size();
        }

        public boolean retainAll(<name1>Iterable source)
        {
            int oldSize = this.size();
            final <name1>Set sourceSet = source instanceof <name1>Set ? (<name1>Set) source : source.toSet();
            <name1><name2>HashMap retained = <name1><name2>HashMap.this.select(new <name1><name2>Predicate()
            {
                public boolean accept(<type1> key, <type2> value)
                {
                    return sourceSet.contains(key);
                }
            });
            if (retained.size() != oldSize)
            {
                <name1><name2>HashMap.this.<keyArray> = retained.<keyArray>;
                <if(!sameTwoPrimitives)>
                <name1><name2>HashMap.this.values = retained.values;
                <endif>
                <name1><name2>HashMap.this.sentinelValues = retained.sentinelValues;
                <name1><name2>HashMap.this.occupiedWithData = retained.occupiedWithData;
                <name1><name2>HashMap.this.occupiedWithSentinels = retained.occupiedWithSentinels;
                return true;
            }
            return false;
        }

        public boolean retainAll(<type1>... source)
        {
            return this.retainAll(<name1>HashSet.newSetWith(source));
        }

        public void clear()
        {
            <name1><name2>HashMap.this.clear();
        }

        public Mutable<name1>Set select(<name1>Predicate predicate)
        {
            Mutable<name1>Set result = new <name1>HashSet();
            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey && predicate.accept(EMPTY_KEY))
                {
                    result.add(EMPTY_KEY);
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey && predicate.accept(REMOVED_KEY))
                {
                    result.add(REMOVED_KEY);
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]) && predicate.accept(<name1><name2>HashMap.this.<keyArray>[i]))
                {
                    result.add(<name1><name2>HashMap.this.<keyArray>[i]);
                }
            }
            return result;
        }

        public Mutable<name1>Set reject(<name1>Predicate predicate)
        {
            Mutable<name1>Set result = new <name1>HashSet();
            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey && !predicate.accept(EMPTY_KEY))
                {
                    result.add(EMPTY_KEY);
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey && !predicate.accept(REMOVED_KEY))
                {
                    result.add(REMOVED_KEY);
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]) && !predicate.accept(<name1><name2>HashMap.this.<keyArray>[i]))
                {
                    result.add(<name1><name2>HashMap.this.<keyArray>[i]);
                }
            }
            return result;
        }

        public Mutable<name1>Set with(<type1> element)
        {
            throw new UnsupportedOperationException("Cannot call with() on " + this.getClass().getSimpleName());
        }

        public Mutable<name1>Set without(<type1> element)
        {
            throw new UnsupportedOperationException("Cannot call without() on " + this.getClass().getSimpleName());
        }

        public Mutable<name1>Set withAll(<name1>Iterable elements)
        {
            throw new UnsupportedOperationException("Cannot call withAll() on " + this.getClass().getSimpleName());
        }

        public Mutable<name1>Set withoutAll(<name1>Iterable elements)
        {
            throw new UnsupportedOperationException("Cannot call withoutAll() on " + this.getClass().getSimpleName());
        }

        public <type1> detectIfNone(<name1>Predicate predicate, <type1> ifNone)
        {
            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey && predicate.accept(EMPTY_KEY))
                {
                    return EMPTY_KEY;
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey && predicate.accept(REMOVED_KEY))
                {
                    return REMOVED_KEY;
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]) && predicate.accept(<name1><name2>HashMap.this.<keyArray>[i]))
                {
                    return <name1><name2>HashMap.this.<keyArray>[i];
                }
            }
            return ifNone;
        }

        public \<V> MutableSet\<V> collect(<name1>ToObjectFunction\<? extends V> function)
        {
            MutableSet\<V> result = Sets.mutable.with();
            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey)
                {
                    result.add(function.valueOf(EMPTY_KEY));
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey)
                {
                    result.add(function.valueOf(REMOVED_KEY));
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]))
                {
                    result.add(function.valueOf(<name1><name2>HashMap.this.<keyArray>[i]));
                }
            }
            return result;
        }

        public Mutable<name1>Set asUnmodifiable()
        {
            return Unmodifiable<name1>Set.of(this);
        }

        public Mutable<name1>Set asSynchronized()
        {
            return Synchronized<name1>Set.of(this);
        }

        public <wideType.(type1)> sum()
        {
            <wideType.(type1)> sum = <wideZero.(type1)>;
            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey)
                {
                    sum += EMPTY_KEY;
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey)
                {
                    sum += REMOVED_KEY;
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]))
                {
                    sum += <name1><name2>HashMap.this.<keyArray>[i];
                }
            }
            return sum;
        }

        public <type1> max()
        {
            if (<name1><name2>HashMap.this.isEmpty())
            {
                throw new NoSuchElementException();
            }

            <type1> max = 0;
            boolean isMaxSet = false;

            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey)
                {
                    max = EMPTY_KEY;
                    isMaxSet = true;
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey && (!isMaxSet || <(lessThan.(type1))("max", "REMOVED_KEY")>))
                {
                    max = REMOVED_KEY;
                    isMaxSet = true;
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]) && (!isMaxSet || <(lessThan.(type1))({max}, {<name1><name2>HashMap.this.<keyArray>[i]})>))
                {
                    max = <name1><name2>HashMap.this.<keyArray>[i];
                    isMaxSet = true;
                }
            }
            return max;
        }

        public <type1> maxIfEmpty(<type1> defaultValue)
        {
            if (<name1><name2>HashMap.this.isEmpty())
            {
                return defaultValue;
            }

            return this.max();
        }

        public <type1> min()
        {
            if (<name1><name2>HashMap.this.isEmpty())
            {
                throw new NoSuchElementException();
            }

            <type1> min = 0;
            boolean isMinSet = false;

            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey)
                {
                    min = EMPTY_KEY;
                    isMinSet = true;
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey && (!isMinSet || <(lessThan.(type1))("REMOVED_KEY", "min")>))
                {
                    min = REMOVED_KEY;
                    isMinSet = true;
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]) && (!isMinSet || <(lessThan.(type1))({<name1><name2>HashMap.this.<keyArray>[i]}, {min})>))
                {
                    min = <name1><name2>HashMap.this.<keyArray>[i];
                    isMinSet = true;
                }
            }
            return min;
        }

        public <type1> minIfEmpty(<type1> defaultValue)
        {
            if (<name1><name2>HashMap.this.isEmpty())
            {
                return defaultValue;
            }

            return this.min();
        }

        public double average()
        {
            if (this.isEmpty())
            {
                throw new ArithmeticException();
            }
            return <castSum.(type1)>this.sum() / (double) this.size();
        }

        public double median()
        {
            if (this.isEmpty())
            {
                throw new ArithmeticException();
            }
            <type1>[] sortedArray = this.toSortedArray();
            int middleIndex = sortedArray.length >\> 1;
            if (sortedArray.length > 1 && (sortedArray.length & 1) == 0)
            {
                <type1> first = sortedArray[middleIndex];
                <type1> second = sortedArray[middleIndex - 1];
                return (<castDouble.(type1)>first + <castDouble.(type1)>second) / 2.0;
            }
            return <castDouble.(type1)>sortedArray[middleIndex];
        }

        public <type1>[] toSortedArray()
        {
            <type1>[] array = this.toArray();
            Arrays.sort(array);
            return array;
        }

        public Mutable<name1>List toSortedList()
        {
            return <name1>ArrayList.newList(this).sortThis();
        }

        public <type1>[] toArray()
        {
            int size = <name1><name2>HashMap.this.size();
            final <type1>[] result = new <type1>[size];
            <name1><name2>HashMap.this.forEachKey(new <name1>Procedure()
            {
                private int index;

                public void value(<type1> each)
                {
                    result[this.index] = each;
                    this.index++;
                }
            });
            return result;
        }

        public boolean contains(<type1> value)
        {
            return <name1><name2>HashMap.this.containsKey(value);
        }

        public boolean containsAll(<type1>... source)
        {
            for (<type1> item : source)
            {
                if (!<name1><name2>HashMap.this.containsKey(item))
                {
                    return false;
                }
            }
            return true;
        }

        public boolean containsAll(<name1>Iterable source)
        {
            <name1>Iterator iterator = source.<type1>Iterator();
            while (iterator.hasNext())
            {
                if (!<name1><name2>HashMap.this.containsKey(iterator.next()))
                {
                    return false;
                }
            }
            return true;
        }

        public Mutable<name1>List toList()
        {
            return <name1>ArrayList.newList(this);
        }

        public Mutable<name1>Set toSet()
        {
            return <name1>HashSet.newSet(this);
        }

        public Mutable<name1>Bag toBag()
        {
            return <name1>HashBag.newBag(this);
        }

        public Lazy<name1>Iterable asLazy()
        {
            return new Lazy<name1>IterableAdapter(this);
        }

        public \<T> T injectInto(T injectedValue, Object<name1>ToObjectFunction\<? super T, ? extends T> function)
        {
            T result = injectedValue;
            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey)
                {
                    result = function.valueOf(result, EMPTY_KEY);
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey)
                {
                    result = function.valueOf(result, REMOVED_KEY);
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]))
                {
                    result = function.valueOf(result, <name1><name2>HashMap.this.<keyArray>[i]);
                }
            }
            return result;
        }

        public <name1>Set freeze()
        {
            <name1><name2>HashMap.this.copyKeysOnWrite = true;
            boolean containsZeroKey = false;
            boolean containsOneKey = false;
            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                containsZeroKey = <name1><name2>HashMap.this.sentinelValues.containsZeroKey;
                containsOneKey = <name1><name2>HashMap.this.sentinelValues.containsOneKey;
            }
            <if(sameTwoPrimitives)>
            return new Immutable<name1><name2>MapKeySet(<name1><name2>HashMap.this.<keyArray>, <name1><name2>HashMap.this.occupiedWithData, containsZeroKey, containsOneKey);
            <else>
            return new Immutable<name1>MapKeySet(<name1><name2>HashMap.this.<keyArray>, <name1><name2>HashMap.this.occupiedWithData, containsZeroKey, containsOneKey);
            <endif>
        }

        public Immutable<name1>Set toImmutable()
        {
            return <name1>Sets.immutable.withAll(this);
        }

        public int size()
        {
            return <name1><name2>HashMap.this.size();
        }

        public boolean isEmpty()
        {
            return <name1><name2>HashMap.this.isEmpty();
        }

        public boolean notEmpty()
        {
            return <name1><name2>HashMap.this.notEmpty();
        }

        @Override
        public boolean equals(Object obj)
        {
            if (this == obj)
            {
                return true;
            }

            if (!(obj instanceof <name1>Set))
            {
                return false;
            }

            <name1>Set other = (<name1>Set) obj;
            return this.size() == other.size() && this.containsAll(other.toArray());
        }

        @Override
        public int hashCode()
        {
            int result = 0;

            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey)
                {
                    result += <(hashCode.(type1))("EMPTY_KEY")>;
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey)
                {
                    result += <(hashCode.(type1))("REMOVED_KEY")>;
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]))
                {
                    result += <(hashCode.(type1))({<name1><name2>HashMap.this.<keyArray>[i]})>;
                }
            }

            return result;
        }

        @Override
        public String toString()
        {
            return this.makeString("[", ", ", "]");
        }

        public String makeString()
        {
            return this.makeString(", ");
        }

        public String makeString(String separator)
        {
            return this.makeString("", separator, "");
        }

        public String makeString(String start, String separator, String end)
        {
            Appendable stringBuilder = new StringBuilder();
            this.appendString(stringBuilder, start, separator, end);
            return stringBuilder.toString();
        }

        public void appendString(Appendable appendable)
        {
            this.appendString(appendable, ", ");
        }

        public void appendString(Appendable appendable, String separator)
        {
            this.appendString(appendable, "", separator, "");
        }

        public void appendString(Appendable appendable, String start, String separator, String end)
        {
            try
            {
                appendable.append(start);
                boolean first = true;
                if (<name1><name2>HashMap.this.sentinelValues != null)
                {
                    if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey)
                    {
                        appendable.append(String.valueOf(EMPTY_KEY));
                        first = false;
                    }
                    if (<name1><name2>HashMap.this.sentinelValues.containsOneKey)
                    {
                        if (!first)
                        {
                            appendable.append(separator);
                        }
                        appendable.append(String.valueOf(REMOVED_KEY));
                        first = false;
                    }
                }
                for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
                {
                    if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]))
                    {
                        if (!first)
                        {
                            appendable.append(separator);
                        }
                        appendable.append(String.valueOf(<name1><name2>HashMap.this.<keyArray>[i]));
                        first = false;
                    }
                }
                appendable.append(end);
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
    }

    public Mutable<name2>Collection values()
    {
        return new ValuesCollection();
    }

    private class ValuesCollection implements Mutable<name2>Collection
    {
        public void clear()
        {
            <name1><name2>HashMap.this.clear();
        }

        public Mutable<name2>Collection select(<name2>Predicate predicate)
        {
            return <name1><name2>HashMap.this.select(predicate);
        }

        public Mutable<name2>Collection reject(<name2>Predicate predicate)
        {
            return <name1><name2>HashMap.this.reject(predicate);
        }

        public <type2> detectIfNone(<name2>Predicate predicate, <type2> ifNone)
        {
            return <name1><name2>HashMap.this.detectIfNone(predicate, ifNone);
        }

        public \<V> MutableCollection\<V> collect(<name2>ToObjectFunction\<? extends V> function)
        {
            return <name1><name2>HashMap.this.collect(function);
        }

        public \<T> T injectInto(T injectedValue, Object<name2>ToObjectFunction\<? super T, ? extends T> function)
        {
            return <name1><name2>HashMap.this.injectInto(injectedValue, function);
        }

        public <wideType.(type2)> sum()
        {
            return <name1><name2>HashMap.this.sum();
        }

        public <type2> max()
        {
            return <name1><name2>HashMap.this.max();
        }

        public <type2> maxIfEmpty(<type2> defaultValue)
        {
            return <name1><name2>HashMap.this.maxIfEmpty(defaultValue);
        }

        public <type2> min()
        {
            return <name1><name2>HashMap.this.min();
        }

        public <type2> minIfEmpty(<type2> defaultValue)
        {
            return <name1><name2>HashMap.this.minIfEmpty(defaultValue);
        }

        public double average()
        {
            return <name1><name2>HashMap.this.average();
        }

        public double median()
        {
            return <name1><name2>HashMap.this.median();
        }

        public <type2>[] toSortedArray()
        {
            return <name1><name2>HashMap.this.toSortedArray();
        }

        public Mutable<name2>List toSortedList()
        {
            return <name1><name2>HashMap.this.toSortedList();
        }

        public Mutable<name2>Collection with(<type2> element)
        {
            throw new UnsupportedOperationException("Cannot call with() on " + this.getClass().getSimpleName());
        }

        public Mutable<name2>Collection without(<type2> element)
        {
            throw new UnsupportedOperationException("Cannot call without() on " + this.getClass().getSimpleName());
        }

        public Mutable<name2>Collection withAll(<name2>Iterable elements)
        {
            throw new UnsupportedOperationException("Cannot call withAll() on " + this.getClass().getSimpleName());
        }

        public Mutable<name2>Collection withoutAll(<name2>Iterable elements)
        {
            throw new UnsupportedOperationException("Cannot call withoutAll() on " + this.getClass().getSimpleName());
        }

        public Mutable<name2>Collection asUnmodifiable()
        {
            return Unmodifiable<name2>Collection.of(this);
        }

        public Mutable<name2>Collection asSynchronized()
        {
            return Synchronized<name2>Collection.of(this);
        }

        public Immutable<name2>Collection toImmutable()
        {
            return <name2>Lists.immutable.withAll(this);
        }

        public boolean contains(<type2> value)
        {
            return <name1><name2>HashMap.this.containsValue(value);
        }

        public boolean containsAll(<type2>... source)
        {
            return <name1><name2>HashMap.this.containsAll(source);
        }

        public boolean containsAll(<name2>Iterable source)
        {
            return <name1><name2>HashMap.this.containsAll(source);
        }

        public Mutable<name2>List toList()
        {
            return <name1><name2>HashMap.this.toList();
        }

        public Mutable<name2>Set toSet()
        {
            return <name1><name2>HashMap.this.toSet();
        }

        public Mutable<name2>Bag toBag()
        {
            return <name1><name2>HashMap.this.toBag();
        }

        public Lazy<name2>Iterable asLazy()
        {
            return new Lazy<name2>IterableAdapter(this);
        }

        public boolean isEmpty()
        {
            return <name1><name2>HashMap.this.isEmpty();
        }

        public boolean notEmpty()
        {
            return <name1><name2>HashMap.this.notEmpty();
        }

        public String makeString()
        {
            return this.makeString(", ");
        }

        public String makeString(String separator)
        {
            return this.makeString("", separator, "");
        }

        public String makeString(String start, String separator, String end)
        {
            Appendable stringBuilder = new StringBuilder();
            this.appendString(stringBuilder, start, separator, end);
            return stringBuilder.toString();
        }

        public void appendString(Appendable appendable)
        {
            this.appendString(appendable, ", ");
        }

        public void appendString(Appendable appendable, String separator)
        {
            this.appendString(appendable, "", separator, "");
        }

        public void appendString(Appendable appendable, String start, String separator, String end)
        {
            try
            {
                appendable.append(start);

                boolean first = true;

                if (<name1><name2>HashMap.this.sentinelValues != null)
                {
                    if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey)
                    {
                        appendable.append(String.valueOf(<name1><name2>HashMap.this.sentinelValues.zeroValue));
                        first = false;
                    }
                    if (<name1><name2>HashMap.this.sentinelValues.containsOneKey)
                    {
                        if (!first)
                        {
                            appendable.append(separator);
                        }
                        appendable.append(String.valueOf(<name1><name2>HashMap.this.sentinelValues.oneValue));
                        first = false;
                    }
                }
                for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
                {
                    <type1> key = <name1><name2>HashMap.this.<keyArray>[i];
                    if (isNonSentinel(key))
                    {
                        if (!first)
                        {
                            appendable.append(separator);
                        }
                        appendable.append(String.valueOf(<name1><name2>HashMap.this.<valueArray>[i<valueIndex>]));
                        first = false;
                    }
                }
                appendable.append(end);
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }

        public Mutable<name2>Iterator <type2>Iterator()
        {
            return <name1><name2>HashMap.this.<type2>Iterator();
        }

        public void forEach(<name2>Procedure procedure)
        {
            <name1><name2>HashMap.this.forEach(procedure);
        }

        public int count(<name2>Predicate predicate)
        {
            return <name1><name2>HashMap.this.count(predicate);
        }

        public boolean anySatisfy(<name2>Predicate predicate)
        {
            return <name1><name2>HashMap.this.anySatisfy(predicate);
        }

        public boolean allSatisfy(<name2>Predicate predicate)
        {
            return <name1><name2>HashMap.this.allSatisfy(predicate);
        }

        public boolean noneSatisfy(<name2>Predicate predicate)
        {
            return <name1><name2>HashMap.this.noneSatisfy(predicate);
        }

        public boolean add(<type2> element)
        {
            throw new UnsupportedOperationException("Cannot call add() on " + this.getClass().getSimpleName());
        }

        public boolean addAll(<type2>... source)
        {
            throw new UnsupportedOperationException("Cannot call addAll() on " + this.getClass().getSimpleName());
        }

        public boolean addAll(<name2>Iterable source)
        {
            throw new UnsupportedOperationException("Cannot call addAll() on " + this.getClass().getSimpleName());
        }

        public boolean remove(<type2> item)
        {
            int oldSize = <name1><name2>HashMap.this.size();

            if (<name1><name2>HashMap.this.sentinelValues != null)
            {
                if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey && <(equals.(type2))({item}, {<name1><name2>HashMap.this.sentinelValues.zeroValue})>)
                {
                    <name1><name2>HashMap.this.removeKey(EMPTY_KEY);
                }
                if (<name1><name2>HashMap.this.sentinelValues.containsOneKey && <(equals.(type2))({item}, {<name1><name2>HashMap.this.sentinelValues.oneValue})>)
                {
                    <name1><name2>HashMap.this.removeKey(REMOVED_KEY);
                }
            }
            for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
            {
                if (isNonSentinel(<name1><name2>HashMap.this.<keyArray>[i]) && <(equals.(type2))({item}, {<name1><name2>HashMap.this.<valueArray>[i<valueIndex>]})>)
                {
                    <name1><name2>HashMap.this.removeKey(<name1><name2>HashMap.this.<keyArray>[i]);
                }
            }
            return oldSize != <name1><name2>HashMap.this.size();
        }

        public boolean removeAll(<name2>Iterable source)
        {
            int oldSize = <name1><name2>HashMap.this.size();

            <name2>Iterator iterator = source.<type2>Iterator();
            while (iterator.hasNext())
            {
                this.remove(iterator.next());
            }
            return oldSize != <name1><name2>HashMap.this.size();
        }

        public boolean removeAll(<type2>... source)
        {
            int oldSize = <name1><name2>HashMap.this.size();

            for (<type2> item : source)
            {
                this.remove(item);
            }
            return oldSize != <name1><name2>HashMap.this.size();
        }

        public boolean retainAll(<name2>Iterable source)
        {
            int oldSize = this.size();
            final <name2>Set sourceSet = source instanceof <name2>Set ? (<name2>Set) source : source.toSet();
            <name1><name2>HashMap retained = <name1><name2>HashMap.this.select(new <name1><name2>Predicate()
            {
                public boolean accept(<type1> key, <type2> value)
                {
                    return sourceSet.contains(value);
                }
            });
            if (retained.size() != oldSize)
            {
                <name1><name2>HashMap.this.<keyArray> = retained.<keyArray>;
                <if(!sameTwoPrimitives)>
                <name1><name2>HashMap.this.<valueArray> = retained.values;
                <endif>
                <name1><name2>HashMap.this.sentinelValues = retained.sentinelValues;
                <name1><name2>HashMap.this.occupiedWithData = retained.occupiedWithData;
                <name1><name2>HashMap.this.occupiedWithSentinels = retained.occupiedWithSentinels;
                return true;
            }
            return false;
        }

        public boolean retainAll(<type2>... source)
        {
            return this.retainAll(<name2>HashSet.newSetWith(source));
        }

        public int size()
        {
            return <name1><name2>HashMap.this.size();
        }

        public <type2>[] toArray()
        {
            return <name1><name2>HashMap.this.toArray();
        }
    }

    private class KeyValuesView extends AbstractLazyIterable\<<name1><name2>Pair>
    {
        public void forEach(Procedure\<? super <name1><name2>Pair> procedure)
        {
            this.each(procedure);
        }

        public void each(Procedure\<? super <name1><name2>Pair> procedure)
        {
            <forEachKeyValue(template = {procedure.value(PrimitiveTuples.pair(<key>, <value>))}, innerClass = true)>
        }

        public void forEachWithIndex(ObjectIntProcedure\<? super <name1><name2>Pair> objectIntProcedure)
        {
            int index = 0;
            <forEachKeyValue(template = {objectIntProcedure.value(PrimitiveTuples.pair(<key>, <value>), index);<\n>index++}, innerClass = true)>
        }

        public \<P> void forEachWith(Procedure2\<? super <name1><name2>Pair, ? super P> procedure, P parameter)
        {
            <forEachKeyValue(template = {procedure.value(PrimitiveTuples.pair(<key>, <value>), parameter)}, innerClass = true)>
        }

        public Iterator\<<name1><name2>Pair> iterator()
        {
            return new InternalKeyValuesIterator();
        }

        public class InternalKeyValuesIterator implements Iterator\<<name1><name2>Pair>
        {
            private int count;
            private int position;
            private boolean handledZero;
            private boolean handledOne;

            public <name1><name2>Pair next()
            {
                if (!this.hasNext())
                {
                    throw new NoSuchElementException("next() called, but the iterator is exhausted");
                }
                this.count++;

                if (!this.handledZero)
                {
                    this.handledZero = true;
                    if (<name1><name2>HashMap.this.containsKey(EMPTY_KEY))
                    {
                        return PrimitiveTuples.pair(EMPTY_KEY, <name1><name2>HashMap.this.sentinelValues.zeroValue);
                    }
                }
                if (!this.handledOne)
                {
                    this.handledOne = true;
                    if (<name1><name2>HashMap.this.containsKey(REMOVED_KEY))
                    {
                        return PrimitiveTuples.pair(REMOVED_KEY, <name1><name2>HashMap.this.sentinelValues.oneValue);
                    }
                }

                <type1>[] keys = <name1><name2>HashMap.this.<keyArray>;
                while (!isNonSentinel(keys[this.position]))
                {
                    this.position<increment>;
                }
                <name1><name2>Pair result = PrimitiveTuples.pair(keys[this.position], <name1><name2>HashMap.this.<valueArray>[this.position<valueIndex>]);
                this.position<increment>;
                return result;
            }

            public void remove()
            {
                throw new UnsupportedOperationException("Cannot call remove() on " + this.getClass().getSimpleName());
            }

            public boolean hasNext()
            {
                return this.count != <name1><name2>HashMap.this.size();
            }
        }
    }
}

>>

forEachKeyValue(template, innerClass=false) ::= <<
if (<if(innerClass)><name1><name2>HashMap.<endif>this.sentinelValues != null)
{
    if (<if(innerClass)><name1><name2>HashMap.<endif>this.sentinelValues.containsZeroKey)
    {
        <"EMPTY_KEY", {<if(innerClass)><name1><name2>HashMap.<endif>this.sentinelValues.zeroValue}:{key, value | <(template)>}>;
    }
    if (<if(innerClass)><name1><name2>HashMap.<endif>this.sentinelValues.containsOneKey)
    {
        <"REMOVED_KEY", {<if(innerClass)><name1><name2>HashMap.<endif>this.sentinelValues.oneValue}:{key, value | <(template)>}>;
    }
}
for (int i = 0; i \< <if(innerClass)><name1><name2>HashMap.<endif>this.<keyArray>.length; i<increment>)
{
    if (isNonSentinel(<if(innerClass)><name1><name2>HashMap.<endif>this.<keyArray>[i]))
    {
        <{<if(innerClass)><name1><name2>HashMap.<endif>this.<keyArray>[i]}, {<if(innerClass)><name1><name2>HashMap.<endif>this.<valueArray>[i<valueIndex>]}:{key, value | <(template)>}>;
    }
}
>>

forEachKeyValueSatisfying(template) ::= <<
if (this.sentinelValues != null)
{
    if (this.sentinelValues.containsZeroKey && predicate.accept(EMPTY_KEY, this.sentinelValues.zeroValue))
    {
        <"EMPTY_KEY", "this.sentinelValues.zeroValue":{key, value | <template>}>;
    }
    if (this.sentinelValues.containsOneKey && predicate.accept(REMOVED_KEY, this.sentinelValues.oneValue))
    {
        <"REMOVED_KEY", "this.sentinelValues.oneValue":{key, value | <template>}>;
    }
}
for (int i = 0; i \< this.<keyArray>.length; i<increment>)
{
    if (isNonSentinel(this.<keyArray>[i]) && predicate.accept(this.<keyArray>[i], this.<valueArray>[i<valueIndex>]))
    {
        <{this.<keyArray>[i]}, {this.<valueArray>[i<valueIndex>]}:{key, value | <template>}>;
    }
}
>>

forEachKey(template, innerClass=false) ::= <<
if (<if(innerClass)><name1><name2>HashMap.<endif>this.sentinelValues != null)
{
    if (<if(innerClass)><name1><name2>HashMap.<endif>this.sentinelValues.containsZeroKey)
    {
        <"EMPTY_KEY":{key | <template>}>;
    }
    if (<if(innerClass)><name1><name2>HashMap.<endif>this.sentinelValues.containsOneKey)
    {
        <"REMOVED_KEY":{key | <template>}>;
    }
}
for (int i = 0; i \< <if(innerClass)><name1><name2>HashMap.<endif>this.<keyArray>.length; i<increment>)
{
    if (isNonSentinel(<keyArray>[i]))
    {
        <{<keyArray>[i]}:{key | <template>}>;
    }
}
>>

forEachKeySatisfying(template) ::= <<
if (<name1><name2>HashMap.this.sentinelValues != null)
{
    if (<name1><name2>HashMap.this.sentinelValues.containsZeroKey && predicate.accept(EMPTY_KEY))
    {
        <"EMPTY_KEY":{key | <template>}>;
    }
    if (<name1><name2>HashMap.this.sentinelValues.containsOneKey && predicate.accept(REMOVED_KEY))
    {
        <"REMOVED_KEY":{key | <template>}>;
    }
}
for (int i = 0; i \< <name1><name2>HashMap.this.<keyArray>.length; i<increment>)
{
    if (isNonSentinel(<keyArray>[i]) && predicate.accept(<keyArray>[i]))
    {
        <{this.<keyArray>[i]}:{key | <template>}>;
    }
}
>>

forEachValue(template) ::= <<
if (this.sentinelValues != null)
{
    if (this.sentinelValues.containsZeroKey)
    {
        <"this.sentinelValues.zeroValue":{value | <template>}>;
    }
    if (this.sentinelValues.containsOneKey)
    {
        <"this.sentinelValues.oneValue":{value | <template>}>;
    }
}
for (int i = 0; i \< this.<keyArray>.length; i<increment>)
{
    if (isNonSentinel(this.<keyArray>[i]))
    {
        <{this.<valueArray>[i<valueIndex>]}:{value | <template>}>;
    }
}
>>

forEachValueSatisfying(template) ::= <<
if (this.sentinelValues != null)
{
    if (this.sentinelValues.containsZeroKey && predicate.accept(this.sentinelValues.zeroValue))
    {
        <"this.sentinelValues.zeroValue":{ value | <template>}>;
    }
    if (this.sentinelValues.containsOneKey && predicate.accept(this.sentinelValues.oneValue))
    {
        <"this.sentinelValues.oneValue":{ value | <template>}>;
    }
}
for (int i = 0; i \< this.<keyArray>.length; i<increment>)
{
    if (isNonSentinel(this.<keyArray>[i]) && predicate.accept(this.<valueArray>[i<valueIndex>]))
    {
        <{this.<valueArray>[i<valueIndex>]}:{ value | <template>}>;
    }
}
>>

getIfAbsentPut(function) ::= <<
if (isEmptyKey(key))
{
    if (this.sentinelValues == null)
    {
        <function>
        this.sentinelValues = new SentinelValues();
        this.addEmptyKeyValue(value);
        return value;
    }
    if (this.sentinelValues.containsZeroKey)
    {
        return this.sentinelValues.zeroValue;
    }
    <function>
    this.addEmptyKeyValue(value);
    return value;
}
if (isRemovedKey(key))
{
    if (this.sentinelValues == null)
    {
        <function>
        this.sentinelValues = new SentinelValues();
        this.addRemovedKeyValue(value);
        return value;
    }
    if (this.sentinelValues.containsOneKey)
    {
        return this.sentinelValues.oneValue;
    }
    <function>
    this.addRemovedKeyValue(value);
    return value;
}
int index = this.probe(key);
if (<(equals.(type1))({this.<keyArray>[index]}, "key")>)
{
    return this.<valueArray>[index<valueIndex>];
}
<function>
this.addKeyValueAtIndex(key, value, index);
return value;
>>

newWithKeysValues(numbers) ::= <<
public static <name1><name2>HashMap newWithKeysValues(<numbers:{number | <type1> key<number>, <type2> value<number>}; separator=", ">)
{
    return new <name1><name2>HashMap(<length(numbers)>).withKeysValues(<numbers:{number | key<number>, value<number>}; separator=", ">);
}
>>

withKeysValues(numbers) ::= <<
public <name1><name2>HashMap withKeysValues(<numbers:{number | <type1> key<number>, <type2> value<number>}; separator=", ">)
{
    <numbers:{number | this.put(key<number>, value<number>);}; separator="\n">
    return this;
}
>>
