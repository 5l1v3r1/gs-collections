import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashcode.stg"
import "primitiveLiteral.stg"

targetPath() ::= "collections/target/generated-sources/java/com/gs/collections/impl/lazy/primitive"

fileName(primitive) ::= "Select<primitive.name>Iterable"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.impl.lazy.primitive;

import java.io.IOException;
import java.util.Arrays;
import java.util.NoSuchElementException;

import com.gs.collections.api.RichIterable;
import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.predicate.primitive.<name>Predicate;
import com.gs.collections.api.block.procedure.primitive.<name>Procedure;
import com.gs.collections.api.iterator.<name>Iterator;
import com.gs.collections.api.<name>Iterable;
import com.gs.collections.impl.block.factory.primitive.<name>Predicates;

public class Select<name>Iterable
    implements <name>Iterable
{
    private final <name>Iterable delegate;
    private final <name>Predicate predicate;

    public Select<name>Iterable(<name>Iterable delegate, <name>Predicate predicate)
    {
        this.delegate = delegate;
        this.predicate = predicate;
    }

    public <name>Iterator <type>Iterator()
    {
        return new Select<name>Iterator(this.delegate, this.predicate);
    }

    public void forEach(<name>Procedure procedure)
    {
        this.delegate.forEach(new If<name>Procedure(procedure));
    }

    public int size()
    {
        return this.delegate.count(this.predicate);
    }

    public boolean isEmpty()
    {
        return this.size() == 0;
    }

    public boolean notEmpty()
    {
        return this.size() > 0;
    }

    public int count(<name>Predicate predicate)
    {
        Count<name>Procedure count<name>Procedure = new Count<name>Procedure(predicate);
        this.forEach(count<name>Procedure);
        return count<name>Procedure.getCount();
    }

    public boolean anySatisfy(<name>Predicate predicate)
    {
        return this.delegate.anySatisfy(<name>Predicates.and(this.predicate, predicate));
    }

    public boolean allSatisfy(<name>Predicate predicate)
    {
        return !this.anySatisfy(<name>Predicates.not(predicate));
    }

    public <name>Iterable select(<name>Predicate predicate)
    {
        return new Select<name>Iterable(this, predicate);
    }

    public <name>Iterable reject(<name>Predicate predicate)
    {
        return new Select<name>Iterable(this, <name>Predicates.not(predicate));
    }

    public <type> detectIfNone(<name>Predicate predicate, <type> ifNone)
    {
        for (<name>Iterator <type>Iterator = this.<type>Iterator(); <type>Iterator.hasNext() ;)
        {
            <type> item = <type>Iterator.next();
            if (predicate.accept(item))
            {
                return item;
            }
        }
        return ifNone;
    }

    public \<V\> RichIterable\<V\> collect(<name>ToObjectFunction\<? extends V\> function)
    {
        return new Collect<name>ToObjectIterable\<V\>(this, function);
    }

    <(arithmeticMethods.(type))(name, type)>

    public <type>[] toArray()
    {
        final <type>[] array = new <type>[this.size()];
        this.forEach(new <name>Procedure()
        {
            @SuppressWarnings("FieldMayBeFinal")
            private int index = 0;
            public void value(<type> each)
            {
                array[this.index++] = each;
            }
        });
        return array;
    }

    @Override
    public String toString()
    {
        return this.makeString("[", ", ", "]");
    }

    public String makeString()
    {
        return this.makeString(", ");
    }

    public String makeString(String separator)
    {
        return this.makeString("", separator, "");
    }

    public String makeString(String start, String separator, String end)
    {
        Appendable stringBuilder = new StringBuilder();
        this.appendString(stringBuilder, start, separator, end);
        return stringBuilder.toString();
    }

    public void appendString(Appendable appendable)
    {
        this.appendString(appendable, ", ");
    }

    public void appendString(Appendable appendable, String separator)
    {
        this.appendString(appendable, "", separator, "");
    }

    public void appendString(Appendable appendable, String start, String separator, String end)
    {
        try
        {
            appendable.append(start);

            <name>Iterator iterator = this.<type>Iterator();
            if (iterator.hasNext())
            {
                appendable.append(String.valueOf(iterator.next()));
                while (iterator.hasNext())
                {
                    appendable.append(separator);
                    appendable.append(String.valueOf(iterator.next()));
                }
            }

            appendable.append(end);
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }

    public boolean contains(<type> value)
    {
        return this.anySatisfy(<name>Predicates.equal(value));
    }

    public boolean containsAll(<type>... source)
    {
        for (<type> value : source)
        {
            if (!this.contains(value))
            {
                return false;
            }
        }
        return true;
    }

    private static final class Count<name>Procedure implements <name>Procedure
    {
        private static final long serialVersionUID = 1L;
        private final <name>Predicate predicate;
        private int counter = 0;

        private Count<name>Procedure(<name>Predicate predicate)
        {
            this.predicate = predicate;
        }

        public void value(<type> each)
        {
            if (this.predicate.accept(each))
            {
                this.counter++;
            }
        }

        public int getCount()
        {
            return this.counter;
        }
    }

    private final class If<name>Procedure implements <name>Procedure
    {
        private static final long serialVersionUID = 1L;
        private final <name>Procedure procedure;

        private If<name>Procedure(<name>Procedure procedure)
        {
            this.procedure = procedure;
        }

        public void value(<type> each)
        {
            if (Select<name>Iterable.this.predicate.accept(each))
            {
                this.procedure.value(each);
            }
        }
    }

    private static final class Select<name>Iterator
            implements <name>Iterator
    {
        private final <name>Iterator iterator;
        private final <name>Predicate predicate;
        private <type> next;
        private boolean verifiedHasNext = false;

        private Select<name>Iterator(<name>Iterable iterable, <name>Predicate predicate)
        {
            this(iterable.<type>Iterator(), predicate);
        }

        private Select<name>Iterator(<name>Iterator iterator, <name>Predicate predicate)
        {
            this.iterator = iterator;
            this.predicate = predicate;
        }

        public boolean hasNext()
        {
            if (this.verifiedHasNext)
            {
                return true;
            }
            while (this.iterator.hasNext())
            {
                <type> temp = this.iterator.next();
                if (this.predicate.accept(temp))
                {
                    this.next = temp;
                    this.verifiedHasNext = true;
                    return true;
                }
            }
            return false;
        }

        public <type> next()
        {
            if (this.verifiedHasNext || this.hasNext())
            {
                this.verifiedHasNext = false;
                return this.next;
            }
            throw new NoSuchElementException();
        }
    }
}

>>

arithmeticMethods ::= [
    "byte": "allMethods",
    "short": "allMethods",
    "char": "allMethods",
    "int": "allMethods",
    "long": "allMethods",
    "float": "allMethods",
    "double": "allMethods",
    "boolean": "noMethods"
    ]


allMethods(name, type) ::=<<
    public <wideType.(type)> sum()
    {
        <wideType.(type)> sum = <wideZero.(type)>;
        for (<name>Iterator <type>Iterator = this.<type>Iterator(); <type>Iterator.hasNext() ;)
        {
            sum += <type>Iterator.next();
        }
        return sum;
    }

    public <type> max()
    {
        <name>Iterator <type>Iterator = this.<type>Iterator();
        <type> max = <type>Iterator.next();
        while (<type>Iterator.hasNext())
        {
            max = (<type>) Math.max(max, <type>Iterator.next());
        }
        return max;
    }

    public <type> min()
    {
        <name>Iterator <type>Iterator = this.<type>Iterator();
        <type> min = <type>Iterator.next();
        while (<type>Iterator.hasNext())
        {
            min = (<type>) Math.min(min, <type>Iterator.next());
        }
        return min;
    }

    public double average()
    {
        return <castSum.(type)>this.sum() / (double) this.size();
    }

    public double median()
    {
        <type>[] sortedArray = this.toSortedArray();
        int middleIndex = sortedArray.length \>\> 1;
        if (sortedArray.length > 1 && (sortedArray.length & 1) == 0)
        {
            <type> first = sortedArray[middleIndex];
            <type> second = sortedArray[middleIndex - 1];
            return (<castType.(type)>first + <castType.(type)>second) / 2.0;
        }
        return <castType.(type)>sortedArray[middleIndex];
    }

    public <type>[] toSortedArray()
    {
        <type>[] array = this.toArray();
        Arrays.sort(array);
        return array;
    }
>>

noMethods(name, type) ::= ""
