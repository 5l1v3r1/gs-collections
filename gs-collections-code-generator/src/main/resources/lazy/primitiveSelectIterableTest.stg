import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashcode.stg"
import "primitiveLiteral.stg"

fileName(primitive) ::= "Select<primitive.name>IterableTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.impl.lazy.primitive;

import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.procedure.primitive.<name>Procedure;
import com.gs.collections.api.iterator.<name>Iterator;
import com.gs.collections.impl.block.factory.primitive.<name>Predicates;
import com.gs.collections.impl.list.mutable.primitive.<name>ArrayList;
import org.junit.Assert;
import org.junit.Test;

public class Select<name>IterableTest
{
    private final Select<name>Iterable iterable = new Select<name>Iterable(<name>ArrayList.newListWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">), <name>Predicates.lessThan(<(literal.(type))("3")>));

    @Test
    public void <type>Iterator()
    {
        <wideType.(type)> sum = <wideZero.(type)>;
        for (<name>Iterator iterator = this.iterable.<type>Iterator(); iterator.hasNext() ;)
        {
            sum += iterator.next();
        }
        Assert.assertEquals(<(wideLiteral.(type))("3")>, sum<(wideDelta.(type))>);
    }

    @Test
    public void forEach()
    {
        final <wideType.(type)>[] sum = new <wideType.(type)>[1];
        this.iterable.forEach(new <name>Procedure()
        {
            public void value(<type> each)
            {
                sum[0] += each;
            }
        });
        Assert.assertEquals(<(wideLiteral.(type))("3")>, sum[0]<(wideDelta.(type))>);
    }

    @Test
    public void size()
    {
        Assert.assertEquals(2L, this.iterable.size());
    }

    @Test
    public void empty()
    {
        Assert.assertTrue(this.iterable.notEmpty());
        Assert.assertFalse(this.iterable.isEmpty());
    }

    @Test
    public void count()
    {
        Assert.assertEquals(1L, this.iterable.count(<name>Predicates.lessThan(<(literal.(type))("2")>)));
        Assert.assertEquals(0L, this.iterable.count(<name>Predicates.lessThan(<(literal.(type))("0")>)));
    }

    @Test
    public void anySatisfy()
    {
        Assert.assertTrue(this.iterable.anySatisfy(<name>Predicates.lessThan(<(literal.(type))("2")>)));
        Assert.assertFalse(this.iterable.anySatisfy(<name>Predicates.greaterThan(<(literal.(type))("4")>)));
    }

    @Test
    public void allSatisfy()
    {
        Assert.assertTrue(this.iterable.allSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertFalse(this.iterable.allSatisfy(<name>Predicates.lessThan(<(literal.(type))("2")>)));
        Assert.assertFalse(this.iterable.allSatisfy(<name>Predicates.lessThan(<(literal.(type))("1")>)));
        Assert.assertTrue(this.iterable.allSatisfy(<name>Predicates.lessThan(<(literal.(type))("4")>)));
    }

    @Test
    public void select()
    {
        Assert.assertEquals(1L, this.iterable.select(<name>Predicates.greaterThan(<(literal.(type))("1")>)).size());
        Assert.assertEquals(0L, this.iterable.select(<name>Predicates.lessThan(<(literal.(type))("0")>)).size());
    }

    @Test
    public void reject()
    {
        Assert.assertEquals(1L, this.iterable.reject(<name>Predicates.greaterThan(<(literal.(type))("1")>)).size());
        Assert.assertEquals(0L, this.iterable.reject(<name>Predicates.greaterThan(<(literal.(type))("0")>)).size());
    }

    @Test
    public void detectIfNone()
    {
        Assert.assertEquals(<(wideLiteral.(type))("1")>, this.iterable.detectIfNone(<name>Predicates.lessThan(<(literal.(type))("4")>), <(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, this.iterable.detectIfNone(<name>Predicates.greaterThan(<(literal.(type))("3")>), <(literal.(type))("0")>)<(wideDelta.(type))>);
    }

    @Test
    public void collect()
    {
        Assert.assertEquals(2L, this.iterable.collect(new <name>ToObjectFunction\<String\>()
        {
            public String valueOf(<type> <type>Parameter)
            {
                return String.valueOf(<type>Parameter);
            }
        }).size());
    }

    @Test
    public void sum()
    {
        Assert.assertEquals(<(wideLiteral.(type))("3")>, this.iterable.sum()<(wideDelta.(type))>);
    }

    @Test
    public void max()
    {
        Assert.assertEquals(<(literal.(type))("2")>, this.iterable.max()<(wideDelta.(type))>);
    }

    @Test
    public void min()
    {
        Assert.assertEquals(<(literal.(type))("1")>, this.iterable.min()<(wideDelta.(type))>);
    }

    @Test
    public void average()
    {
        Assert.assertEquals(1.5d, this.iterable.average(), 0.0);
    }

    @Test
    public void median()
    {
        Assert.assertEquals(1.5d, this.iterable.median(), 0.0);
    }

    @Test
    public void toArray()
    {
        Assert.assertArrayEquals(new <type>[]{1, 2}, this.iterable.toArray()<(delta.(type))>);
    }

    @Test
    public void toSortedArray()
    {
        Assert.assertArrayEquals(new <type>[]{1, 2}, this.iterable.toSortedArray()<(delta.(type))>);
    }
}
>>
