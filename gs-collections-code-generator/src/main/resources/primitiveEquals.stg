equals ::= [
    "byte": "operatorEquals",
    "short": "operatorEquals",
    "char": "operatorEquals",
    "int": "operatorEquals",
    "long": "operatorEquals",
    "float": "floatEquals",
    "double": "doubleEquals",
    default: "no matching equals"
]

operatorEquals(left, right) ::= <<
    <left> == <right>
>>

doubleEquals(left, right) ::= <<
    Double.compare(<left>, <right>) == 0
>>

floatEquals(left, right) ::= <<
    Float.compare(<left>, <right>) == 0
>>

notEquals ::= [
    "byte": "operatorNotEquals",
    "short": "operatorNotEquals",
    "char": "operatorNotEquals",
    "int": "operatorNotEquals",
    "long": "operatorNotEquals",
    "float": "floatNotEquals",
    "double": "doubleNotEquals",
    default: "no matching not equals"
]

operatorNotEquals(left, right) ::= <<
    <left> != <right>
>>

doubleNotEquals(left, right) ::= <<
    Double.compare(<left>, <right>) != 0
>>

floatNotEquals(left, right) ::= <<
    Float.compare(<left>, <right>) != 0
>>

lessThan ::= [
    "byte": "operatorLessThan",
    "short": "operatorLessThan",
    "char": "operatorLessThan",
    "int": "operatorLessThan",
    "long": "operatorLessThan",
    "float": "floatLessThan",
    "double": "doubleLessThan",
    default: "no matching less than"
]

operatorLessThan(left, right) ::= <<
    <left> \< <right>
>>

doubleLessThan(left, right) ::= <<
    Double.compare(<left>, <right>) \< 0
>>

floatLessThan(left, right) ::= <<
    Float.compare(<left>, <right>) \< 0
>>
